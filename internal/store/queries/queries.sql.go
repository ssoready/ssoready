// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const authCheckAssertionAlreadyProcessed = `-- name: AuthCheckAssertionAlreadyProcessed :one
select exists(select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth from saml_flows where id = $1 and access_code_sha256 is not null)
`

func (q *Queries) AuthCheckAssertionAlreadyProcessed(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, authCheckAssertionAlreadyProcessed, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const authGetInitData = `-- name: AuthGetInitData :one
select idp_redirect_url, sp_entity_id
from saml_connections
where saml_connections.id = $1
`

type AuthGetInitDataRow struct {
	IdpRedirectUrl *string
	SpEntityID     string
}

func (q *Queries) AuthGetInitData(ctx context.Context, id uuid.UUID) (AuthGetInitDataRow, error) {
	row := q.db.QueryRow(ctx, authGetInitData, id)
	var i AuthGetInitDataRow
	err := row.Scan(&i.IdpRedirectUrl, &i.SpEntityID)
	return i, err
}

const authGetSAMLConnectionDomains = `-- name: AuthGetSAMLConnectionDomains :many
select organization_domains.domain
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join organization_domains on organizations.id = organization_domains.organization_id
where saml_connections.id = $1
`

func (q *Queries) AuthGetSAMLConnectionDomains(ctx context.Context, id uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, authGetSAMLConnectionDomains, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authGetSAMLFlow = `-- name: AuthGetSAMLFlow :one
select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
from saml_flows
where id = $1
`

func (q *Queries) AuthGetSAMLFlow(ctx context.Context, id uuid.UUID) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, authGetSAMLFlow, id)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const authGetSAMLOAuthClient = `-- name: AuthGetSAMLOAuthClient :one
select saml_oauth_clients.id, saml_oauth_clients.environment_id, saml_oauth_clients.client_secret_sha256, environments.app_organization_id
from saml_oauth_clients
         join environments on saml_oauth_clients.environment_id = environments.id
where saml_oauth_clients.id = $1
`

type AuthGetSAMLOAuthClientRow struct {
	ID                 uuid.UUID
	EnvironmentID      uuid.UUID
	ClientSecretSha256 []byte
	AppOrganizationID  uuid.UUID
}

func (q *Queries) AuthGetSAMLOAuthClient(ctx context.Context, id uuid.UUID) (AuthGetSAMLOAuthClientRow, error) {
	row := q.db.QueryRow(ctx, authGetSAMLOAuthClient, id)
	var i AuthGetSAMLOAuthClientRow
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.ClientSecretSha256,
		&i.AppOrganizationID,
	)
	return i, err
}

const authGetSAMLOAuthClientWithSecret = `-- name: AuthGetSAMLOAuthClientWithSecret :one
select saml_oauth_clients.id, saml_oauth_clients.environment_id, saml_oauth_clients.client_secret_sha256, environments.app_organization_id
from saml_oauth_clients
         join environments on saml_oauth_clients.environment_id = environments.id
where saml_oauth_clients.id = $1
  and saml_oauth_clients.client_secret_sha256 = $2
`

type AuthGetSAMLOAuthClientWithSecretParams struct {
	ID                 uuid.UUID
	ClientSecretSha256 []byte
}

type AuthGetSAMLOAuthClientWithSecretRow struct {
	ID                 uuid.UUID
	EnvironmentID      uuid.UUID
	ClientSecretSha256 []byte
	AppOrganizationID  uuid.UUID
}

func (q *Queries) AuthGetSAMLOAuthClientWithSecret(ctx context.Context, arg AuthGetSAMLOAuthClientWithSecretParams) (AuthGetSAMLOAuthClientWithSecretRow, error) {
	row := q.db.QueryRow(ctx, authGetSAMLOAuthClientWithSecret, arg.ID, arg.ClientSecretSha256)
	var i AuthGetSAMLOAuthClientWithSecretRow
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.ClientSecretSha256,
		&i.AppOrganizationID,
	)
	return i, err
}

const authGetValidateData = `-- name: AuthGetValidateData :one
select saml_connections.sp_entity_id,
       saml_connections.idp_entity_id,
       saml_connections.idp_x509_certificate,
       environments.redirect_url,
       environments.oauth_redirect_uri
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where saml_connections.id = $1
`

type AuthGetValidateDataRow struct {
	SpEntityID         string
	IdpEntityID        *string
	IdpX509Certificate []byte
	RedirectUrl        *string
	OauthRedirectUri   *string
}

func (q *Queries) AuthGetValidateData(ctx context.Context, id uuid.UUID) (AuthGetValidateDataRow, error) {
	row := q.db.QueryRow(ctx, authGetValidateData, id)
	var i AuthGetValidateDataRow
	err := row.Scan(
		&i.SpEntityID,
		&i.IdpEntityID,
		&i.IdpX509Certificate,
		&i.RedirectUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const checkExistsEmailVerificationChallenge = `-- name: CheckExistsEmailVerificationChallenge :one
select exists(select id, email, expire_time, secret_token from email_verification_challenges where email = $1 and expire_time > $2)
`

type CheckExistsEmailVerificationChallengeParams struct {
	Email      string
	ExpireTime time.Time
}

func (q *Queries) CheckExistsEmailVerificationChallenge(ctx context.Context, arg CheckExistsEmailVerificationChallengeParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkExistsEmailVerificationChallenge, arg.Email, arg.ExpireTime)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAPIKey = `-- name: CreateAPIKey :one
insert into api_keys (id, secret_value, secret_value_sha256, environment_id)
values ($1, '', $2, $3)
returning id, secret_value, environment_id, secret_value_sha256
`

type CreateAPIKeyParams struct {
	ID                uuid.UUID
	SecretValueSha256 []byte
	EnvironmentID     uuid.UUID
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.ID, arg.SecretValueSha256, arg.EnvironmentID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.SecretValue,
		&i.EnvironmentID,
		&i.SecretValueSha256,
	)
	return i, err
}

const createAppOrganization = `-- name: CreateAppOrganization :one
insert into app_organizations (id, google_hosted_domain)
values ($1, $2)
returning id, google_hosted_domain
`

type CreateAppOrganizationParams struct {
	ID                 uuid.UUID
	GoogleHostedDomain *string
}

func (q *Queries) CreateAppOrganization(ctx context.Context, arg CreateAppOrganizationParams) (AppOrganization, error) {
	row := q.db.QueryRow(ctx, createAppOrganization, arg.ID, arg.GoogleHostedDomain)
	var i AppOrganization
	err := row.Scan(&i.ID, &i.GoogleHostedDomain)
	return i, err
}

const createAppSession = `-- name: CreateAppSession :one
insert into app_sessions (id, app_user_id, create_time, expire_time, token, token_sha256, revoked)
values ($1, $2, $3, $4, '', $5, $6)
returning id, app_user_id, create_time, expire_time, token, token_sha256, revoked
`

type CreateAppSessionParams struct {
	ID          uuid.UUID
	AppUserID   uuid.UUID
	CreateTime  time.Time
	ExpireTime  time.Time
	TokenSha256 []byte
	Revoked     *bool
}

func (q *Queries) CreateAppSession(ctx context.Context, arg CreateAppSessionParams) (AppSession, error) {
	row := q.db.QueryRow(ctx, createAppSession,
		arg.ID,
		arg.AppUserID,
		arg.CreateTime,
		arg.ExpireTime,
		arg.TokenSha256,
		arg.Revoked,
	)
	var i AppSession
	err := row.Scan(
		&i.ID,
		&i.AppUserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const createAppUser = `-- name: CreateAppUser :one
insert into app_users (id, app_organization_id, display_name, email)
values ($1, $2, $3, $4)
returning id, app_organization_id, display_name, email
`

type CreateAppUserParams struct {
	ID                uuid.UUID
	AppOrganizationID uuid.UUID
	DisplayName       string
	Email             string
}

func (q *Queries) CreateAppUser(ctx context.Context, arg CreateAppUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, createAppUser,
		arg.ID,
		arg.AppOrganizationID,
		arg.DisplayName,
		arg.Email,
	)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const createEmailVerificationChallenge = `-- name: CreateEmailVerificationChallenge :one
insert into email_verification_challenges (id, email, expire_time, secret_token)
values ($1, $2, $3, $4)
returning id, email, expire_time, secret_token
`

type CreateEmailVerificationChallengeParams struct {
	ID          uuid.UUID
	Email       string
	ExpireTime  time.Time
	SecretToken string
}

func (q *Queries) CreateEmailVerificationChallenge(ctx context.Context, arg CreateEmailVerificationChallengeParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationChallenge,
		arg.ID,
		arg.Email,
		arg.ExpireTime,
		arg.SecretToken,
	)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ExpireTime,
		&i.SecretToken,
	)
	return i, err
}

const createEnvironment = `-- name: CreateEnvironment :one
insert into environments (id, redirect_url, app_organization_id, display_name, auth_url)
values ($1, $2, $3, $4, $5)
returning id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
`

type CreateEnvironmentParams struct {
	ID                uuid.UUID
	RedirectUrl       *string
	AppOrganizationID uuid.UUID
	DisplayName       *string
	AuthUrl           *string
}

func (q *Queries) CreateEnvironment(ctx context.Context, arg CreateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, createEnvironment,
		arg.ID,
		arg.RedirectUrl,
		arg.AppOrganizationID,
		arg.DisplayName,
		arg.AuthUrl,
	)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
insert into organizations (id, environment_id, external_id)
values ($1, $2, $3)
returning id, environment_id, external_id
`

type CreateOrganizationParams struct {
	ID            uuid.UUID
	EnvironmentID uuid.UUID
	ExternalID    *string
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.ID, arg.EnvironmentID, arg.ExternalID)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const createOrganizationDomain = `-- name: CreateOrganizationDomain :one
insert into organization_domains (id, organization_id, domain)
values ($1, $2, $3)
returning id, organization_id, domain
`

type CreateOrganizationDomainParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Domain         string
}

func (q *Queries) CreateOrganizationDomain(ctx context.Context, arg CreateOrganizationDomainParams) (OrganizationDomain, error) {
	row := q.db.QueryRow(ctx, createOrganizationDomain, arg.ID, arg.OrganizationID, arg.Domain)
	var i OrganizationDomain
	err := row.Scan(&i.ID, &i.OrganizationID, &i.Domain)
	return i, err
}

const createSAMLConnection = `-- name: CreateSAMLConnection :one
insert into saml_connections (id, organization_id, sp_entity_id, sp_acs_url, idp_entity_id, idp_redirect_url,
                              idp_x509_certificate,
                              is_primary)
values ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
`

type CreateSAMLConnectionParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	SpEntityID         string
	SpAcsUrl           string
	IdpEntityID        *string
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IsPrimary          bool
}

func (q *Queries) CreateSAMLConnection(ctx context.Context, arg CreateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, createSAMLConnection,
		arg.ID,
		arg.OrganizationID,
		arg.SpEntityID,
		arg.SpAcsUrl,
		arg.IdpEntityID,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IsPrimary,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const createSAMLFlowGetRedirect = `-- name: CreateSAMLFlowGetRedirect :one
insert into saml_flows (id, saml_connection_id, expire_time, state, create_time, update_time,
                        auth_redirect_url, get_redirect_time, status)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type CreateSAMLFlowGetRedirectParams struct {
	ID               uuid.UUID
	SamlConnectionID uuid.UUID
	ExpireTime       time.Time
	State            string
	CreateTime       time.Time
	UpdateTime       time.Time
	AuthRedirectUrl  *string
	GetRedirectTime  *time.Time
	Status           SamlFlowStatus
}

func (q *Queries) CreateSAMLFlowGetRedirect(ctx context.Context, arg CreateSAMLFlowGetRedirectParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, createSAMLFlowGetRedirect,
		arg.ID,
		arg.SamlConnectionID,
		arg.ExpireTime,
		arg.State,
		arg.CreateTime,
		arg.UpdateTime,
		arg.AuthRedirectUrl,
		arg.GetRedirectTime,
		arg.Status,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const createSAMLOAuthClient = `-- name: CreateSAMLOAuthClient :one
insert into saml_oauth_clients (id, environment_id, client_secret_sha256)
values ($1, $2, $3)
returning id, environment_id, client_secret_sha256
`

type CreateSAMLOAuthClientParams struct {
	ID                 uuid.UUID
	EnvironmentID      uuid.UUID
	ClientSecretSha256 []byte
}

func (q *Queries) CreateSAMLOAuthClient(ctx context.Context, arg CreateSAMLOAuthClientParams) (SamlOauthClient, error) {
	row := q.db.QueryRow(ctx, createSAMLOAuthClient, arg.ID, arg.EnvironmentID, arg.ClientSecretSha256)
	var i SamlOauthClient
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ClientSecretSha256)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
delete
from api_keys
where id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, id)
	return err
}

const deleteOrganizationDomains = `-- name: DeleteOrganizationDomains :exec
delete
from organization_domains
where organization_id = $1
`

func (q *Queries) DeleteOrganizationDomains(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganizationDomains, organizationID)
	return err
}

const deleteSAMLOAuthClient = `-- name: DeleteSAMLOAuthClient :exec
delete
from saml_oauth_clients
where id = $1
`

func (q *Queries) DeleteSAMLOAuthClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSAMLOAuthClient, id)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
select api_keys.id, api_keys.secret_value, api_keys.environment_id, api_keys.secret_value_sha256
from api_keys
         join environments on api_keys.environment_id = environments.id
where environments.app_organization_id = $1
  and api_keys.id = $2
`

type GetAPIKeyParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetAPIKey(ctx context.Context, arg GetAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, arg.AppOrganizationID, arg.ID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.SecretValue,
		&i.EnvironmentID,
		&i.SecretValueSha256,
	)
	return i, err
}

const getAPIKeyBySecretValueSHA256 = `-- name: GetAPIKeyBySecretValueSHA256 :one
select api_keys.id, api_keys.secret_value, api_keys.environment_id, api_keys.secret_value_sha256, environments.app_organization_id
from api_keys
         join environments on api_keys.environment_id = environments.id
where secret_value_sha256 = $1
`

type GetAPIKeyBySecretValueSHA256Row struct {
	ID                uuid.UUID
	SecretValue       string
	EnvironmentID     uuid.UUID
	SecretValueSha256 []byte
	AppOrganizationID uuid.UUID
}

func (q *Queries) GetAPIKeyBySecretValueSHA256(ctx context.Context, secretValueSha256 []byte) (GetAPIKeyBySecretValueSHA256Row, error) {
	row := q.db.QueryRow(ctx, getAPIKeyBySecretValueSHA256, secretValueSha256)
	var i GetAPIKeyBySecretValueSHA256Row
	err := row.Scan(
		&i.ID,
		&i.SecretValue,
		&i.EnvironmentID,
		&i.SecretValueSha256,
		&i.AppOrganizationID,
	)
	return i, err
}

const getAppOrganizationByGoogleHostedDomain = `-- name: GetAppOrganizationByGoogleHostedDomain :one
select id, google_hosted_domain
from app_organizations
where google_hosted_domain = $1
`

func (q *Queries) GetAppOrganizationByGoogleHostedDomain(ctx context.Context, googleHostedDomain *string) (AppOrganization, error) {
	row := q.db.QueryRow(ctx, getAppOrganizationByGoogleHostedDomain, googleHostedDomain)
	var i AppOrganization
	err := row.Scan(&i.ID, &i.GoogleHostedDomain)
	return i, err
}

const getAppSessionByTokenSHA256 = `-- name: GetAppSessionByTokenSHA256 :one
select app_sessions.id,
       app_sessions.app_user_id,
       app_users.display_name,
       app_users.email,
       app_users.app_organization_id
from app_sessions
         join app_users on app_sessions.app_user_id = app_users.id
where token_sha256 = $1
  and expire_time > $2
  and revoked = false
`

type GetAppSessionByTokenSHA256Params struct {
	TokenSha256 []byte
	ExpireTime  time.Time
}

type GetAppSessionByTokenSHA256Row struct {
	ID                uuid.UUID
	AppUserID         uuid.UUID
	DisplayName       string
	Email             string
	AppOrganizationID uuid.UUID
}

func (q *Queries) GetAppSessionByTokenSHA256(ctx context.Context, arg GetAppSessionByTokenSHA256Params) (GetAppSessionByTokenSHA256Row, error) {
	row := q.db.QueryRow(ctx, getAppSessionByTokenSHA256, arg.TokenSha256, arg.ExpireTime)
	var i GetAppSessionByTokenSHA256Row
	err := row.Scan(
		&i.ID,
		&i.AppUserID,
		&i.DisplayName,
		&i.Email,
		&i.AppOrganizationID,
	)
	return i, err
}

const getAppUserByEmail = `-- name: GetAppUserByEmail :one
select id, app_organization_id, display_name, email
from app_users
where email = $1
`

func (q *Queries) GetAppUserByEmail(ctx context.Context, email string) (AppUser, error) {
	row := q.db.QueryRow(ctx, getAppUserByEmail, email)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getAppUserByID = `-- name: GetAppUserByID :one
select id, app_organization_id, display_name, email
from app_users
where app_organization_id = $1
  and id = $2
`

type GetAppUserByIDParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetAppUserByID(ctx context.Context, arg GetAppUserByIDParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, getAppUserByID, arg.AppOrganizationID, arg.ID)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getEmailVerificationChallengeBySecretToken = `-- name: GetEmailVerificationChallengeBySecretToken :one
select id, email, expire_time, secret_token
from email_verification_challenges
where secret_token = $1
  and expire_time > $2
`

type GetEmailVerificationChallengeBySecretTokenParams struct {
	SecretToken string
	ExpireTime  time.Time
}

func (q *Queries) GetEmailVerificationChallengeBySecretToken(ctx context.Context, arg GetEmailVerificationChallengeBySecretTokenParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationChallengeBySecretToken, arg.SecretToken, arg.ExpireTime)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ExpireTime,
		&i.SecretToken,
	)
	return i, err
}

const getEnvironment = `-- name: GetEnvironment :one
select id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
from environments
where app_organization_id = $1
  and id = $2
`

type GetEnvironmentParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetEnvironment(ctx context.Context, arg GetEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, getEnvironment, arg.AppOrganizationID, arg.ID)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const getEnvironmentByID = `-- name: GetEnvironmentByID :one
select id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
from environments
where id = $1
`

func (q *Queries) GetEnvironmentByID(ctx context.Context, id uuid.UUID) (Environment, error) {
	row := q.db.QueryRow(ctx, getEnvironmentByID, id)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const getOnboardingState = `-- name: GetOnboardingState :one
select app_organization_id, dummyidp_app_id, onboarding_environment_id, onboarding_organization_id, onboarding_saml_connection_id
from onboarding_states
where app_organization_id = $1
`

func (q *Queries) GetOnboardingState(ctx context.Context, appOrganizationID uuid.UUID) (OnboardingState, error) {
	row := q.db.QueryRow(ctx, getOnboardingState, appOrganizationID)
	var i OnboardingState
	err := row.Scan(
		&i.AppOrganizationID,
		&i.DummyidpAppID,
		&i.OnboardingEnvironmentID,
		&i.OnboardingOrganizationID,
		&i.OnboardingSamlConnectionID,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
select organizations.id, organizations.environment_id, organizations.external_id
from organizations
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and organizations.id = $2
`

type GetOrganizationParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetOrganization(ctx context.Context, arg GetOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, arg.AppOrganizationID, arg.ID)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
select id, environment_id, external_id
from organizations
where id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const getPrimarySAMLConnectionIDByOrganizationExternalID = `-- name: GetPrimarySAMLConnectionIDByOrganizationExternalID :one
select saml_connections.id
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
where organizations.environment_id = $1
  and organizations.external_id = $2
  and saml_connections.is_primary = true
`

type GetPrimarySAMLConnectionIDByOrganizationExternalIDParams struct {
	EnvironmentID uuid.UUID
	ExternalID    *string
}

func (q *Queries) GetPrimarySAMLConnectionIDByOrganizationExternalID(ctx context.Context, arg GetPrimarySAMLConnectionIDByOrganizationExternalIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPrimarySAMLConnectionIDByOrganizationExternalID, arg.EnvironmentID, arg.ExternalID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPrimarySAMLConnectionIDByOrganizationID = `-- name: GetPrimarySAMLConnectionIDByOrganizationID :one
select saml_connections.id
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
where organizations.environment_id = $1
  and organizations.id = $2
  and saml_connections.is_primary = true
`

type GetPrimarySAMLConnectionIDByOrganizationIDParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) GetPrimarySAMLConnectionIDByOrganizationID(ctx context.Context, arg GetPrimarySAMLConnectionIDByOrganizationIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPrimarySAMLConnectionIDByOrganizationID, arg.EnvironmentID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getSAMLAccessCodeData = `-- name: GetSAMLAccessCodeData :one
select saml_flows.id             as saml_flow_id,
       saml_flows.email,
       saml_flows.subject_idp_attributes,
       saml_flows.state,
       organizations.id          as organization_id,
       organizations.external_id as organization_external_id,
       environments.id           as environment_id
from saml_flows
         join saml_connections on saml_flows.saml_connection_id = saml_connections.id
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and environments.id = $3
  and saml_flows.access_code_sha256 = $2
`

type GetSAMLAccessCodeDataParams struct {
	AppOrganizationID uuid.UUID
	AccessCodeSha256  []byte
	EnvironmentID     uuid.UUID
}

type GetSAMLAccessCodeDataRow struct {
	SamlFlowID             uuid.UUID
	Email                  *string
	SubjectIdpAttributes   []byte
	State                  string
	OrganizationID         uuid.UUID
	OrganizationExternalID *string
	EnvironmentID          uuid.UUID
}

func (q *Queries) GetSAMLAccessCodeData(ctx context.Context, arg GetSAMLAccessCodeDataParams) (GetSAMLAccessCodeDataRow, error) {
	row := q.db.QueryRow(ctx, getSAMLAccessCodeData, arg.AppOrganizationID, arg.AccessCodeSha256, arg.EnvironmentID)
	var i GetSAMLAccessCodeDataRow
	err := row.Scan(
		&i.SamlFlowID,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.State,
		&i.OrganizationID,
		&i.OrganizationExternalID,
		&i.EnvironmentID,
	)
	return i, err
}

const getSAMLConnection = `-- name: GetSAMLConnection :one
select saml_connections.id, saml_connections.organization_id, saml_connections.idp_redirect_url, saml_connections.idp_x509_certificate, saml_connections.idp_entity_id, saml_connections.sp_entity_id, saml_connections.is_primary, saml_connections.sp_acs_url
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and saml_connections.id = $2
`

type GetSAMLConnectionParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetSAMLConnection(ctx context.Context, arg GetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnection, arg.AppOrganizationID, arg.ID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const getSAMLConnectionByID = `-- name: GetSAMLConnectionByID :one
select id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
from saml_connections
where id = $1
`

func (q *Queries) GetSAMLConnectionByID(ctx context.Context, id uuid.UUID) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnectionByID, id)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const getSAMLFlow = `-- name: GetSAMLFlow :one
select saml_flows.id, saml_flows.saml_connection_id, saml_flows.access_code, saml_flows.state, saml_flows.create_time, saml_flows.expire_time, saml_flows.email, saml_flows.subject_idp_attributes, saml_flows.update_time, saml_flows.auth_redirect_url, saml_flows.get_redirect_time, saml_flows.initiate_request, saml_flows.initiate_time, saml_flows.assertion, saml_flows.app_redirect_url, saml_flows.receive_assertion_time, saml_flows.redeem_time, saml_flows.redeem_response, saml_flows.error_bad_issuer, saml_flows.error_bad_audience, saml_flows.error_bad_subject_id, saml_flows.error_email_outside_organization_domains, saml_flows.status, saml_flows.error_unsigned_assertion, saml_flows.access_code_sha256, saml_flows.is_oauth
from saml_flows
         join saml_connections on saml_flows.saml_connection_id = saml_connections.id
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and saml_flows.id = $2
`

type GetSAMLFlowParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetSAMLFlow(ctx context.Context, arg GetSAMLFlowParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, getSAMLFlow, arg.AppOrganizationID, arg.ID)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const getSAMLOAuthClient = `-- name: GetSAMLOAuthClient :one
select saml_oauth_clients.id, saml_oauth_clients.environment_id, saml_oauth_clients.client_secret_sha256
from saml_oauth_clients
         join environments on saml_oauth_clients.environment_id = environments.id
where environments.app_organization_id = $1
  and saml_oauth_clients.id = $2
`

type GetSAMLOAuthClientParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetSAMLOAuthClient(ctx context.Context, arg GetSAMLOAuthClientParams) (SamlOauthClient, error) {
	row := q.db.QueryRow(ctx, getSAMLOAuthClient, arg.AppOrganizationID, arg.ID)
	var i SamlOauthClient
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ClientSecretSha256)
	return i, err
}

const getSAMLRedirectURLData = `-- name: GetSAMLRedirectURLData :one
select environments.auth_url
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and environments.id = $2
  and saml_connections.id = $3
`

type GetSAMLRedirectURLDataParams struct {
	AppOrganizationID uuid.UUID
	EnvironmentID     uuid.UUID
	SamlConnectionID  uuid.UUID
}

func (q *Queries) GetSAMLRedirectURLData(ctx context.Context, arg GetSAMLRedirectURLDataParams) (*string, error) {
	row := q.db.QueryRow(ctx, getSAMLRedirectURLData, arg.AppOrganizationID, arg.EnvironmentID, arg.SamlConnectionID)
	var auth_url *string
	err := row.Scan(&auth_url)
	return auth_url, err
}

const listAPIKeys = `-- name: ListAPIKeys :many
select id, secret_value, environment_id, secret_value_sha256
from api_keys
where environment_id = $1
  and id > $2
order by id
limit $3
`

type ListAPIKeysParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
	Limit         int32
}

func (q *Queries) ListAPIKeys(ctx context.Context, arg ListAPIKeysParams) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeys, arg.EnvironmentID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.SecretValue,
			&i.EnvironmentID,
			&i.SecretValueSha256,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEnvironments = `-- name: ListEnvironments :many
select id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
from environments
where app_organization_id = $1
  and id > $2
order by id
limit $3
`

type ListEnvironmentsParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
	Limit             int32
}

func (q *Queries) ListEnvironments(ctx context.Context, arg ListEnvironmentsParams) ([]Environment, error) {
	rows, err := q.db.Query(ctx, listEnvironments, arg.AppOrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.ID,
			&i.RedirectUrl,
			&i.AppOrganizationID,
			&i.DisplayName,
			&i.AuthUrl,
			&i.OauthRedirectUri,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationDomains = `-- name: ListOrganizationDomains :many
select id, organization_id, domain
from organization_domains
where organization_id = any ($1::uuid[])
`

func (q *Queries) ListOrganizationDomains(ctx context.Context, dollar_1 []uuid.UUID) ([]OrganizationDomain, error) {
	rows, err := q.db.Query(ctx, listOrganizationDomains, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationDomain
	for rows.Next() {
		var i OrganizationDomain
		if err := rows.Scan(&i.ID, &i.OrganizationID, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizations = `-- name: ListOrganizations :many
select id, environment_id, external_id
from organizations
where environment_id = $1
  and id >= $2
order by id
limit $3
`

type ListOrganizationsParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
	Limit         int32
}

func (q *Queries) ListOrganizations(ctx context.Context, arg ListOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations, arg.EnvironmentID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLConnections = `-- name: ListSAMLConnections :many
select id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
from saml_connections
where organization_id = $1
  and id >= $2
order by id
limit $3
`

type ListSAMLConnectionsParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSAMLConnections(ctx context.Context, arg ListSAMLConnectionsParams) ([]SamlConnection, error) {
	rows, err := q.db.Query(ctx, listSAMLConnections, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlConnection
	for rows.Next() {
		var i SamlConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.IdpRedirectUrl,
			&i.IdpX509Certificate,
			&i.IdpEntityID,
			&i.SpEntityID,
			&i.IsPrimary,
			&i.SpAcsUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLFlowsFirstPage = `-- name: ListSAMLFlowsFirstPage :many
select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
from saml_flows
where saml_connection_id = $1
order by (create_time, id) desc
limit $2
`

type ListSAMLFlowsFirstPageParams struct {
	SamlConnectionID uuid.UUID
	Limit            int32
}

func (q *Queries) ListSAMLFlowsFirstPage(ctx context.Context, arg ListSAMLFlowsFirstPageParams) ([]SamlFlow, error) {
	rows, err := q.db.Query(ctx, listSAMLFlowsFirstPage, arg.SamlConnectionID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlFlow
	for rows.Next() {
		var i SamlFlow
		if err := rows.Scan(
			&i.ID,
			&i.SamlConnectionID,
			&i.AccessCode,
			&i.State,
			&i.CreateTime,
			&i.ExpireTime,
			&i.Email,
			&i.SubjectIdpAttributes,
			&i.UpdateTime,
			&i.AuthRedirectUrl,
			&i.GetRedirectTime,
			&i.InitiateRequest,
			&i.InitiateTime,
			&i.Assertion,
			&i.AppRedirectUrl,
			&i.ReceiveAssertionTime,
			&i.RedeemTime,
			&i.RedeemResponse,
			&i.ErrorBadIssuer,
			&i.ErrorBadAudience,
			&i.ErrorBadSubjectID,
			&i.ErrorEmailOutsideOrganizationDomains,
			&i.Status,
			&i.ErrorUnsignedAssertion,
			&i.AccessCodeSha256,
			&i.IsOauth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLFlowsNextPage = `-- name: ListSAMLFlowsNextPage :many
select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
from saml_flows
where saml_connection_id = $1
  and (create_time, id) <= ($3, $4::uuid)
order by (create_time, id) desc
limit $2
`

type ListSAMLFlowsNextPageParams struct {
	SamlConnectionID uuid.UUID
	Limit            int32
	CreateTime       time.Time
	ID               uuid.UUID
}

func (q *Queries) ListSAMLFlowsNextPage(ctx context.Context, arg ListSAMLFlowsNextPageParams) ([]SamlFlow, error) {
	rows, err := q.db.Query(ctx, listSAMLFlowsNextPage,
		arg.SamlConnectionID,
		arg.Limit,
		arg.CreateTime,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlFlow
	for rows.Next() {
		var i SamlFlow
		if err := rows.Scan(
			&i.ID,
			&i.SamlConnectionID,
			&i.AccessCode,
			&i.State,
			&i.CreateTime,
			&i.ExpireTime,
			&i.Email,
			&i.SubjectIdpAttributes,
			&i.UpdateTime,
			&i.AuthRedirectUrl,
			&i.GetRedirectTime,
			&i.InitiateRequest,
			&i.InitiateTime,
			&i.Assertion,
			&i.AppRedirectUrl,
			&i.ReceiveAssertionTime,
			&i.RedeemTime,
			&i.RedeemResponse,
			&i.ErrorBadIssuer,
			&i.ErrorBadAudience,
			&i.ErrorBadSubjectID,
			&i.ErrorEmailOutsideOrganizationDomains,
			&i.Status,
			&i.ErrorUnsignedAssertion,
			&i.AccessCodeSha256,
			&i.IsOauth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLOAuthClients = `-- name: ListSAMLOAuthClients :many
select id, environment_id, client_secret_sha256
from saml_oauth_clients
where environment_id = $1
  and id > $2
order by id
limit $3
`

type ListSAMLOAuthClientsParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
	Limit         int32
}

func (q *Queries) ListSAMLOAuthClients(ctx context.Context, arg ListSAMLOAuthClientsParams) ([]SamlOauthClient, error) {
	rows, err := q.db.Query(ctx, listSAMLOAuthClients, arg.EnvironmentID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlOauthClient
	for rows.Next() {
		var i SamlOauthClient
		if err := rows.Scan(&i.ID, &i.EnvironmentID, &i.ClientSecretSha256); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAppSessionByID = `-- name: RevokeAppSessionByID :one
update app_sessions
set revoked = true
where id = $1
returning id, app_user_id, create_time, expire_time, token, token_sha256, revoked
`

func (q *Queries) RevokeAppSessionByID(ctx context.Context, id uuid.UUID) (AppSession, error) {
	row := q.db.QueryRow(ctx, revokeAppSessionByID, id)
	var i AppSession
	err := row.Scan(
		&i.ID,
		&i.AppUserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const updateEnvironment = `-- name: UpdateEnvironment :one
update environments
set display_name       = $1,
    redirect_url       = $2,
    auth_url           = $3,
    oauth_redirect_uri = $4
where id = $5
returning id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
`

type UpdateEnvironmentParams struct {
	DisplayName      *string
	RedirectUrl      *string
	AuthUrl          *string
	OauthRedirectUri *string
	ID               uuid.UUID
}

func (q *Queries) UpdateEnvironment(ctx context.Context, arg UpdateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, updateEnvironment,
		arg.DisplayName,
		arg.RedirectUrl,
		arg.AuthUrl,
		arg.OauthRedirectUri,
		arg.ID,
	)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const updateOnboardingState = `-- name: UpdateOnboardingState :one
insert into onboarding_states (app_organization_id, dummyidp_app_id, onboarding_environment_id,
                               onboarding_organization_id,
                               onboarding_saml_connection_id)
values ($1, $2, $3, $4, $5)
on conflict (app_organization_id) do update set dummyidp_app_id               = excluded.dummyidp_app_id,
                                                onboarding_environment_id     = excluded.onboarding_environment_id,
                                                onboarding_organization_id    = excluded.onboarding_organization_id,
                                                onboarding_saml_connection_id = excluded.onboarding_saml_connection_id
returning app_organization_id, dummyidp_app_id, onboarding_environment_id, onboarding_organization_id, onboarding_saml_connection_id
`

type UpdateOnboardingStateParams struct {
	AppOrganizationID          uuid.UUID
	DummyidpAppID              string
	OnboardingEnvironmentID    uuid.UUID
	OnboardingOrganizationID   uuid.UUID
	OnboardingSamlConnectionID uuid.UUID
}

func (q *Queries) UpdateOnboardingState(ctx context.Context, arg UpdateOnboardingStateParams) (OnboardingState, error) {
	row := q.db.QueryRow(ctx, updateOnboardingState,
		arg.AppOrganizationID,
		arg.DummyidpAppID,
		arg.OnboardingEnvironmentID,
		arg.OnboardingOrganizationID,
		arg.OnboardingSamlConnectionID,
	)
	var i OnboardingState
	err := row.Scan(
		&i.AppOrganizationID,
		&i.DummyidpAppID,
		&i.OnboardingEnvironmentID,
		&i.OnboardingOrganizationID,
		&i.OnboardingSamlConnectionID,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
update organizations
set external_id = $1
where id = $2
returning id, environment_id, external_id
`

type UpdateOrganizationParams struct {
	ExternalID *string
	ID         uuid.UUID
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization, arg.ExternalID, arg.ID)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const updatePrimarySAMLConnection = `-- name: UpdatePrimarySAMLConnection :exec
update saml_connections
set is_primary = (id = $1)
where organization_id = $2
`

type UpdatePrimarySAMLConnectionParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) UpdatePrimarySAMLConnection(ctx context.Context, arg UpdatePrimarySAMLConnectionParams) error {
	_, err := q.db.Exec(ctx, updatePrimarySAMLConnection, arg.ID, arg.OrganizationID)
	return err
}

const updateSAMLConnection = `-- name: UpdateSAMLConnection :one
update saml_connections
set idp_entity_id        = $1,
    idp_redirect_url     = $2,
    idp_x509_certificate = $3,
    is_primary           = $4
where id = $5
returning id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
`

type UpdateSAMLConnectionParams struct {
	IdpEntityID        *string
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IsPrimary          bool
	ID                 uuid.UUID
}

func (q *Queries) UpdateSAMLConnection(ctx context.Context, arg UpdateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, updateSAMLConnection,
		arg.IdpEntityID,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IsPrimary,
		arg.ID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const updateSAMLFlowRedeem = `-- name: UpdateSAMLFlowRedeem :one
update saml_flows
set update_time        = $1,
    redeem_time        = $2,
    redeem_response    = $3,
    status             = $4,
    access_code_sha256 = null
where id = $5
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpdateSAMLFlowRedeemParams struct {
	UpdateTime     time.Time
	RedeemTime     *time.Time
	RedeemResponse []byte
	Status         SamlFlowStatus
	ID             uuid.UUID
}

func (q *Queries) UpdateSAMLFlowRedeem(ctx context.Context, arg UpdateSAMLFlowRedeemParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, updateSAMLFlowRedeem,
		arg.UpdateTime,
		arg.RedeemTime,
		arg.RedeemResponse,
		arg.Status,
		arg.ID,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const updateSAMLFlowSubjectData = `-- name: UpdateSAMLFlowSubjectData :one
update saml_flows
set email                  = $1,
    subject_idp_attributes = $2
where id = $3
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpdateSAMLFlowSubjectDataParams struct {
	Email                *string
	SubjectIdpAttributes []byte
	ID                   uuid.UUID
}

func (q *Queries) UpdateSAMLFlowSubjectData(ctx context.Context, arg UpdateSAMLFlowSubjectDataParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, updateSAMLFlowSubjectData, arg.Email, arg.SubjectIdpAttributes, arg.ID)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const upsertSAMLFlowInitiate = `-- name: UpsertSAMLFlowInitiate :one
insert into saml_flows (id, saml_connection_id, expire_time, state, create_time, update_time,
                        initiate_request, initiate_time, status, is_oauth)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
on conflict (id) do update set update_time      = excluded.update_time,
                               initiate_request = excluded.initiate_request,
                               initiate_time    = excluded.initiate_time,
                               status           = excluded.status
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpsertSAMLFlowInitiateParams struct {
	ID               uuid.UUID
	SamlConnectionID uuid.UUID
	ExpireTime       time.Time
	State            string
	CreateTime       time.Time
	UpdateTime       time.Time
	InitiateRequest  *string
	InitiateTime     *time.Time
	Status           SamlFlowStatus
	IsOauth          *bool
}

func (q *Queries) UpsertSAMLFlowInitiate(ctx context.Context, arg UpsertSAMLFlowInitiateParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, upsertSAMLFlowInitiate,
		arg.ID,
		arg.SamlConnectionID,
		arg.ExpireTime,
		arg.State,
		arg.CreateTime,
		arg.UpdateTime,
		arg.InitiateRequest,
		arg.InitiateTime,
		arg.Status,
		arg.IsOauth,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const upsertSAMLFlowReceiveAssertion = `-- name: UpsertSAMLFlowReceiveAssertion :one
insert into saml_flows (id, saml_connection_id, access_code_sha256, expire_time, state, create_time, update_time,
                        assertion, receive_assertion_time, error_unsigned_assertion, error_bad_issuer,
                        error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
on conflict (id) do update set access_code_sha256                       = excluded.access_code_sha256,
                               update_time                              = excluded.update_time,
                               assertion                                = excluded.assertion,
                               receive_assertion_time                   = excluded.receive_assertion_time,
                               error_unsigned_assertion                 = excluded.error_unsigned_assertion,
                               error_bad_issuer                         = excluded.error_bad_issuer,
                               error_bad_audience                       = excluded.error_bad_audience,
                               error_bad_subject_id                     = excluded.error_bad_subject_id,
                               error_email_outside_organization_domains = excluded.error_email_outside_organization_domains,
                               status                                   = excluded.status
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpsertSAMLFlowReceiveAssertionParams struct {
	ID                                   uuid.UUID
	SamlConnectionID                     uuid.UUID
	AccessCodeSha256                     []byte
	ExpireTime                           time.Time
	State                                string
	CreateTime                           time.Time
	UpdateTime                           time.Time
	Assertion                            *string
	ReceiveAssertionTime                 *time.Time
	ErrorUnsignedAssertion               bool
	ErrorBadIssuer                       *string
	ErrorBadAudience                     *string
	ErrorBadSubjectID                    *string
	ErrorEmailOutsideOrganizationDomains *string
	Status                               SamlFlowStatus
}

func (q *Queries) UpsertSAMLFlowReceiveAssertion(ctx context.Context, arg UpsertSAMLFlowReceiveAssertionParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, upsertSAMLFlowReceiveAssertion,
		arg.ID,
		arg.SamlConnectionID,
		arg.AccessCodeSha256,
		arg.ExpireTime,
		arg.State,
		arg.CreateTime,
		arg.UpdateTime,
		arg.Assertion,
		arg.ReceiveAssertionTime,
		arg.ErrorUnsignedAssertion,
		arg.ErrorBadIssuer,
		arg.ErrorBadAudience,
		arg.ErrorBadSubjectID,
		arg.ErrorEmailOutsideOrganizationDomains,
		arg.Status,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}
