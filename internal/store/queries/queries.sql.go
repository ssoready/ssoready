// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const adminConvertAdminAccessTokenToSession = `-- name: AdminConvertAdminAccessTokenToSession :one
update admin_access_tokens
set one_time_token_sha256 = null,
    access_token_sha256   = $1
where id = $2
returning id, organization_id, one_time_token_sha256, access_token_sha256, create_time, expire_time, can_manage_saml, can_manage_scim
`

type AdminConvertAdminAccessTokenToSessionParams struct {
	AccessTokenSha256 []byte
	ID                uuid.UUID
}

func (q *Queries) AdminConvertAdminAccessTokenToSession(ctx context.Context, arg AdminConvertAdminAccessTokenToSessionParams) (AdminAccessToken, error) {
	row := q.db.QueryRow(ctx, adminConvertAdminAccessTokenToSession, arg.AccessTokenSha256, arg.ID)
	var i AdminAccessToken
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OneTimeTokenSha256,
		&i.AccessTokenSha256,
		&i.CreateTime,
		&i.ExpireTime,
		&i.CanManageSaml,
		&i.CanManageScim,
	)
	return i, err
}

const adminGetAdminAccessTokenByAccessToken = `-- name: AdminGetAdminAccessTokenByAccessToken :one
select id, organization_id, one_time_token_sha256, access_token_sha256, create_time, expire_time, can_manage_saml, can_manage_scim
from admin_access_tokens
where access_token_sha256 = $1
  and expire_time > $2
`

type AdminGetAdminAccessTokenByAccessTokenParams struct {
	AccessTokenSha256 []byte
	ExpireTime        time.Time
}

func (q *Queries) AdminGetAdminAccessTokenByAccessToken(ctx context.Context, arg AdminGetAdminAccessTokenByAccessTokenParams) (AdminAccessToken, error) {
	row := q.db.QueryRow(ctx, adminGetAdminAccessTokenByAccessToken, arg.AccessTokenSha256, arg.ExpireTime)
	var i AdminAccessToken
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OneTimeTokenSha256,
		&i.AccessTokenSha256,
		&i.CreateTime,
		&i.ExpireTime,
		&i.CanManageSaml,
		&i.CanManageScim,
	)
	return i, err
}

const adminGetAdminAccessTokenByOneTimeToken = `-- name: AdminGetAdminAccessTokenByOneTimeToken :one
select id, organization_id, one_time_token_sha256, access_token_sha256, create_time, expire_time, can_manage_saml, can_manage_scim
from admin_access_tokens
where one_time_token_sha256 = $1
`

func (q *Queries) AdminGetAdminAccessTokenByOneTimeToken(ctx context.Context, oneTimeTokenSha256 []byte) (AdminAccessToken, error) {
	row := q.db.QueryRow(ctx, adminGetAdminAccessTokenByOneTimeToken, oneTimeTokenSha256)
	var i AdminAccessToken
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OneTimeTokenSha256,
		&i.AccessTokenSha256,
		&i.CreateTime,
		&i.ExpireTime,
		&i.CanManageSaml,
		&i.CanManageScim,
	)
	return i, err
}

const adminGetSAMLConnection = `-- name: AdminGetSAMLConnection :one
select id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
from saml_connections
where organization_id = $1
  and id = $2
`

type AdminGetSAMLConnectionParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) AdminGetSAMLConnection(ctx context.Context, arg AdminGetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, adminGetSAMLConnection, arg.OrganizationID, arg.ID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const adminGetSCIMDirectory = `-- name: AdminGetSCIMDirectory :one
select id, organization_id, bearer_token_sha256, is_primary, scim_base_url
from scim_directories
where organization_id = $1
  and id = $2
`

type AdminGetSCIMDirectoryParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) AdminGetSCIMDirectory(ctx context.Context, arg AdminGetSCIMDirectoryParams) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, adminGetSCIMDirectory, arg.OrganizationID, arg.ID)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const appGetSCIMGroup = `-- name: AppGetSCIMGroup :one
select scim_groups.id, scim_groups.scim_directory_id, scim_groups.display_name, scim_groups.deleted, scim_groups.attributes
from scim_groups
         join scim_directories on scim_groups.scim_directory_id = scim_directories.id
         join organizations on scim_directories.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and scim_groups.id = $2
`

type AppGetSCIMGroupParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) AppGetSCIMGroup(ctx context.Context, arg AppGetSCIMGroupParams) (ScimGroup, error) {
	row := q.db.QueryRow(ctx, appGetSCIMGroup, arg.AppOrganizationID, arg.ID)
	var i ScimGroup
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.DisplayName,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const appGetSCIMUser = `-- name: AppGetSCIMUser :one
select scim_users.id, scim_users.scim_directory_id, scim_users.email, scim_users.deleted, scim_users.attributes
from scim_users
         join scim_directories on scim_users.scim_directory_id = scim_directories.id
         join organizations on scim_directories.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and scim_users.id = $2
`

type AppGetSCIMUserParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) AppGetSCIMUser(ctx context.Context, arg AppGetSCIMUserParams) (ScimUser, error) {
	row := q.db.QueryRow(ctx, appGetSCIMUser, arg.AppOrganizationID, arg.ID)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authCheckAssertionAlreadyProcessed = `-- name: AuthCheckAssertionAlreadyProcessed :one
select exists(select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth from saml_flows where id = $1 and access_code_sha256 is not null)
`

func (q *Queries) AuthCheckAssertionAlreadyProcessed(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, authCheckAssertionAlreadyProcessed, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const authClearSCIMGroupMembers = `-- name: AuthClearSCIMGroupMembers :exec
delete
from scim_user_group_memberships
where scim_group_id = $1
`

func (q *Queries) AuthClearSCIMGroupMembers(ctx context.Context, scimGroupID uuid.UUID) error {
	_, err := q.db.Exec(ctx, authClearSCIMGroupMembers, scimGroupID)
	return err
}

const authCountSCIMGroups = `-- name: AuthCountSCIMGroups :one
select count(*)
from scim_groups
where scim_directory_id = $1
  and deleted = false
`

func (q *Queries) AuthCountSCIMGroups(ctx context.Context, scimDirectoryID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, authCountSCIMGroups, scimDirectoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const authCountSCIMUsers = `-- name: AuthCountSCIMUsers :one
select count(*)
from scim_users
where scim_directory_id = $1
  and deleted = false
`

func (q *Queries) AuthCountSCIMUsers(ctx context.Context, scimDirectoryID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, authCountSCIMUsers, scimDirectoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const authCreateSCIMGroup = `-- name: AuthCreateSCIMGroup :one
insert into scim_groups (id, scim_directory_id, display_name, attributes, deleted)
values ($1, $2, $3, $4, $5)
returning id, scim_directory_id, display_name, deleted, attributes
`

type AuthCreateSCIMGroupParams struct {
	ID              uuid.UUID
	ScimDirectoryID uuid.UUID
	DisplayName     string
	Attributes      []byte
	Deleted         bool
}

func (q *Queries) AuthCreateSCIMGroup(ctx context.Context, arg AuthCreateSCIMGroupParams) (ScimGroup, error) {
	row := q.db.QueryRow(ctx, authCreateSCIMGroup,
		arg.ID,
		arg.ScimDirectoryID,
		arg.DisplayName,
		arg.Attributes,
		arg.Deleted,
	)
	var i ScimGroup
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.DisplayName,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authGetInitData = `-- name: AuthGetInitData :one
select idp_redirect_url, sp_entity_id
from saml_connections
where saml_connections.id = $1
`

type AuthGetInitDataRow struct {
	IdpRedirectUrl *string
	SpEntityID     string
}

func (q *Queries) AuthGetInitData(ctx context.Context, id uuid.UUID) (AuthGetInitDataRow, error) {
	row := q.db.QueryRow(ctx, authGetInitData, id)
	var i AuthGetInitDataRow
	err := row.Scan(&i.IdpRedirectUrl, &i.SpEntityID)
	return i, err
}

const authGetSAMLConnectionDomains = `-- name: AuthGetSAMLConnectionDomains :many
select organization_domains.domain
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join organization_domains on organizations.id = organization_domains.organization_id
where saml_connections.id = $1
`

func (q *Queries) AuthGetSAMLConnectionDomains(ctx context.Context, id uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, authGetSAMLConnectionDomains, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authGetSAMLFlow = `-- name: AuthGetSAMLFlow :one
select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
from saml_flows
where id = $1
`

func (q *Queries) AuthGetSAMLFlow(ctx context.Context, id uuid.UUID) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, authGetSAMLFlow, id)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const authGetSAMLOAuthClient = `-- name: AuthGetSAMLOAuthClient :one
select saml_oauth_clients.id, saml_oauth_clients.environment_id, saml_oauth_clients.client_secret_sha256, environments.app_organization_id
from saml_oauth_clients
         join environments on saml_oauth_clients.environment_id = environments.id
where saml_oauth_clients.id = $1
`

type AuthGetSAMLOAuthClientRow struct {
	ID                 uuid.UUID
	EnvironmentID      uuid.UUID
	ClientSecretSha256 []byte
	AppOrganizationID  uuid.UUID
}

func (q *Queries) AuthGetSAMLOAuthClient(ctx context.Context, id uuid.UUID) (AuthGetSAMLOAuthClientRow, error) {
	row := q.db.QueryRow(ctx, authGetSAMLOAuthClient, id)
	var i AuthGetSAMLOAuthClientRow
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.ClientSecretSha256,
		&i.AppOrganizationID,
	)
	return i, err
}

const authGetSAMLOAuthClientWithSecret = `-- name: AuthGetSAMLOAuthClientWithSecret :one
select saml_oauth_clients.id, saml_oauth_clients.environment_id, saml_oauth_clients.client_secret_sha256, environments.app_organization_id
from saml_oauth_clients
         join environments on saml_oauth_clients.environment_id = environments.id
where saml_oauth_clients.id = $1
  and saml_oauth_clients.client_secret_sha256 = $2
`

type AuthGetSAMLOAuthClientWithSecretParams struct {
	ID                 uuid.UUID
	ClientSecretSha256 []byte
}

type AuthGetSAMLOAuthClientWithSecretRow struct {
	ID                 uuid.UUID
	EnvironmentID      uuid.UUID
	ClientSecretSha256 []byte
	AppOrganizationID  uuid.UUID
}

func (q *Queries) AuthGetSAMLOAuthClientWithSecret(ctx context.Context, arg AuthGetSAMLOAuthClientWithSecretParams) (AuthGetSAMLOAuthClientWithSecretRow, error) {
	row := q.db.QueryRow(ctx, authGetSAMLOAuthClientWithSecret, arg.ID, arg.ClientSecretSha256)
	var i AuthGetSAMLOAuthClientWithSecretRow
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.ClientSecretSha256,
		&i.AppOrganizationID,
	)
	return i, err
}

const authGetSCIMDirectory = `-- name: AuthGetSCIMDirectory :one
select id, organization_id, bearer_token_sha256, is_primary, scim_base_url
from scim_directories
where id = $1
`

func (q *Queries) AuthGetSCIMDirectory(ctx context.Context, id uuid.UUID) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, authGetSCIMDirectory, id)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const authGetSCIMDirectoryByIDAndBearerToken = `-- name: AuthGetSCIMDirectoryByIDAndBearerToken :one
select id, organization_id, bearer_token_sha256, is_primary, scim_base_url
from scim_directories
where id = $1
  and bearer_token_sha256 = $2
`

type AuthGetSCIMDirectoryByIDAndBearerTokenParams struct {
	ID                uuid.UUID
	BearerTokenSha256 []byte
}

func (q *Queries) AuthGetSCIMDirectoryByIDAndBearerToken(ctx context.Context, arg AuthGetSCIMDirectoryByIDAndBearerTokenParams) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, authGetSCIMDirectoryByIDAndBearerToken, arg.ID, arg.BearerTokenSha256)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const authGetSCIMDirectoryOrganizationDomains = `-- name: AuthGetSCIMDirectoryOrganizationDomains :many
select organization_domains.domain
from scim_directories
         join organizations on scim_directories.organization_id = organizations.id
         join organization_domains on organizations.id = organization_domains.organization_id
where scim_directories.id = $1
`

func (q *Queries) AuthGetSCIMDirectoryOrganizationDomains(ctx context.Context, id uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, authGetSCIMDirectoryOrganizationDomains, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authGetSCIMGroup = `-- name: AuthGetSCIMGroup :one
select id, scim_directory_id, display_name, deleted, attributes
from scim_groups
where scim_directory_id = $1
  and id = $2
`

type AuthGetSCIMGroupParams struct {
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
}

func (q *Queries) AuthGetSCIMGroup(ctx context.Context, arg AuthGetSCIMGroupParams) (ScimGroup, error) {
	row := q.db.QueryRow(ctx, authGetSCIMGroup, arg.ScimDirectoryID, arg.ID)
	var i ScimGroup
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.DisplayName,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authGetSCIMUser = `-- name: AuthGetSCIMUser :one
select id, scim_directory_id, email, deleted, attributes
from scim_users
where scim_directory_id = $1
  and id = $2
  and deleted = false
`

type AuthGetSCIMUserParams struct {
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
}

func (q *Queries) AuthGetSCIMUser(ctx context.Context, arg AuthGetSCIMUserParams) (ScimUser, error) {
	row := q.db.QueryRow(ctx, authGetSCIMUser, arg.ScimDirectoryID, arg.ID)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authGetSCIMUserByEmail = `-- name: AuthGetSCIMUserByEmail :one
select id, scim_directory_id, email, deleted, attributes
from scim_users
where scim_directory_id = $1
  and email = $2
  and deleted = false
`

type AuthGetSCIMUserByEmailParams struct {
	ScimDirectoryID uuid.UUID
	Email           string
}

func (q *Queries) AuthGetSCIMUserByEmail(ctx context.Context, arg AuthGetSCIMUserByEmailParams) (ScimUser, error) {
	row := q.db.QueryRow(ctx, authGetSCIMUserByEmail, arg.ScimDirectoryID, arg.Email)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authGetSCIMUserIncludeDeleted = `-- name: AuthGetSCIMUserIncludeDeleted :one
select id, scim_directory_id, email, deleted, attributes
from scim_users
where scim_directory_id = $1
  and id = $2
`

type AuthGetSCIMUserIncludeDeletedParams struct {
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
}

func (q *Queries) AuthGetSCIMUserIncludeDeleted(ctx context.Context, arg AuthGetSCIMUserIncludeDeletedParams) (ScimUser, error) {
	row := q.db.QueryRow(ctx, authGetSCIMUserIncludeDeleted, arg.ScimDirectoryID, arg.ID)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authGetValidateData = `-- name: AuthGetValidateData :one
select saml_connections.sp_entity_id,
       saml_connections.idp_entity_id,
       saml_connections.idp_x509_certificate,
       environments.redirect_url,
       environments.oauth_redirect_uri
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where saml_connections.id = $1
`

type AuthGetValidateDataRow struct {
	SpEntityID         string
	IdpEntityID        *string
	IdpX509Certificate []byte
	RedirectUrl        *string
	OauthRedirectUri   *string
}

func (q *Queries) AuthGetValidateData(ctx context.Context, id uuid.UUID) (AuthGetValidateDataRow, error) {
	row := q.db.QueryRow(ctx, authGetValidateData, id)
	var i AuthGetValidateDataRow
	err := row.Scan(
		&i.SpEntityID,
		&i.IdpEntityID,
		&i.IdpX509Certificate,
		&i.RedirectUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const authListSCIMGroups = `-- name: AuthListSCIMGroups :many
select id, scim_directory_id, display_name, deleted, attributes
from scim_groups
where scim_directory_id = $1
  and deleted = false
order by id
offset $2 limit $3
`

type AuthListSCIMGroupsParams struct {
	ScimDirectoryID uuid.UUID
	Offset          int32
	Limit           int32
}

func (q *Queries) AuthListSCIMGroups(ctx context.Context, arg AuthListSCIMGroupsParams) ([]ScimGroup, error) {
	rows, err := q.db.Query(ctx, authListSCIMGroups, arg.ScimDirectoryID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimGroup
	for rows.Next() {
		var i ScimGroup
		if err := rows.Scan(
			&i.ID,
			&i.ScimDirectoryID,
			&i.DisplayName,
			&i.Deleted,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authListSCIMUsers = `-- name: AuthListSCIMUsers :many
select id, scim_directory_id, email, deleted, attributes
from scim_users
where scim_directory_id = $1
  and deleted = false
order by id
offset $2 limit $3
`

type AuthListSCIMUsersParams struct {
	ScimDirectoryID uuid.UUID
	Offset          int32
	Limit           int32
}

func (q *Queries) AuthListSCIMUsers(ctx context.Context, arg AuthListSCIMUsersParams) ([]ScimUser, error) {
	rows, err := q.db.Query(ctx, authListSCIMUsers, arg.ScimDirectoryID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimUser
	for rows.Next() {
		var i ScimUser
		if err := rows.Scan(
			&i.ID,
			&i.ScimDirectoryID,
			&i.Email,
			&i.Deleted,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authMarkSCIMGroupDeleted = `-- name: AuthMarkSCIMGroupDeleted :one
update scim_groups
set deleted = true
where id = $1
returning id, scim_directory_id, display_name, deleted, attributes
`

func (q *Queries) AuthMarkSCIMGroupDeleted(ctx context.Context, id uuid.UUID) (ScimGroup, error) {
	row := q.db.QueryRow(ctx, authMarkSCIMGroupDeleted, id)
	var i ScimGroup
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.DisplayName,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authMarkSCIMUserDeleted = `-- name: AuthMarkSCIMUserDeleted :one
update scim_users
set deleted = true
where id = $1
returning id, scim_directory_id, email, deleted, attributes
`

func (q *Queries) AuthMarkSCIMUserDeleted(ctx context.Context, id uuid.UUID) (ScimUser, error) {
	row := q.db.QueryRow(ctx, authMarkSCIMUserDeleted, id)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authUpdateSCIMGroup = `-- name: AuthUpdateSCIMGroup :one
update scim_groups
set display_name = $1,
    attributes   = $2
where id = $3
returning id, scim_directory_id, display_name, deleted, attributes
`

type AuthUpdateSCIMGroupParams struct {
	DisplayName string
	Attributes  []byte
	ID          uuid.UUID
}

func (q *Queries) AuthUpdateSCIMGroup(ctx context.Context, arg AuthUpdateSCIMGroupParams) (ScimGroup, error) {
	row := q.db.QueryRow(ctx, authUpdateSCIMGroup, arg.DisplayName, arg.Attributes, arg.ID)
	var i ScimGroup
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.DisplayName,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authUpdateSCIMGroupDisplayName = `-- name: AuthUpdateSCIMGroupDisplayName :one
update scim_groups
set display_name = $1
where id = $2
returning id, scim_directory_id, display_name, deleted, attributes
`

type AuthUpdateSCIMGroupDisplayNameParams struct {
	DisplayName string
	ID          uuid.UUID
}

func (q *Queries) AuthUpdateSCIMGroupDisplayName(ctx context.Context, arg AuthUpdateSCIMGroupDisplayNameParams) (ScimGroup, error) {
	row := q.db.QueryRow(ctx, authUpdateSCIMGroupDisplayName, arg.DisplayName, arg.ID)
	var i ScimGroup
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.DisplayName,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authUpdateSCIMUser = `-- name: AuthUpdateSCIMUser :one
update scim_users
set email      = $1,
    attributes = $2,
    deleted    = $5
where scim_directory_id = $3
  and id = $4
returning id, scim_directory_id, email, deleted, attributes
`

type AuthUpdateSCIMUserParams struct {
	Email           string
	Attributes      []byte
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
	Deleted         bool
}

func (q *Queries) AuthUpdateSCIMUser(ctx context.Context, arg AuthUpdateSCIMUserParams) (ScimUser, error) {
	row := q.db.QueryRow(ctx, authUpdateSCIMUser,
		arg.Email,
		arg.Attributes,
		arg.ScimDirectoryID,
		arg.ID,
		arg.Deleted,
	)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authUpsertSCIMUser = `-- name: AuthUpsertSCIMUser :one
insert into scim_users (id, scim_directory_id, email, deleted, attributes)
values ($1, $2, $3, $4, $5)
on conflict (scim_directory_id, email) do update set deleted    = excluded.deleted,
                                                     attributes = excluded.attributes
returning id, scim_directory_id, email, deleted, attributes
`

type AuthUpsertSCIMUserParams struct {
	ID              uuid.UUID
	ScimDirectoryID uuid.UUID
	Email           string
	Deleted         bool
	Attributes      []byte
}

func (q *Queries) AuthUpsertSCIMUser(ctx context.Context, arg AuthUpsertSCIMUserParams) (ScimUser, error) {
	row := q.db.QueryRow(ctx, authUpsertSCIMUser,
		arg.ID,
		arg.ScimDirectoryID,
		arg.Email,
		arg.Deleted,
		arg.Attributes,
	)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const authUpsertSCIMUserGroupMembership = `-- name: AuthUpsertSCIMUserGroupMembership :exec
insert into scim_user_group_memberships (id, scim_directory_id, scim_user_id, scim_group_id)
values ($1, $2, $3, $4)
on conflict (scim_user_id, scim_group_id) do nothing
`

type AuthUpsertSCIMUserGroupMembershipParams struct {
	ID              uuid.UUID
	ScimDirectoryID uuid.UUID
	ScimUserID      uuid.UUID
	ScimGroupID     uuid.UUID
}

func (q *Queries) AuthUpsertSCIMUserGroupMembership(ctx context.Context, arg AuthUpsertSCIMUserGroupMembershipParams) error {
	_, err := q.db.Exec(ctx, authUpsertSCIMUserGroupMembership,
		arg.ID,
		arg.ScimDirectoryID,
		arg.ScimUserID,
		arg.ScimGroupID,
	)
	return err
}

const checkExistsEmailVerificationChallenge = `-- name: CheckExistsEmailVerificationChallenge :one
select exists(select id, email, expire_time, secret_token, complete_time
              from email_verification_challenges
              where email = $1
                and expire_time > $2
                and complete_time is null)
`

type CheckExistsEmailVerificationChallengeParams struct {
	Email      string
	ExpireTime time.Time
}

func (q *Queries) CheckExistsEmailVerificationChallenge(ctx context.Context, arg CheckExistsEmailVerificationChallengeParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkExistsEmailVerificationChallenge, arg.Email, arg.ExpireTime)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAPIKey = `-- name: CreateAPIKey :one
insert into api_keys (id, secret_value, secret_value_sha256, environment_id, has_management_api_access)
values ($1, '', $2, $3, $4)
returning id, secret_value, environment_id, secret_value_sha256, has_management_api_access
`

type CreateAPIKeyParams struct {
	ID                     uuid.UUID
	SecretValueSha256      []byte
	EnvironmentID          uuid.UUID
	HasManagementApiAccess *bool
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.ID,
		arg.SecretValueSha256,
		arg.EnvironmentID,
		arg.HasManagementApiAccess,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.SecretValue,
		&i.EnvironmentID,
		&i.SecretValueSha256,
		&i.HasManagementApiAccess,
	)
	return i, err
}

const createAdminAccessToken = `-- name: CreateAdminAccessToken :one
insert into admin_access_tokens (id, organization_id, one_time_token_sha256, create_time, expire_time, can_manage_saml,
                                 can_manage_scim)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, organization_id, one_time_token_sha256, access_token_sha256, create_time, expire_time, can_manage_saml, can_manage_scim
`

type CreateAdminAccessTokenParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	OneTimeTokenSha256 []byte
	CreateTime         time.Time
	ExpireTime         time.Time
	CanManageSaml      *bool
	CanManageScim      *bool
}

func (q *Queries) CreateAdminAccessToken(ctx context.Context, arg CreateAdminAccessTokenParams) (AdminAccessToken, error) {
	row := q.db.QueryRow(ctx, createAdminAccessToken,
		arg.ID,
		arg.OrganizationID,
		arg.OneTimeTokenSha256,
		arg.CreateTime,
		arg.ExpireTime,
		arg.CanManageSaml,
		arg.CanManageScim,
	)
	var i AdminAccessToken
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OneTimeTokenSha256,
		&i.AccessTokenSha256,
		&i.CreateTime,
		&i.ExpireTime,
		&i.CanManageSaml,
		&i.CanManageScim,
	)
	return i, err
}

const createAppOrganization = `-- name: CreateAppOrganization :one
insert into app_organizations (id, google_hosted_domain, microsoft_tenant_id)
values ($1, $2, $3)
returning id, google_hosted_domain, microsoft_tenant_id, email_logins_disabled, stripe_customer_id, entitled_management_api
`

type CreateAppOrganizationParams struct {
	ID                 uuid.UUID
	GoogleHostedDomain *string
	MicrosoftTenantID  *string
}

func (q *Queries) CreateAppOrganization(ctx context.Context, arg CreateAppOrganizationParams) (AppOrganization, error) {
	row := q.db.QueryRow(ctx, createAppOrganization, arg.ID, arg.GoogleHostedDomain, arg.MicrosoftTenantID)
	var i AppOrganization
	err := row.Scan(
		&i.ID,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.EmailLoginsDisabled,
		&i.StripeCustomerID,
		&i.EntitledManagementApi,
	)
	return i, err
}

const createAppSession = `-- name: CreateAppSession :one
insert into app_sessions (id, app_user_id, create_time, expire_time, token, token_sha256, revoked)
values ($1, $2, $3, $4, '', $5, $6)
returning id, app_user_id, create_time, expire_time, token, token_sha256, revoked
`

type CreateAppSessionParams struct {
	ID          uuid.UUID
	AppUserID   uuid.UUID
	CreateTime  time.Time
	ExpireTime  time.Time
	TokenSha256 []byte
	Revoked     *bool
}

func (q *Queries) CreateAppSession(ctx context.Context, arg CreateAppSessionParams) (AppSession, error) {
	row := q.db.QueryRow(ctx, createAppSession,
		arg.ID,
		arg.AppUserID,
		arg.CreateTime,
		arg.ExpireTime,
		arg.TokenSha256,
		arg.Revoked,
	)
	var i AppSession
	err := row.Scan(
		&i.ID,
		&i.AppUserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const createAppUser = `-- name: CreateAppUser :one
insert into app_users (id, app_organization_id, display_name, email)
values ($1, $2, $3, $4)
returning id, app_organization_id, display_name, email
`

type CreateAppUserParams struct {
	ID                uuid.UUID
	AppOrganizationID uuid.UUID
	DisplayName       string
	Email             string
}

func (q *Queries) CreateAppUser(ctx context.Context, arg CreateAppUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, createAppUser,
		arg.ID,
		arg.AppOrganizationID,
		arg.DisplayName,
		arg.Email,
	)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const createEmailVerificationChallenge = `-- name: CreateEmailVerificationChallenge :one
insert into email_verification_challenges (id, email, expire_time, secret_token)
values ($1, $2, $3, $4)
returning id, email, expire_time, secret_token, complete_time
`

type CreateEmailVerificationChallengeParams struct {
	ID          uuid.UUID
	Email       string
	ExpireTime  time.Time
	SecretToken string
}

func (q *Queries) CreateEmailVerificationChallenge(ctx context.Context, arg CreateEmailVerificationChallengeParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationChallenge,
		arg.ID,
		arg.Email,
		arg.ExpireTime,
		arg.SecretToken,
	)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ExpireTime,
		&i.SecretToken,
		&i.CompleteTime,
	)
	return i, err
}

const createEnvironment = `-- name: CreateEnvironment :one
insert into environments (id, redirect_url, app_organization_id, display_name, auth_url)
values ($1, $2, $3, $4, $5)
returning id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
`

type CreateEnvironmentParams struct {
	ID                uuid.UUID
	RedirectUrl       *string
	AppOrganizationID uuid.UUID
	DisplayName       *string
	AuthUrl           *string
}

func (q *Queries) CreateEnvironment(ctx context.Context, arg CreateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, createEnvironment,
		arg.ID,
		arg.RedirectUrl,
		arg.AppOrganizationID,
		arg.DisplayName,
		arg.AuthUrl,
	)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
insert into organizations (id, environment_id, external_id)
values ($1, $2, $3)
returning id, environment_id, external_id
`

type CreateOrganizationParams struct {
	ID            uuid.UUID
	EnvironmentID uuid.UUID
	ExternalID    *string
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.ID, arg.EnvironmentID, arg.ExternalID)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const createOrganizationDomain = `-- name: CreateOrganizationDomain :one
insert into organization_domains (id, organization_id, domain)
values ($1, $2, $3)
returning id, organization_id, domain
`

type CreateOrganizationDomainParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Domain         string
}

func (q *Queries) CreateOrganizationDomain(ctx context.Context, arg CreateOrganizationDomainParams) (OrganizationDomain, error) {
	row := q.db.QueryRow(ctx, createOrganizationDomain, arg.ID, arg.OrganizationID, arg.Domain)
	var i OrganizationDomain
	err := row.Scan(&i.ID, &i.OrganizationID, &i.Domain)
	return i, err
}

const createSAMLConnection = `-- name: CreateSAMLConnection :one
insert into saml_connections (id, organization_id, sp_entity_id, sp_acs_url, idp_entity_id, idp_redirect_url,
                              idp_x509_certificate,
                              is_primary)
values ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
`

type CreateSAMLConnectionParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	SpEntityID         string
	SpAcsUrl           string
	IdpEntityID        *string
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IsPrimary          bool
}

func (q *Queries) CreateSAMLConnection(ctx context.Context, arg CreateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, createSAMLConnection,
		arg.ID,
		arg.OrganizationID,
		arg.SpEntityID,
		arg.SpAcsUrl,
		arg.IdpEntityID,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IsPrimary,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const createSAMLFlowGetRedirect = `-- name: CreateSAMLFlowGetRedirect :one
insert into saml_flows (id, saml_connection_id, expire_time, state, create_time, update_time,
                        auth_redirect_url, get_redirect_time, status)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type CreateSAMLFlowGetRedirectParams struct {
	ID               uuid.UUID
	SamlConnectionID uuid.UUID
	ExpireTime       time.Time
	State            string
	CreateTime       time.Time
	UpdateTime       time.Time
	AuthRedirectUrl  *string
	GetRedirectTime  *time.Time
	Status           SamlFlowStatus
}

func (q *Queries) CreateSAMLFlowGetRedirect(ctx context.Context, arg CreateSAMLFlowGetRedirectParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, createSAMLFlowGetRedirect,
		arg.ID,
		arg.SamlConnectionID,
		arg.ExpireTime,
		arg.State,
		arg.CreateTime,
		arg.UpdateTime,
		arg.AuthRedirectUrl,
		arg.GetRedirectTime,
		arg.Status,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const createSAMLOAuthClient = `-- name: CreateSAMLOAuthClient :one
insert into saml_oauth_clients (id, environment_id, client_secret_sha256)
values ($1, $2, $3)
returning id, environment_id, client_secret_sha256
`

type CreateSAMLOAuthClientParams struct {
	ID                 uuid.UUID
	EnvironmentID      uuid.UUID
	ClientSecretSha256 []byte
}

func (q *Queries) CreateSAMLOAuthClient(ctx context.Context, arg CreateSAMLOAuthClientParams) (SamlOauthClient, error) {
	row := q.db.QueryRow(ctx, createSAMLOAuthClient, arg.ID, arg.EnvironmentID, arg.ClientSecretSha256)
	var i SamlOauthClient
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ClientSecretSha256)
	return i, err
}

const createSCIMDirectory = `-- name: CreateSCIMDirectory :one
insert into scim_directories (id, organization_id, bearer_token_sha256, is_primary, scim_base_url)
values ($1, $2, $3, $4, $5)
returning id, organization_id, bearer_token_sha256, is_primary, scim_base_url
`

type CreateSCIMDirectoryParams struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	BearerTokenSha256 []byte
	IsPrimary         bool
	ScimBaseUrl       string
}

func (q *Queries) CreateSCIMDirectory(ctx context.Context, arg CreateSCIMDirectoryParams) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, createSCIMDirectory,
		arg.ID,
		arg.OrganizationID,
		arg.BearerTokenSha256,
		arg.IsPrimary,
		arg.ScimBaseUrl,
	)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
delete
from api_keys
where id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, id)
	return err
}

const deleteOrganizationDomains = `-- name: DeleteOrganizationDomains :exec
delete
from organization_domains
where organization_id = $1
`

func (q *Queries) DeleteOrganizationDomains(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganizationDomains, organizationID)
	return err
}

const deleteSAMLOAuthClient = `-- name: DeleteSAMLOAuthClient :exec
delete
from saml_oauth_clients
where id = $1
`

func (q *Queries) DeleteSAMLOAuthClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSAMLOAuthClient, id)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
select api_keys.id, api_keys.secret_value, api_keys.environment_id, api_keys.secret_value_sha256, api_keys.has_management_api_access
from api_keys
         join environments on api_keys.environment_id = environments.id
where environments.app_organization_id = $1
  and api_keys.id = $2
`

type GetAPIKeyParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetAPIKey(ctx context.Context, arg GetAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, arg.AppOrganizationID, arg.ID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.SecretValue,
		&i.EnvironmentID,
		&i.SecretValueSha256,
		&i.HasManagementApiAccess,
	)
	return i, err
}

const getAPIKeyBySecretValueSHA256 = `-- name: GetAPIKeyBySecretValueSHA256 :one
select api_keys.id, api_keys.secret_value, api_keys.environment_id, api_keys.secret_value_sha256, api_keys.has_management_api_access, environments.app_organization_id
from api_keys
         join environments on api_keys.environment_id = environments.id
where secret_value_sha256 = $1
`

type GetAPIKeyBySecretValueSHA256Row struct {
	ID                     uuid.UUID
	SecretValue            string
	EnvironmentID          uuid.UUID
	SecretValueSha256      []byte
	HasManagementApiAccess *bool
	AppOrganizationID      uuid.UUID
}

func (q *Queries) GetAPIKeyBySecretValueSHA256(ctx context.Context, secretValueSha256 []byte) (GetAPIKeyBySecretValueSHA256Row, error) {
	row := q.db.QueryRow(ctx, getAPIKeyBySecretValueSHA256, secretValueSha256)
	var i GetAPIKeyBySecretValueSHA256Row
	err := row.Scan(
		&i.ID,
		&i.SecretValue,
		&i.EnvironmentID,
		&i.SecretValueSha256,
		&i.HasManagementApiAccess,
		&i.AppOrganizationID,
	)
	return i, err
}

const getAppOrganizationByGoogleHostedDomain = `-- name: GetAppOrganizationByGoogleHostedDomain :one
select id, google_hosted_domain, microsoft_tenant_id, email_logins_disabled, stripe_customer_id, entitled_management_api
from app_organizations
where google_hosted_domain = $1
`

func (q *Queries) GetAppOrganizationByGoogleHostedDomain(ctx context.Context, googleHostedDomain *string) (AppOrganization, error) {
	row := q.db.QueryRow(ctx, getAppOrganizationByGoogleHostedDomain, googleHostedDomain)
	var i AppOrganization
	err := row.Scan(
		&i.ID,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.EmailLoginsDisabled,
		&i.StripeCustomerID,
		&i.EntitledManagementApi,
	)
	return i, err
}

const getAppOrganizationByID = `-- name: GetAppOrganizationByID :one
select id, google_hosted_domain, microsoft_tenant_id, email_logins_disabled, stripe_customer_id, entitled_management_api
from app_organizations
where id = $1
`

func (q *Queries) GetAppOrganizationByID(ctx context.Context, id uuid.UUID) (AppOrganization, error) {
	row := q.db.QueryRow(ctx, getAppOrganizationByID, id)
	var i AppOrganization
	err := row.Scan(
		&i.ID,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.EmailLoginsDisabled,
		&i.StripeCustomerID,
		&i.EntitledManagementApi,
	)
	return i, err
}

const getAppOrganizationByMicrosoftTenantID = `-- name: GetAppOrganizationByMicrosoftTenantID :one
select id, google_hosted_domain, microsoft_tenant_id, email_logins_disabled, stripe_customer_id, entitled_management_api
from app_organizations
where microsoft_tenant_id = $1
`

func (q *Queries) GetAppOrganizationByMicrosoftTenantID(ctx context.Context, microsoftTenantID *string) (AppOrganization, error) {
	row := q.db.QueryRow(ctx, getAppOrganizationByMicrosoftTenantID, microsoftTenantID)
	var i AppOrganization
	err := row.Scan(
		&i.ID,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.EmailLoginsDisabled,
		&i.StripeCustomerID,
		&i.EntitledManagementApi,
	)
	return i, err
}

const getAppSessionByTokenSHA256 = `-- name: GetAppSessionByTokenSHA256 :one
select app_sessions.id,
       app_sessions.app_user_id,
       app_users.display_name,
       app_users.email,
       app_users.app_organization_id
from app_sessions
         join app_users on app_sessions.app_user_id = app_users.id
where token_sha256 = $1
  and expire_time > $2
  and revoked = false
`

type GetAppSessionByTokenSHA256Params struct {
	TokenSha256 []byte
	ExpireTime  time.Time
}

type GetAppSessionByTokenSHA256Row struct {
	ID                uuid.UUID
	AppUserID         uuid.UUID
	DisplayName       string
	Email             string
	AppOrganizationID uuid.UUID
}

func (q *Queries) GetAppSessionByTokenSHA256(ctx context.Context, arg GetAppSessionByTokenSHA256Params) (GetAppSessionByTokenSHA256Row, error) {
	row := q.db.QueryRow(ctx, getAppSessionByTokenSHA256, arg.TokenSha256, arg.ExpireTime)
	var i GetAppSessionByTokenSHA256Row
	err := row.Scan(
		&i.ID,
		&i.AppUserID,
		&i.DisplayName,
		&i.Email,
		&i.AppOrganizationID,
	)
	return i, err
}

const getAppUserByEmail = `-- name: GetAppUserByEmail :one
select id, app_organization_id, display_name, email
from app_users
where email = $1
`

func (q *Queries) GetAppUserByEmail(ctx context.Context, email string) (AppUser, error) {
	row := q.db.QueryRow(ctx, getAppUserByEmail, email)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getAppUserByID = `-- name: GetAppUserByID :one
select id, app_organization_id, display_name, email
from app_users
where app_organization_id = $1
  and id = $2
`

type GetAppUserByIDParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetAppUserByID(ctx context.Context, arg GetAppUserByIDParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, getAppUserByID, arg.AppOrganizationID, arg.ID)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getEmailVerificationChallengeBySecretToken = `-- name: GetEmailVerificationChallengeBySecretToken :one
select id, email, expire_time, secret_token, complete_time
from email_verification_challenges
where secret_token = $1
  and expire_time > $2
`

type GetEmailVerificationChallengeBySecretTokenParams struct {
	SecretToken string
	ExpireTime  time.Time
}

func (q *Queries) GetEmailVerificationChallengeBySecretToken(ctx context.Context, arg GetEmailVerificationChallengeBySecretTokenParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationChallengeBySecretToken, arg.SecretToken, arg.ExpireTime)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ExpireTime,
		&i.SecretToken,
		&i.CompleteTime,
	)
	return i, err
}

const getEnvironment = `-- name: GetEnvironment :one
select id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
from environments
where app_organization_id = $1
  and id = $2
`

type GetEnvironmentParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetEnvironment(ctx context.Context, arg GetEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, getEnvironment, arg.AppOrganizationID, arg.ID)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const getEnvironmentByID = `-- name: GetEnvironmentByID :one
select id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
from environments
where id = $1
`

func (q *Queries) GetEnvironmentByID(ctx context.Context, id uuid.UUID) (Environment, error) {
	row := q.db.QueryRow(ctx, getEnvironmentByID, id)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const getOnboardingState = `-- name: GetOnboardingState :one
select app_organization_id, dummyidp_app_id, onboarding_environment_id, onboarding_organization_id, onboarding_saml_connection_id
from onboarding_states
where app_organization_id = $1
`

func (q *Queries) GetOnboardingState(ctx context.Context, appOrganizationID uuid.UUID) (OnboardingState, error) {
	row := q.db.QueryRow(ctx, getOnboardingState, appOrganizationID)
	var i OnboardingState
	err := row.Scan(
		&i.AppOrganizationID,
		&i.DummyidpAppID,
		&i.OnboardingEnvironmentID,
		&i.OnboardingOrganizationID,
		&i.OnboardingSamlConnectionID,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
select organizations.id, organizations.environment_id, organizations.external_id
from organizations
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and organizations.id = $2
`

type GetOrganizationParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetOrganization(ctx context.Context, arg GetOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, arg.AppOrganizationID, arg.ID)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
select id, environment_id, external_id
from organizations
where id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const getPrimarySAMLConnectionIDByOrganizationExternalID = `-- name: GetPrimarySAMLConnectionIDByOrganizationExternalID :one
select saml_connections.id
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
where organizations.environment_id = $1
  and organizations.external_id = $2
  and saml_connections.is_primary = true
`

type GetPrimarySAMLConnectionIDByOrganizationExternalIDParams struct {
	EnvironmentID uuid.UUID
	ExternalID    *string
}

func (q *Queries) GetPrimarySAMLConnectionIDByOrganizationExternalID(ctx context.Context, arg GetPrimarySAMLConnectionIDByOrganizationExternalIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPrimarySAMLConnectionIDByOrganizationExternalID, arg.EnvironmentID, arg.ExternalID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPrimarySAMLConnectionIDByOrganizationID = `-- name: GetPrimarySAMLConnectionIDByOrganizationID :one
select saml_connections.id
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
where organizations.environment_id = $1
  and organizations.id = $2
  and saml_connections.is_primary = true
`

type GetPrimarySAMLConnectionIDByOrganizationIDParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) GetPrimarySAMLConnectionIDByOrganizationID(ctx context.Context, arg GetPrimarySAMLConnectionIDByOrganizationIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPrimarySAMLConnectionIDByOrganizationID, arg.EnvironmentID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPrimarySCIMDirectoryIDByOrganizationExternalID = `-- name: GetPrimarySCIMDirectoryIDByOrganizationExternalID :one
select scim_directories.id
from scim_directories
         join organizations on scim_directories.organization_id = organizations.id
where organizations.environment_id = $1
  and organizations.external_id = $2
  and scim_directories.is_primary = true
`

type GetPrimarySCIMDirectoryIDByOrganizationExternalIDParams struct {
	EnvironmentID uuid.UUID
	ExternalID    *string
}

func (q *Queries) GetPrimarySCIMDirectoryIDByOrganizationExternalID(ctx context.Context, arg GetPrimarySCIMDirectoryIDByOrganizationExternalIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPrimarySCIMDirectoryIDByOrganizationExternalID, arg.EnvironmentID, arg.ExternalID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPrimarySCIMDirectoryIDByOrganizationID = `-- name: GetPrimarySCIMDirectoryIDByOrganizationID :one
select scim_directories.id
from scim_directories
         join organizations on scim_directories.organization_id = organizations.id
where organizations.environment_id = $1
  and organizations.id = $2
  and scim_directories.is_primary = true
`

type GetPrimarySCIMDirectoryIDByOrganizationIDParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) GetPrimarySCIMDirectoryIDByOrganizationID(ctx context.Context, arg GetPrimarySCIMDirectoryIDByOrganizationIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPrimarySCIMDirectoryIDByOrganizationID, arg.EnvironmentID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getSAMLAccessCodeData = `-- name: GetSAMLAccessCodeData :one
select saml_flows.id             as saml_flow_id,
       saml_flows.email,
       saml_flows.subject_idp_attributes,
       saml_flows.state,
       organizations.id          as organization_id,
       organizations.external_id as organization_external_id,
       environments.id           as environment_id
from saml_flows
         join saml_connections on saml_flows.saml_connection_id = saml_connections.id
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and environments.id = $3
  and saml_flows.access_code_sha256 = $2
`

type GetSAMLAccessCodeDataParams struct {
	AppOrganizationID uuid.UUID
	AccessCodeSha256  []byte
	EnvironmentID     uuid.UUID
}

type GetSAMLAccessCodeDataRow struct {
	SamlFlowID             uuid.UUID
	Email                  *string
	SubjectIdpAttributes   []byte
	State                  string
	OrganizationID         uuid.UUID
	OrganizationExternalID *string
	EnvironmentID          uuid.UUID
}

func (q *Queries) GetSAMLAccessCodeData(ctx context.Context, arg GetSAMLAccessCodeDataParams) (GetSAMLAccessCodeDataRow, error) {
	row := q.db.QueryRow(ctx, getSAMLAccessCodeData, arg.AppOrganizationID, arg.AccessCodeSha256, arg.EnvironmentID)
	var i GetSAMLAccessCodeDataRow
	err := row.Scan(
		&i.SamlFlowID,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.State,
		&i.OrganizationID,
		&i.OrganizationExternalID,
		&i.EnvironmentID,
	)
	return i, err
}

const getSAMLConnection = `-- name: GetSAMLConnection :one
select saml_connections.id, saml_connections.organization_id, saml_connections.idp_redirect_url, saml_connections.idp_x509_certificate, saml_connections.idp_entity_id, saml_connections.sp_entity_id, saml_connections.is_primary, saml_connections.sp_acs_url
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and saml_connections.id = $2
`

type GetSAMLConnectionParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetSAMLConnection(ctx context.Context, arg GetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnection, arg.AppOrganizationID, arg.ID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const getSAMLConnectionByID = `-- name: GetSAMLConnectionByID :one
select id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
from saml_connections
where id = $1
`

func (q *Queries) GetSAMLConnectionByID(ctx context.Context, id uuid.UUID) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnectionByID, id)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const getSAMLFlow = `-- name: GetSAMLFlow :one
select saml_flows.id, saml_flows.saml_connection_id, saml_flows.access_code, saml_flows.state, saml_flows.create_time, saml_flows.expire_time, saml_flows.email, saml_flows.subject_idp_attributes, saml_flows.update_time, saml_flows.auth_redirect_url, saml_flows.get_redirect_time, saml_flows.initiate_request, saml_flows.initiate_time, saml_flows.assertion, saml_flows.app_redirect_url, saml_flows.receive_assertion_time, saml_flows.redeem_time, saml_flows.redeem_response, saml_flows.error_bad_issuer, saml_flows.error_bad_audience, saml_flows.error_bad_subject_id, saml_flows.error_email_outside_organization_domains, saml_flows.status, saml_flows.error_unsigned_assertion, saml_flows.access_code_sha256, saml_flows.is_oauth
from saml_flows
         join saml_connections on saml_flows.saml_connection_id = saml_connections.id
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and saml_flows.id = $2
`

type GetSAMLFlowParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetSAMLFlow(ctx context.Context, arg GetSAMLFlowParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, getSAMLFlow, arg.AppOrganizationID, arg.ID)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const getSAMLOAuthClient = `-- name: GetSAMLOAuthClient :one
select saml_oauth_clients.id, saml_oauth_clients.environment_id, saml_oauth_clients.client_secret_sha256
from saml_oauth_clients
         join environments on saml_oauth_clients.environment_id = environments.id
where environments.app_organization_id = $1
  and saml_oauth_clients.id = $2
`

type GetSAMLOAuthClientParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetSAMLOAuthClient(ctx context.Context, arg GetSAMLOAuthClientParams) (SamlOauthClient, error) {
	row := q.db.QueryRow(ctx, getSAMLOAuthClient, arg.AppOrganizationID, arg.ID)
	var i SamlOauthClient
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ClientSecretSha256)
	return i, err
}

const getSAMLRedirectURLData = `-- name: GetSAMLRedirectURLData :one
select environments.auth_url
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and environments.id = $2
  and saml_connections.id = $3
`

type GetSAMLRedirectURLDataParams struct {
	AppOrganizationID uuid.UUID
	EnvironmentID     uuid.UUID
	SamlConnectionID  uuid.UUID
}

func (q *Queries) GetSAMLRedirectURLData(ctx context.Context, arg GetSAMLRedirectURLDataParams) (*string, error) {
	row := q.db.QueryRow(ctx, getSAMLRedirectURLData, arg.AppOrganizationID, arg.EnvironmentID, arg.SamlConnectionID)
	var auth_url *string
	err := row.Scan(&auth_url)
	return auth_url, err
}

const getSCIMDirectory = `-- name: GetSCIMDirectory :one
select scim_directories.id, scim_directories.organization_id, scim_directories.bearer_token_sha256, scim_directories.is_primary, scim_directories.scim_base_url
from scim_directories
         join organizations on scim_directories.organization_id = organizations.id
         join environments on organizations.environment_id = environments.id
where environments.app_organization_id = $1
  and scim_directories.id = $2
`

type GetSCIMDirectoryParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
}

func (q *Queries) GetSCIMDirectory(ctx context.Context, arg GetSCIMDirectoryParams) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, getSCIMDirectory, arg.AppOrganizationID, arg.ID)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const getSCIMDirectoryByID = `-- name: GetSCIMDirectoryByID :one
select id, organization_id, bearer_token_sha256, is_primary, scim_base_url
from scim_directories
where id = $1
`

func (q *Queries) GetSCIMDirectoryByID(ctx context.Context, id uuid.UUID) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, getSCIMDirectoryByID, id)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const getSCIMDirectoryByIDAndEnvironmentID = `-- name: GetSCIMDirectoryByIDAndEnvironmentID :one
select scim_directories.id
from scim_directories
         join organizations on scim_directories.organization_id = organizations.id
where organizations.environment_id = $1
  and scim_directories.id = $2
`

type GetSCIMDirectoryByIDAndEnvironmentIDParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) GetSCIMDirectoryByIDAndEnvironmentID(ctx context.Context, arg GetSCIMDirectoryByIDAndEnvironmentIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getSCIMDirectoryByIDAndEnvironmentID, arg.EnvironmentID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getSCIMGroup = `-- name: GetSCIMGroup :one
select scim_groups.id, scim_groups.scim_directory_id, scim_groups.display_name, scim_groups.deleted, scim_groups.attributes
from scim_groups
         join scim_directories on scim_groups.scim_directory_id = scim_directories.id
         join organizations on scim_directories.organization_id = organizations.id
where organizations.environment_id = $1
  and scim_groups.id = $2
`

type GetSCIMGroupParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) GetSCIMGroup(ctx context.Context, arg GetSCIMGroupParams) (ScimGroup, error) {
	row := q.db.QueryRow(ctx, getSCIMGroup, arg.EnvironmentID, arg.ID)
	var i ScimGroup
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.DisplayName,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const getSCIMUser = `-- name: GetSCIMUser :one
select scim_users.id, scim_users.scim_directory_id, scim_users.email, scim_users.deleted, scim_users.attributes
from scim_users
         join scim_directories on scim_users.scim_directory_id = scim_directories.id
         join organizations on scim_directories.organization_id = organizations.id
where organizations.environment_id = $1
  and scim_users.id = $2
`

type GetSCIMUserParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) GetSCIMUser(ctx context.Context, arg GetSCIMUserParams) (ScimUser, error) {
	row := q.db.QueryRow(ctx, getSCIMUser, arg.EnvironmentID, arg.ID)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ScimDirectoryID,
		&i.Email,
		&i.Deleted,
		&i.Attributes,
	)
	return i, err
}

const listAPIKeys = `-- name: ListAPIKeys :many
select id, secret_value, environment_id, secret_value_sha256, has_management_api_access
from api_keys
where environment_id = $1
  and id > $2
order by id
limit $3
`

type ListAPIKeysParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
	Limit         int32
}

func (q *Queries) ListAPIKeys(ctx context.Context, arg ListAPIKeysParams) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeys, arg.EnvironmentID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.SecretValue,
			&i.EnvironmentID,
			&i.SecretValueSha256,
			&i.HasManagementApiAccess,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppUsers = `-- name: ListAppUsers :many
select id, display_name, email
from app_users
where app_organization_id = $1
`

type ListAppUsersRow struct {
	ID          uuid.UUID
	DisplayName string
	Email       string
}

func (q *Queries) ListAppUsers(ctx context.Context, appOrganizationID uuid.UUID) ([]ListAppUsersRow, error) {
	rows, err := q.db.Query(ctx, listAppUsers, appOrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAppUsersRow
	for rows.Next() {
		var i ListAppUsersRow
		if err := rows.Scan(&i.ID, &i.DisplayName, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEnvironments = `-- name: ListEnvironments :many
select id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
from environments
where app_organization_id = $1
  and id > $2
order by id
limit $3
`

type ListEnvironmentsParams struct {
	AppOrganizationID uuid.UUID
	ID                uuid.UUID
	Limit             int32
}

func (q *Queries) ListEnvironments(ctx context.Context, arg ListEnvironmentsParams) ([]Environment, error) {
	rows, err := q.db.Query(ctx, listEnvironments, arg.AppOrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.ID,
			&i.RedirectUrl,
			&i.AppOrganizationID,
			&i.DisplayName,
			&i.AuthUrl,
			&i.OauthRedirectUri,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationDomains = `-- name: ListOrganizationDomains :many
select id, organization_id, domain
from organization_domains
where organization_id = any ($1::uuid[])
`

func (q *Queries) ListOrganizationDomains(ctx context.Context, dollar_1 []uuid.UUID) ([]OrganizationDomain, error) {
	rows, err := q.db.Query(ctx, listOrganizationDomains, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationDomain
	for rows.Next() {
		var i OrganizationDomain
		if err := rows.Scan(&i.ID, &i.OrganizationID, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizations = `-- name: ListOrganizations :many
select id, environment_id, external_id
from organizations
where environment_id = $1
  and id >= $2
order by id
limit $3
`

type ListOrganizationsParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
	Limit         int32
}

func (q *Queries) ListOrganizations(ctx context.Context, arg ListOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations, arg.EnvironmentID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLConnections = `-- name: ListSAMLConnections :many
select id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
from saml_connections
where organization_id = $1
  and id >= $2
order by id
limit $3
`

type ListSAMLConnectionsParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSAMLConnections(ctx context.Context, arg ListSAMLConnectionsParams) ([]SamlConnection, error) {
	rows, err := q.db.Query(ctx, listSAMLConnections, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlConnection
	for rows.Next() {
		var i SamlConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.IdpRedirectUrl,
			&i.IdpX509Certificate,
			&i.IdpEntityID,
			&i.SpEntityID,
			&i.IsPrimary,
			&i.SpAcsUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLFlowsFirstPage = `-- name: ListSAMLFlowsFirstPage :many
select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
from saml_flows
where saml_connection_id = $1
order by (create_time, id) desc
limit $2
`

type ListSAMLFlowsFirstPageParams struct {
	SamlConnectionID uuid.UUID
	Limit            int32
}

func (q *Queries) ListSAMLFlowsFirstPage(ctx context.Context, arg ListSAMLFlowsFirstPageParams) ([]SamlFlow, error) {
	rows, err := q.db.Query(ctx, listSAMLFlowsFirstPage, arg.SamlConnectionID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlFlow
	for rows.Next() {
		var i SamlFlow
		if err := rows.Scan(
			&i.ID,
			&i.SamlConnectionID,
			&i.AccessCode,
			&i.State,
			&i.CreateTime,
			&i.ExpireTime,
			&i.Email,
			&i.SubjectIdpAttributes,
			&i.UpdateTime,
			&i.AuthRedirectUrl,
			&i.GetRedirectTime,
			&i.InitiateRequest,
			&i.InitiateTime,
			&i.Assertion,
			&i.AppRedirectUrl,
			&i.ReceiveAssertionTime,
			&i.RedeemTime,
			&i.RedeemResponse,
			&i.ErrorBadIssuer,
			&i.ErrorBadAudience,
			&i.ErrorBadSubjectID,
			&i.ErrorEmailOutsideOrganizationDomains,
			&i.Status,
			&i.ErrorUnsignedAssertion,
			&i.AccessCodeSha256,
			&i.IsOauth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLFlowsNextPage = `-- name: ListSAMLFlowsNextPage :many
select id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
from saml_flows
where saml_connection_id = $1
  and (create_time, id) <= ($3, $4::uuid)
order by (create_time, id) desc
limit $2
`

type ListSAMLFlowsNextPageParams struct {
	SamlConnectionID uuid.UUID
	Limit            int32
	CreateTime       time.Time
	ID               uuid.UUID
}

func (q *Queries) ListSAMLFlowsNextPage(ctx context.Context, arg ListSAMLFlowsNextPageParams) ([]SamlFlow, error) {
	rows, err := q.db.Query(ctx, listSAMLFlowsNextPage,
		arg.SamlConnectionID,
		arg.Limit,
		arg.CreateTime,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlFlow
	for rows.Next() {
		var i SamlFlow
		if err := rows.Scan(
			&i.ID,
			&i.SamlConnectionID,
			&i.AccessCode,
			&i.State,
			&i.CreateTime,
			&i.ExpireTime,
			&i.Email,
			&i.SubjectIdpAttributes,
			&i.UpdateTime,
			&i.AuthRedirectUrl,
			&i.GetRedirectTime,
			&i.InitiateRequest,
			&i.InitiateTime,
			&i.Assertion,
			&i.AppRedirectUrl,
			&i.ReceiveAssertionTime,
			&i.RedeemTime,
			&i.RedeemResponse,
			&i.ErrorBadIssuer,
			&i.ErrorBadAudience,
			&i.ErrorBadSubjectID,
			&i.ErrorEmailOutsideOrganizationDomains,
			&i.Status,
			&i.ErrorUnsignedAssertion,
			&i.AccessCodeSha256,
			&i.IsOauth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLOAuthClients = `-- name: ListSAMLOAuthClients :many
select id, environment_id, client_secret_sha256
from saml_oauth_clients
where environment_id = $1
  and id > $2
order by id
limit $3
`

type ListSAMLOAuthClientsParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
	Limit         int32
}

func (q *Queries) ListSAMLOAuthClients(ctx context.Context, arg ListSAMLOAuthClientsParams) ([]SamlOauthClient, error) {
	rows, err := q.db.Query(ctx, listSAMLOAuthClients, arg.EnvironmentID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlOauthClient
	for rows.Next() {
		var i SamlOauthClient
		if err := rows.Scan(&i.ID, &i.EnvironmentID, &i.ClientSecretSha256); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMDirectories = `-- name: ListSCIMDirectories :many
select id, organization_id, bearer_token_sha256, is_primary, scim_base_url
from scim_directories
where organization_id = $1
  and id >= $2
order by id
limit $3
`

type ListSCIMDirectoriesParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSCIMDirectories(ctx context.Context, arg ListSCIMDirectoriesParams) ([]ScimDirectory, error) {
	rows, err := q.db.Query(ctx, listSCIMDirectories, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimDirectory
	for rows.Next() {
		var i ScimDirectory
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.BearerTokenSha256,
			&i.IsPrimary,
			&i.ScimBaseUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMGroups = `-- name: ListSCIMGroups :many
select id, scim_directory_id, display_name, deleted, attributes
from scim_groups
where scim_directory_id = $1
  and id >= $2
order by id
limit $3
`

type ListSCIMGroupsParams struct {
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
	Limit           int32
}

func (q *Queries) ListSCIMGroups(ctx context.Context, arg ListSCIMGroupsParams) ([]ScimGroup, error) {
	rows, err := q.db.Query(ctx, listSCIMGroups, arg.ScimDirectoryID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimGroup
	for rows.Next() {
		var i ScimGroup
		if err := rows.Scan(
			&i.ID,
			&i.ScimDirectoryID,
			&i.DisplayName,
			&i.Deleted,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMGroupsBySCIMUserID = `-- name: ListSCIMGroupsBySCIMUserID :many
select id, scim_directory_id, display_name, deleted, attributes
from scim_groups
where scim_groups.scim_directory_id = $1
  and scim_groups.id >= $2
  and exists(select id, scim_directory_id, scim_user_id, scim_group_id
             from scim_user_group_memberships
             where scim_user_group_memberships.scim_user_id = $3
               and scim_user_group_memberships.scim_group_id = scim_groups.id)
order by scim_groups.id
limit $4
`

type ListSCIMGroupsBySCIMUserIDParams struct {
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
	ScimUserID      uuid.UUID
	Limit           int32
}

func (q *Queries) ListSCIMGroupsBySCIMUserID(ctx context.Context, arg ListSCIMGroupsBySCIMUserIDParams) ([]ScimGroup, error) {
	rows, err := q.db.Query(ctx, listSCIMGroupsBySCIMUserID,
		arg.ScimDirectoryID,
		arg.ID,
		arg.ScimUserID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimGroup
	for rows.Next() {
		var i ScimGroup
		if err := rows.Scan(
			&i.ID,
			&i.ScimDirectoryID,
			&i.DisplayName,
			&i.Deleted,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMUsers = `-- name: ListSCIMUsers :many
select id, scim_directory_id, email, deleted, attributes
from scim_users
where scim_directory_id = $1
  and id >= $2
order by id
limit $3
`

type ListSCIMUsersParams struct {
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
	Limit           int32
}

func (q *Queries) ListSCIMUsers(ctx context.Context, arg ListSCIMUsersParams) ([]ScimUser, error) {
	rows, err := q.db.Query(ctx, listSCIMUsers, arg.ScimDirectoryID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimUser
	for rows.Next() {
		var i ScimUser
		if err := rows.Scan(
			&i.ID,
			&i.ScimDirectoryID,
			&i.Email,
			&i.Deleted,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMUsersInSCIMGroup = `-- name: ListSCIMUsersInSCIMGroup :many
select id, scim_directory_id, email, deleted, attributes
from scim_users
where scim_users.scim_directory_id = $1
  and scim_users.id >= $2
  and exists(select id, scim_directory_id, scim_user_id, scim_group_id from scim_user_group_memberships where scim_group_id = $4 and scim_user_id = scim_users.id)
order by scim_users.id
limit $3
`

type ListSCIMUsersInSCIMGroupParams struct {
	ScimDirectoryID uuid.UUID
	ID              uuid.UUID
	Limit           int32
	ScimGroupID     uuid.UUID
}

func (q *Queries) ListSCIMUsersInSCIMGroup(ctx context.Context, arg ListSCIMUsersInSCIMGroupParams) ([]ScimUser, error) {
	rows, err := q.db.Query(ctx, listSCIMUsersInSCIMGroup,
		arg.ScimDirectoryID,
		arg.ID,
		arg.Limit,
		arg.ScimGroupID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimUser
	for rows.Next() {
		var i ScimUser
		if err := rows.Scan(
			&i.ID,
			&i.ScimDirectoryID,
			&i.Email,
			&i.Deleted,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const managementGetOrganization = `-- name: ManagementGetOrganization :one
select id, environment_id, external_id
from organizations
where environment_id = $1
  and id = $2
`

type ManagementGetOrganizationParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) ManagementGetOrganization(ctx context.Context, arg ManagementGetOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, managementGetOrganization, arg.EnvironmentID, arg.ID)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const managementGetSAMLConnection = `-- name: ManagementGetSAMLConnection :one
select saml_connections.id, saml_connections.organization_id, saml_connections.idp_redirect_url, saml_connections.idp_x509_certificate, saml_connections.idp_entity_id, saml_connections.sp_entity_id, saml_connections.is_primary, saml_connections.sp_acs_url
from saml_connections
         join organizations on saml_connections.organization_id = organizations.id
where organizations.environment_id = $1
  and saml_connections.id = $2
`

type ManagementGetSAMLConnectionParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) ManagementGetSAMLConnection(ctx context.Context, arg ManagementGetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, managementGetSAMLConnection, arg.EnvironmentID, arg.ID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const managementGetSCIMDirectory = `-- name: ManagementGetSCIMDirectory :one
select scim_directories.id, scim_directories.organization_id, scim_directories.bearer_token_sha256, scim_directories.is_primary, scim_directories.scim_base_url
from scim_directories
         join organizations on scim_directories.organization_id = organizations.id
where organizations.environment_id = $1
  and scim_directories.id = $2
`

type ManagementGetSCIMDirectoryParams struct {
	EnvironmentID uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) ManagementGetSCIMDirectory(ctx context.Context, arg ManagementGetSCIMDirectoryParams) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, managementGetSCIMDirectory, arg.EnvironmentID, arg.ID)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const revokeAppSessionByID = `-- name: RevokeAppSessionByID :one
update app_sessions
set revoked = true
where id = $1
returning id, app_user_id, create_time, expire_time, token, token_sha256, revoked
`

func (q *Queries) RevokeAppSessionByID(ctx context.Context, id uuid.UUID) (AppSession, error) {
	row := q.db.QueryRow(ctx, revokeAppSessionByID, id)
	var i AppSession
	err := row.Scan(
		&i.ID,
		&i.AppUserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const updateAppOrganizationEntitlementsByStripeCustomerID = `-- name: UpdateAppOrganizationEntitlementsByStripeCustomerID :one
update app_organizations
set entitled_management_api = $1
where stripe_customer_id = $2
returning id, google_hosted_domain, microsoft_tenant_id, email_logins_disabled, stripe_customer_id, entitled_management_api
`

type UpdateAppOrganizationEntitlementsByStripeCustomerIDParams struct {
	EntitledManagementApi *bool
	StripeCustomerID      *string
}

func (q *Queries) UpdateAppOrganizationEntitlementsByStripeCustomerID(ctx context.Context, arg UpdateAppOrganizationEntitlementsByStripeCustomerIDParams) (AppOrganization, error) {
	row := q.db.QueryRow(ctx, updateAppOrganizationEntitlementsByStripeCustomerID, arg.EntitledManagementApi, arg.StripeCustomerID)
	var i AppOrganization
	err := row.Scan(
		&i.ID,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.EmailLoginsDisabled,
		&i.StripeCustomerID,
		&i.EntitledManagementApi,
	)
	return i, err
}

const updateAppOrganizationStripeCustomerID = `-- name: UpdateAppOrganizationStripeCustomerID :exec
update app_organizations
set stripe_customer_id = $1
where id = $2
`

type UpdateAppOrganizationStripeCustomerIDParams struct {
	StripeCustomerID *string
	ID               uuid.UUID
}

func (q *Queries) UpdateAppOrganizationStripeCustomerID(ctx context.Context, arg UpdateAppOrganizationStripeCustomerIDParams) error {
	_, err := q.db.Exec(ctx, updateAppOrganizationStripeCustomerID, arg.StripeCustomerID, arg.ID)
	return err
}

const updateEmailVerificationChallengeCompleteTime = `-- name: UpdateEmailVerificationChallengeCompleteTime :one
update email_verification_challenges
set complete_time = $1
where id = $2
returning id, email, expire_time, secret_token, complete_time
`

type UpdateEmailVerificationChallengeCompleteTimeParams struct {
	CompleteTime *time.Time
	ID           uuid.UUID
}

func (q *Queries) UpdateEmailVerificationChallengeCompleteTime(ctx context.Context, arg UpdateEmailVerificationChallengeCompleteTimeParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, updateEmailVerificationChallengeCompleteTime, arg.CompleteTime, arg.ID)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ExpireTime,
		&i.SecretToken,
		&i.CompleteTime,
	)
	return i, err
}

const updateEnvironment = `-- name: UpdateEnvironment :one
update environments
set display_name       = $1,
    redirect_url       = $2,
    auth_url           = $3,
    oauth_redirect_uri = $4
where id = $5
returning id, redirect_url, app_organization_id, display_name, auth_url, oauth_redirect_uri
`

type UpdateEnvironmentParams struct {
	DisplayName      *string
	RedirectUrl      *string
	AuthUrl          *string
	OauthRedirectUri *string
	ID               uuid.UUID
}

func (q *Queries) UpdateEnvironment(ctx context.Context, arg UpdateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, updateEnvironment,
		arg.DisplayName,
		arg.RedirectUrl,
		arg.AuthUrl,
		arg.OauthRedirectUri,
		arg.ID,
	)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.RedirectUrl,
		&i.AppOrganizationID,
		&i.DisplayName,
		&i.AuthUrl,
		&i.OauthRedirectUri,
	)
	return i, err
}

const updateOnboardingState = `-- name: UpdateOnboardingState :one
insert into onboarding_states (app_organization_id, dummyidp_app_id, onboarding_environment_id,
                               onboarding_organization_id,
                               onboarding_saml_connection_id)
values ($1, $2, $3, $4, $5)
on conflict (app_organization_id) do update set dummyidp_app_id               = excluded.dummyidp_app_id,
                                                onboarding_environment_id     = excluded.onboarding_environment_id,
                                                onboarding_organization_id    = excluded.onboarding_organization_id,
                                                onboarding_saml_connection_id = excluded.onboarding_saml_connection_id
returning app_organization_id, dummyidp_app_id, onboarding_environment_id, onboarding_organization_id, onboarding_saml_connection_id
`

type UpdateOnboardingStateParams struct {
	AppOrganizationID          uuid.UUID
	DummyidpAppID              string
	OnboardingEnvironmentID    uuid.UUID
	OnboardingOrganizationID   uuid.UUID
	OnboardingSamlConnectionID uuid.UUID
}

func (q *Queries) UpdateOnboardingState(ctx context.Context, arg UpdateOnboardingStateParams) (OnboardingState, error) {
	row := q.db.QueryRow(ctx, updateOnboardingState,
		arg.AppOrganizationID,
		arg.DummyidpAppID,
		arg.OnboardingEnvironmentID,
		arg.OnboardingOrganizationID,
		arg.OnboardingSamlConnectionID,
	)
	var i OnboardingState
	err := row.Scan(
		&i.AppOrganizationID,
		&i.DummyidpAppID,
		&i.OnboardingEnvironmentID,
		&i.OnboardingOrganizationID,
		&i.OnboardingSamlConnectionID,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
update organizations
set external_id = $1
where id = $2
returning id, environment_id, external_id
`

type UpdateOrganizationParams struct {
	ExternalID *string
	ID         uuid.UUID
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization, arg.ExternalID, arg.ID)
	var i Organization
	err := row.Scan(&i.ID, &i.EnvironmentID, &i.ExternalID)
	return i, err
}

const updatePrimarySAMLConnection = `-- name: UpdatePrimarySAMLConnection :exec
update saml_connections
set is_primary = (id = $1)
where organization_id = $2
`

type UpdatePrimarySAMLConnectionParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) UpdatePrimarySAMLConnection(ctx context.Context, arg UpdatePrimarySAMLConnectionParams) error {
	_, err := q.db.Exec(ctx, updatePrimarySAMLConnection, arg.ID, arg.OrganizationID)
	return err
}

const updatePrimarySCIMDirectory = `-- name: UpdatePrimarySCIMDirectory :exec
update scim_directories
set is_primary = (id = $1)
where organization_id = $2
`

type UpdatePrimarySCIMDirectoryParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) UpdatePrimarySCIMDirectory(ctx context.Context, arg UpdatePrimarySCIMDirectoryParams) error {
	_, err := q.db.Exec(ctx, updatePrimarySCIMDirectory, arg.ID, arg.OrganizationID)
	return err
}

const updateSAMLConnection = `-- name: UpdateSAMLConnection :one
update saml_connections
set idp_entity_id        = $1,
    idp_redirect_url     = $2,
    idp_x509_certificate = $3,
    is_primary           = $4
where id = $5
returning id, organization_id, idp_redirect_url, idp_x509_certificate, idp_entity_id, sp_entity_id, is_primary, sp_acs_url
`

type UpdateSAMLConnectionParams struct {
	IdpEntityID        *string
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IsPrimary          bool
	ID                 uuid.UUID
}

func (q *Queries) UpdateSAMLConnection(ctx context.Context, arg UpdateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, updateSAMLConnection,
		arg.IdpEntityID,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IsPrimary,
		arg.ID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.SpEntityID,
		&i.IsPrimary,
		&i.SpAcsUrl,
	)
	return i, err
}

const updateSAMLFlowRedeem = `-- name: UpdateSAMLFlowRedeem :one
update saml_flows
set update_time        = $1,
    redeem_time        = $2,
    redeem_response    = $3,
    status             = $4,
    access_code_sha256 = null
where id = $5
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpdateSAMLFlowRedeemParams struct {
	UpdateTime     time.Time
	RedeemTime     *time.Time
	RedeemResponse []byte
	Status         SamlFlowStatus
	ID             uuid.UUID
}

func (q *Queries) UpdateSAMLFlowRedeem(ctx context.Context, arg UpdateSAMLFlowRedeemParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, updateSAMLFlowRedeem,
		arg.UpdateTime,
		arg.RedeemTime,
		arg.RedeemResponse,
		arg.Status,
		arg.ID,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const updateSAMLFlowSubjectData = `-- name: UpdateSAMLFlowSubjectData :one
update saml_flows
set email                  = $1,
    subject_idp_attributes = $2
where id = $3
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpdateSAMLFlowSubjectDataParams struct {
	Email                *string
	SubjectIdpAttributes []byte
	ID                   uuid.UUID
}

func (q *Queries) UpdateSAMLFlowSubjectData(ctx context.Context, arg UpdateSAMLFlowSubjectDataParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, updateSAMLFlowSubjectData, arg.Email, arg.SubjectIdpAttributes, arg.ID)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const updateSCIMDirectory = `-- name: UpdateSCIMDirectory :one
update scim_directories
set is_primary = $1
where id = $2
returning id, organization_id, bearer_token_sha256, is_primary, scim_base_url
`

type UpdateSCIMDirectoryParams struct {
	IsPrimary bool
	ID        uuid.UUID
}

func (q *Queries) UpdateSCIMDirectory(ctx context.Context, arg UpdateSCIMDirectoryParams) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, updateSCIMDirectory, arg.IsPrimary, arg.ID)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const updateSCIMDirectoryBearerToken = `-- name: UpdateSCIMDirectoryBearerToken :one
update scim_directories
set bearer_token_sha256 = $1
where id = $2
returning id, organization_id, bearer_token_sha256, is_primary, scim_base_url
`

type UpdateSCIMDirectoryBearerTokenParams struct {
	BearerTokenSha256 []byte
	ID                uuid.UUID
}

func (q *Queries) UpdateSCIMDirectoryBearerToken(ctx context.Context, arg UpdateSCIMDirectoryBearerTokenParams) (ScimDirectory, error) {
	row := q.db.QueryRow(ctx, updateSCIMDirectoryBearerToken, arg.BearerTokenSha256, arg.ID)
	var i ScimDirectory
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BearerTokenSha256,
		&i.IsPrimary,
		&i.ScimBaseUrl,
	)
	return i, err
}

const upsertSAMLFlowInitiate = `-- name: UpsertSAMLFlowInitiate :one
insert into saml_flows (id, saml_connection_id, expire_time, state, create_time, update_time,
                        initiate_request, initiate_time, status, is_oauth)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
on conflict (id) do update set update_time      = excluded.update_time,
                               initiate_request = excluded.initiate_request,
                               initiate_time    = excluded.initiate_time,
                               status           = excluded.status
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpsertSAMLFlowInitiateParams struct {
	ID               uuid.UUID
	SamlConnectionID uuid.UUID
	ExpireTime       time.Time
	State            string
	CreateTime       time.Time
	UpdateTime       time.Time
	InitiateRequest  *string
	InitiateTime     *time.Time
	Status           SamlFlowStatus
	IsOauth          *bool
}

func (q *Queries) UpsertSAMLFlowInitiate(ctx context.Context, arg UpsertSAMLFlowInitiateParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, upsertSAMLFlowInitiate,
		arg.ID,
		arg.SamlConnectionID,
		arg.ExpireTime,
		arg.State,
		arg.CreateTime,
		arg.UpdateTime,
		arg.InitiateRequest,
		arg.InitiateTime,
		arg.Status,
		arg.IsOauth,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}

const upsertSAMLFlowReceiveAssertion = `-- name: UpsertSAMLFlowReceiveAssertion :one
insert into saml_flows (id, saml_connection_id, access_code_sha256, expire_time, state, create_time, update_time,
                        assertion, receive_assertion_time, error_unsigned_assertion, error_bad_issuer,
                        error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
on conflict (id) do update set access_code_sha256                       = excluded.access_code_sha256,
                               update_time                              = excluded.update_time,
                               assertion                                = excluded.assertion,
                               receive_assertion_time                   = excluded.receive_assertion_time,
                               error_unsigned_assertion                 = excluded.error_unsigned_assertion,
                               error_bad_issuer                         = excluded.error_bad_issuer,
                               error_bad_audience                       = excluded.error_bad_audience,
                               error_bad_subject_id                     = excluded.error_bad_subject_id,
                               error_email_outside_organization_domains = excluded.error_email_outside_organization_domains,
                               status                                   = excluded.status
returning id, saml_connection_id, access_code, state, create_time, expire_time, email, subject_idp_attributes, update_time, auth_redirect_url, get_redirect_time, initiate_request, initiate_time, assertion, app_redirect_url, receive_assertion_time, redeem_time, redeem_response, error_bad_issuer, error_bad_audience, error_bad_subject_id, error_email_outside_organization_domains, status, error_unsigned_assertion, access_code_sha256, is_oauth
`

type UpsertSAMLFlowReceiveAssertionParams struct {
	ID                                   uuid.UUID
	SamlConnectionID                     uuid.UUID
	AccessCodeSha256                     []byte
	ExpireTime                           time.Time
	State                                string
	CreateTime                           time.Time
	UpdateTime                           time.Time
	Assertion                            *string
	ReceiveAssertionTime                 *time.Time
	ErrorUnsignedAssertion               bool
	ErrorBadIssuer                       *string
	ErrorBadAudience                     *string
	ErrorBadSubjectID                    *string
	ErrorEmailOutsideOrganizationDomains *string
	Status                               SamlFlowStatus
}

func (q *Queries) UpsertSAMLFlowReceiveAssertion(ctx context.Context, arg UpsertSAMLFlowReceiveAssertionParams) (SamlFlow, error) {
	row := q.db.QueryRow(ctx, upsertSAMLFlowReceiveAssertion,
		arg.ID,
		arg.SamlConnectionID,
		arg.AccessCodeSha256,
		arg.ExpireTime,
		arg.State,
		arg.CreateTime,
		arg.UpdateTime,
		arg.Assertion,
		arg.ReceiveAssertionTime,
		arg.ErrorUnsignedAssertion,
		arg.ErrorBadIssuer,
		arg.ErrorBadAudience,
		arg.ErrorBadSubjectID,
		arg.ErrorEmailOutsideOrganizationDomains,
		arg.Status,
	)
	var i SamlFlow
	err := row.Scan(
		&i.ID,
		&i.SamlConnectionID,
		&i.AccessCode,
		&i.State,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.SubjectIdpAttributes,
		&i.UpdateTime,
		&i.AuthRedirectUrl,
		&i.GetRedirectTime,
		&i.InitiateRequest,
		&i.InitiateTime,
		&i.Assertion,
		&i.AppRedirectUrl,
		&i.ReceiveAssertionTime,
		&i.RedeemTime,
		&i.RedeemResponse,
		&i.ErrorBadIssuer,
		&i.ErrorBadAudience,
		&i.ErrorBadSubjectID,
		&i.ErrorEmailOutsideOrganizationDomains,
		&i.Status,
		&i.ErrorUnsignedAssertion,
		&i.AccessCodeSha256,
		&i.IsOauth,
	)
	return i, err
}
