package saml_test

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/ssoready/ssoready/internal/saml"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestValidate(t *testing.T) {
	entries, err := os.ReadDir("testdata/assertions")
	assert.NoError(t, err)

	for _, entry := range entries {
		t.Run(entry.Name(), func(t *testing.T) {
			assertion, err := os.ReadFile(fmt.Sprintf("testdata/assertions/%s/assertion.xml", entry.Name()))
			require.NoError(t, err)

			metadata, err := os.ReadFile(fmt.Sprintf("testdata/assertions/%s/metadata.xml", entry.Name()))
			require.NoError(t, err)

			params, err := os.ReadFile(fmt.Sprintf("testdata/assertions/%s/params.json", entry.Name()))
			require.NoError(t, err)

			parseMetadataRes, err := saml.ParseMetadata(metadata)
			require.NoError(t, err)

			var paramData struct {
				SPEntityID string    `json:"sp_entity_id"`
				Now        time.Time `json:"now"`
			}
			err = json.Unmarshal(params, &paramData)
			require.NoError(t, err)

			_, problems, err := saml.Validate(&saml.ValidateRequest{
				SAMLResponse:   base64.StdEncoding.EncodeToString(assertion),
				IDPCertificate: parseMetadataRes.IDPCertificate,
				IDPEntityID:    parseMetadataRes.IDPEntityID,
				SPEntityID:     paramData.SPEntityID,
				Now:            paramData.Now,
			})
			assert.NoError(t, err)
			assert.Nil(t, problems)
		})
	}

	//asn1Data, err := base64.StdEncoding.DecodeString("MIIDdDCCAlygAwIBAgIGAYl5fwdeMA0GCSqGSIb3DQEBCwUAMHsxFDASBgNVBAoTC0dvb2dsZSBJ\nbmMuMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MQ8wDQYDVQQDEwZHb29nbGUxGDAWBgNVBAsTD0dv\nb2dsZSBGb3IgV29yazELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWEwHhcNMjMwNzIx\nMTcyODM0WhcNMjgwNzE5MTcyODM0WjB7MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEWMBQGA1UEBxMN\nTW91bnRhaW4gVmlldzEPMA0GA1UEAxMGR29vZ2xlMRgwFgYDVQQLEw9Hb29nbGUgRm9yIFdvcmsx\nCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\nMIIBCgKCAQEA2C9GM4JrOIk8k0B7rRJSwnx4jNdDFNou7LnWZ6B0wQrhPKc7KhbB+705M+u96o7A\nPSTpmbbW/ZlI47/tctCiQOMgBjc/10pxI/smEONG99juQeSgpdkYMR9HTXO/8PTbGyKswyWsGLJo\nM4Pe8qcSnwUiSMjDCcC56WV3MOAjwoYywYsZXm3y/Ug0Fb/thbK2lzJWu6aVDgssXfF9DQ0a42wk\nB1EbtWy0Lo1oIjHOjUXtoK58sXEp5p13x/4wGYYvSaSK6hFvBgJ53R41wDRcce0Our5r3xA6LjjU\npiQLj+mfntz4+WkGF4Ok6ibwdGiG1SRtLcG+KyusHn+Qu9JHGQIDAQABMA0GCSqGSIb3DQEBCwUA\nA4IBAQAx11yQ6quWJzr9Nk7lkD8Wtj7PRAvpyKgwjW8i4OGXf3cvSM5tc2uiMc/0lgqU7Nlx0iQS\nx5R8L4tPisFuESIHREz8jtQpp24U4n2XG8+E+gUo2yYw7D8Xha3l2JFlqCIwx/zlidEb8E8VYVxw\nSUR6ywKpLdX7VJa02qpbUEhOTi86EBOYOfSxOnVokMFsKZ0pV/kAozxdQPo76xFxc+/nRDVQsZ9Y\n6Tl4tE7KvzV1OrQN3T8b2sXGejZvc28XrOLdyWnPTx48rqKmwy0XVJQY3XdtkjIZSkWHpUU6L9XX\nxHhtr/PB0PrIqJDN35q3sMxmIW41d/NdR8AcJZVDEje9")
	//if err != nil {
	//	panic(err)
	//}
	//
	//cert, err := x509.ParseCertificate(asn1Data)
	//if err != nil {
	//	panic(err)
	//}
	//
	//now, _ := time.Parse(time.RFC3339, "2023-11-16T21:24:27.514Z")
	//
	//fmt.Println(Validate(&ValidateRequest{
	//	SAMLResponse:   "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHNhbWwycDpSZXNwb25zZSB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vZXhhbXBsZS5jb20vYWNjb3VudHMvYmZlYjAzYTAtNjAyMi00ODYyLTliYmYtNWE0ZDc2MDhkYjM1L3NhbWwvYWNzIiBJRD0iXzM1YjJiMDI2M2U3ODQzODdhZjliNGU3YmExZGQ4YjA0IiBJc3N1ZUluc3RhbnQ9IjIwMjMtMTEtMTZUMjE6MjA6MjcuNTE0WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9zYW1sMj9pZHBpZD1DMDI5b3AyZ2E8L3NhbWwyOklzc3Vlcj48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iXzZmN2UzYjYyNzUxZWQ1YmYwYWRhYjY0OTM2ZGExZTY3IiBJc3N1ZUluc3RhbnQ9IjIwMjMtMTEtMTZUMjE6MjA6MjcuNTE0WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyPmh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL3NhbWwyP2lkcGlkPUMwMjlvcDJnYTwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHM6UmVmZXJlbmNlIFVSST0iI182ZjdlM2I2Mjc1MWVkNWJmMGFkYWI2NDkzNmRhMWU2NyI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzOkRpZ2VzdFZhbHVlPlRwem1Xb0w5RVVnYlg3UkJuQTUvSS83UFBndW83K3dETmk3R2pnV0g1Y0k9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8+PGRzOlNpZ25hdHVyZVZhbHVlPlB2emdlMmVsci95UDI2WTZEc3FNRXZzZkMzQkNqWnpQYmpoMXpXcG5pRkVmdStTb29UNUplekhieFNIK1p1YTcxbDFGbDlnc1BuMnIKICAgIERHcWU4Ymt4UTd1NlladGRwQlkzYUU4T04zOStxMjFkRGtkanV3OXViR0docDh1eldxNFQ1aWpmQkJ6SlhGanVhcFlqZHo3NmdDZFEKICAgIDNieG5DQ1FmdXRhYTBEQ3Z3UDZDaERiSFJXWVNQWHJreXlXcXFlZ0NZQ3RuWTFHQ0UxV0tXWW9nTnpWSzVJaytZNXpOc3V5NE5vSlMKICAgIFhzdFdvQi82Ym9lbmw5RzZpdCsweGVlMlB1M1FvT1J3bjNOcnExYmFCQlRndUkrU0x3enpCZkVLQ1o5M0VmVjNiNnM2SkY1U2dGSkcKICAgIFVpZ2NWK2tQSjBISERnVmxnL2xlUVN6ejB3M1FpeXRNNVMwejhnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOVN1YmplY3ROYW1lPlNUPUNhbGlmb3JuaWEsQz1VUyxPVT1Hb29nbGUgRm9yIFdvcmssQ049R29vZ2xlLEw9TW91bnRhaW4gVmlldyxPPUdvb2dsZSBJbmMuPC9kczpYNTA5U3ViamVjdE5hbWU+PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEZERDQ0FseWdBd0lCQWdJR0FZbDVmd2RlTUEwR0NTcUdTSWIzRFFFQkN3VUFNSHN4RkRBU0JnTlZCQW9UQzBkdmIyZHNaU0JKCiAgICBibU11TVJZd0ZBWURWUVFIRXcxTmIzVnVkR0ZwYmlCV2FXVjNNUTh3RFFZRFZRUURFd1pIYjI5bmJHVXhHREFXQmdOVkJBc1REMGR2CiAgICBiMmRzWlNCR2IzSWdWMjl5YXpFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V3SGhjTk1qTXdOekl4CiAgICBNVGN5T0RNMFdoY05Namd3TnpFNU1UY3lPRE0wV2pCN01SUXdFZ1lEVlFRS0V3dEhiMjluYkdVZ1NXNWpMakVXTUJRR0ExVUVCeE1OCiAgICBUVzkxYm5SaGFXNGdWbWxsZHpFUE1BMEdBMVVFQXhNR1IyOXZaMnhsTVJnd0ZnWURWUVFMRXc5SGIyOW5iR1VnUm05eUlGZHZjbXN4CiAgICBDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCiAgICBNSUlCQ2dLQ0FRRUEyQzlHTTRKck9JazhrMEI3clJKU3dueDRqTmRERk5vdTdMbldaNkIwd1FyaFBLYzdLaGJCKzcwNU0rdTk2bzdBCiAgICBQU1RwbWJiVy9abEk0Ny90Y3RDaVFPTWdCamMvMTBweEkvc21FT05HOTlqdVFlU2dwZGtZTVI5SFRYTy84UFRiR3lLc3d5V3NHTEpvCiAgICBNNFBlOHFjU253VWlTTWpEQ2NDNTZXVjNNT0Fqd29ZeXdZc1pYbTN5L1VnMEZiL3RoYksybHpKV3U2YVZEZ3NzWGZGOURRMGE0MndrCiAgICBCMUVidFd5MExvMW9JakhPalVYdG9LNThzWEVwNXAxM3gvNHdHWVl2U2FTSzZoRnZCZ0o1M1I0MXdEUmNjZTBPdXI1cjN4QTZMampVCiAgICBwaVFMaittZm50ejQrV2tHRjRPazZpYndkR2lHMVNSdExjRytLeXVzSG4rUXU5SkhHUUlEQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBCiAgICBBNElCQVFBeDExeVE2cXVXSnpyOU5rN2xrRDhXdGo3UFJBdnB5S2d3alc4aTRPR1hmM2N2U001dGMydWlNYy8wbGdxVTdObHgwaVFTCiAgICB4NVI4TDR0UGlzRnVFU0lIUkV6OGp0UXBwMjRVNG4yWEc4K0UrZ1VvMnlZdzdEOFhoYTNsMkpGbHFDSXd4L3psaWRFYjhFOFZZVnh3CiAgICBTVVI2eXdLcExkWDdWSmEwMnFwYlVFaE9UaTg2RUJPWU9mU3hPblZva01Gc0taMHBWL2tBb3p4ZFFQbzc2eEZ4YysvblJEVlFzWjlZCiAgICA2VGw0dEU3S3Z6VjFPclFOM1Q4YjJzWEdlalp2YzI4WHJPTGR5V25QVHg0OHJxS213eTBYVkpRWTNYZHRraklaU2tXSHBVVTZMOVhYCiAgICB4SGh0ci9QQjBQcklxSkROMzVxM3NNeG1JVzQxZC9OZFI4QWNKWlZERWplOTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjE6bmFtZWlkLWZvcm1hdDp1bnNwZWNpZmllZCI+dWx5c3NlLmNhcmlvbkBjb2RvbWFpbmRhdGEuY29tPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDIzLTExLTE2VDIxOjI1OjI3LjUxNFoiIFJlY2lwaWVudD0iaHR0cHM6Ly9leGFtcGxlLmNvbS9hY2NvdW50cy9iZmViMDNhMC02MDIyLTQ4NjItOWJiZi01YTRkNzYwOGRiMzUvc2FtbC9hY3MiLz48L3NhbWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMy0xMS0xNlQyMToxNToyNy41MTRaIiBOb3RPbk9yQWZ0ZXI9IjIwMjMtMTEtMTZUMjE6MjU6MjcuNTE0WiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlPmh0dHBzOi8vbG9jYWxob3N0OjgwODAvYWNjb3VudHMvYmZlYjAzYTAtNjAyMi00ODYyLTliYmYtNWE0ZDc2MDhkYjM1L3NhbWw8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAyMy0xMS0xNlQyMDo1MToxNi4wMDBaIiBTZXNzaW9uSW5kZXg9Il82ZjdlM2I2Mjc1MWVkNWJmMGFkYWI2NDkzNmRhMWU2NyI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6dW5zcGVjaWZpZWQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+",
	//	IDPCertificate: cert,
	//	IDPEntityID:    "https://accounts.google.com/o/saml2?idpid=C029op2ga",
	//	SPEntityID:     "https://localhost:8080/accounts/bfeb03a0-6022-4862-9bbf-5a4d7608db35/saml",
	//	Now:            now,
	//}))
	//panic("")
}
