// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: ssoready/v1/ssoready.proto

package ssoreadyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SSOReadyService_GetSAMLRedirectURL_FullMethodName             = "/ssoready.v1.SSOReadyService/GetSAMLRedirectURL"
	SSOReadyService_RedeemSAMLAccessCode_FullMethodName           = "/ssoready.v1.SSOReadyService/RedeemSAMLAccessCode"
	SSOReadyService_VerifyEmail_FullMethodName                    = "/ssoready.v1.SSOReadyService/VerifyEmail"
	SSOReadyService_SignIn_FullMethodName                         = "/ssoready.v1.SSOReadyService/SignIn"
	SSOReadyService_SignOut_FullMethodName                        = "/ssoready.v1.SSOReadyService/SignOut"
	SSOReadyService_Whoami_FullMethodName                         = "/ssoready.v1.SSOReadyService/Whoami"
	SSOReadyService_GetOnboardingState_FullMethodName             = "/ssoready.v1.SSOReadyService/GetOnboardingState"
	SSOReadyService_UpdateOnboardingState_FullMethodName          = "/ssoready.v1.SSOReadyService/UpdateOnboardingState"
	SSOReadyService_OnboardingGetSAMLRedirectURL_FullMethodName   = "/ssoready.v1.SSOReadyService/OnboardingGetSAMLRedirectURL"
	SSOReadyService_OnboardingRedeemSAMLAccessCode_FullMethodName = "/ssoready.v1.SSOReadyService/OnboardingRedeemSAMLAccessCode"
	SSOReadyService_ListEnvironments_FullMethodName               = "/ssoready.v1.SSOReadyService/ListEnvironments"
	SSOReadyService_GetEnvironment_FullMethodName                 = "/ssoready.v1.SSOReadyService/GetEnvironment"
	SSOReadyService_CreateEnvironment_FullMethodName              = "/ssoready.v1.SSOReadyService/CreateEnvironment"
	SSOReadyService_UpdateEnvironment_FullMethodName              = "/ssoready.v1.SSOReadyService/UpdateEnvironment"
	SSOReadyService_ListAPIKeys_FullMethodName                    = "/ssoready.v1.SSOReadyService/ListAPIKeys"
	SSOReadyService_GetAPIKey_FullMethodName                      = "/ssoready.v1.SSOReadyService/GetAPIKey"
	SSOReadyService_CreateAPIKey_FullMethodName                   = "/ssoready.v1.SSOReadyService/CreateAPIKey"
	SSOReadyService_DeleteAPIKey_FullMethodName                   = "/ssoready.v1.SSOReadyService/DeleteAPIKey"
	SSOReadyService_ListSAMLOAuthClients_FullMethodName           = "/ssoready.v1.SSOReadyService/ListSAMLOAuthClients"
	SSOReadyService_GetSAMLOAuthClient_FullMethodName             = "/ssoready.v1.SSOReadyService/GetSAMLOAuthClient"
	SSOReadyService_CreateSAMLOAuthClient_FullMethodName          = "/ssoready.v1.SSOReadyService/CreateSAMLOAuthClient"
	SSOReadyService_DeleteSAMLOAuthClient_FullMethodName          = "/ssoready.v1.SSOReadyService/DeleteSAMLOAuthClient"
	SSOReadyService_ListOrganizations_FullMethodName              = "/ssoready.v1.SSOReadyService/ListOrganizations"
	SSOReadyService_GetOrganization_FullMethodName                = "/ssoready.v1.SSOReadyService/GetOrganization"
	SSOReadyService_CreateOrganization_FullMethodName             = "/ssoready.v1.SSOReadyService/CreateOrganization"
	SSOReadyService_UpdateOrganization_FullMethodName             = "/ssoready.v1.SSOReadyService/UpdateOrganization"
	SSOReadyService_ListSAMLConnections_FullMethodName            = "/ssoready.v1.SSOReadyService/ListSAMLConnections"
	SSOReadyService_GetSAMLConnection_FullMethodName              = "/ssoready.v1.SSOReadyService/GetSAMLConnection"
	SSOReadyService_CreateSAMLConnection_FullMethodName           = "/ssoready.v1.SSOReadyService/CreateSAMLConnection"
	SSOReadyService_UpdateSAMLConnection_FullMethodName           = "/ssoready.v1.SSOReadyService/UpdateSAMLConnection"
	SSOReadyService_ListSAMLFlows_FullMethodName                  = "/ssoready.v1.SSOReadyService/ListSAMLFlows"
	SSOReadyService_GetSAMLFlow_FullMethodName                    = "/ssoready.v1.SSOReadyService/GetSAMLFlow"
	SSOReadyService_ParseSAMLMetadata_FullMethodName              = "/ssoready.v1.SSOReadyService/ParseSAMLMetadata"
)

// SSOReadyServiceClient is the client API for SSOReadyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOReadyServiceClient interface {
	GetSAMLRedirectURL(ctx context.Context, in *GetSAMLRedirectURLRequest, opts ...grpc.CallOption) (*GetSAMLRedirectURLResponse, error)
	RedeemSAMLAccessCode(ctx context.Context, in *RedeemSAMLAccessCodeRequest, opts ...grpc.CallOption) (*RedeemSAMLAccessCodeResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error)
	Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error)
	GetOnboardingState(ctx context.Context, in *GetOnboardingStateRequest, opts ...grpc.CallOption) (*GetOnboardingStateResponse, error)
	UpdateOnboardingState(ctx context.Context, in *UpdateOnboardingStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OnboardingGetSAMLRedirectURL(ctx context.Context, in *OnboardingGetSAMLRedirectURLRequest, opts ...grpc.CallOption) (*GetSAMLRedirectURLResponse, error)
	OnboardingRedeemSAMLAccessCode(ctx context.Context, in *OnboardingRedeemSAMLAccessCodeRequest, opts ...grpc.CallOption) (*RedeemSAMLAccessCodeResponse, error)
	ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error)
	GetEnvironment(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSAMLOAuthClients(ctx context.Context, in *ListSAMLOAuthClientsRequest, opts ...grpc.CallOption) (*ListSAMLOAuthClientsResponse, error)
	GetSAMLOAuthClient(ctx context.Context, in *GetSAMLOAuthClientRequest, opts ...grpc.CallOption) (*SAMLOAuthClient, error)
	CreateSAMLOAuthClient(ctx context.Context, in *CreateSAMLOAuthClientRequest, opts ...grpc.CallOption) (*SAMLOAuthClient, error)
	DeleteSAMLOAuthClient(ctx context.Context, in *DeleteSAMLOAuthClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	ListSAMLConnections(ctx context.Context, in *ListSAMLConnectionsRequest, opts ...grpc.CallOption) (*ListSAMLConnectionsResponse, error)
	GetSAMLConnection(ctx context.Context, in *GetSAMLConnectionRequest, opts ...grpc.CallOption) (*SAMLConnection, error)
	CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*SAMLConnection, error)
	UpdateSAMLConnection(ctx context.Context, in *UpdateSAMLConnectionRequest, opts ...grpc.CallOption) (*SAMLConnection, error)
	ListSAMLFlows(ctx context.Context, in *ListSAMLFlowsRequest, opts ...grpc.CallOption) (*ListSAMLFlowsResponse, error)
	GetSAMLFlow(ctx context.Context, in *GetSAMLFlowRequest, opts ...grpc.CallOption) (*SAMLFlow, error)
	ParseSAMLMetadata(ctx context.Context, in *ParseSAMLMetadataRequest, opts ...grpc.CallOption) (*ParseSAMLMetadataResponse, error)
}

type sSOReadyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOReadyServiceClient(cc grpc.ClientConnInterface) SSOReadyServiceClient {
	return &sSOReadyServiceClient{cc}
}

func (c *sSOReadyServiceClient) GetSAMLRedirectURL(ctx context.Context, in *GetSAMLRedirectURLRequest, opts ...grpc.CallOption) (*GetSAMLRedirectURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSAMLRedirectURLResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_GetSAMLRedirectURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) RedeemSAMLAccessCode(ctx context.Context, in *RedeemSAMLAccessCodeRequest, opts ...grpc.CallOption) (*RedeemSAMLAccessCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemSAMLAccessCodeResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_RedeemSAMLAccessCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SSOReadyService_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOutResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_SignOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoamiResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_Whoami_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) GetOnboardingState(ctx context.Context, in *GetOnboardingStateRequest, opts ...grpc.CallOption) (*GetOnboardingStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnboardingStateResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_GetOnboardingState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) UpdateOnboardingState(ctx context.Context, in *UpdateOnboardingStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SSOReadyService_UpdateOnboardingState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) OnboardingGetSAMLRedirectURL(ctx context.Context, in *OnboardingGetSAMLRedirectURLRequest, opts ...grpc.CallOption) (*GetSAMLRedirectURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSAMLRedirectURLResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_OnboardingGetSAMLRedirectURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) OnboardingRedeemSAMLAccessCode(ctx context.Context, in *OnboardingRedeemSAMLAccessCodeRequest, opts ...grpc.CallOption) (*RedeemSAMLAccessCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemSAMLAccessCodeResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_OnboardingRedeemSAMLAccessCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvironmentsResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_ListEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) GetEnvironment(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Environment)
	err := c.cc.Invoke(ctx, SSOReadyService_GetEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Environment)
	err := c.cc.Invoke(ctx, SSOReadyService_CreateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Environment)
	err := c.cc.Invoke(ctx, SSOReadyService_UpdateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_ListAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIKey)
	err := c.cc.Invoke(ctx, SSOReadyService_GetAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIKey)
	err := c.cc.Invoke(ctx, SSOReadyService_CreateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SSOReadyService_DeleteAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) ListSAMLOAuthClients(ctx context.Context, in *ListSAMLOAuthClientsRequest, opts ...grpc.CallOption) (*ListSAMLOAuthClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLOAuthClientsResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_ListSAMLOAuthClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) GetSAMLOAuthClient(ctx context.Context, in *GetSAMLOAuthClientRequest, opts ...grpc.CallOption) (*SAMLOAuthClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAMLOAuthClient)
	err := c.cc.Invoke(ctx, SSOReadyService_GetSAMLOAuthClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) CreateSAMLOAuthClient(ctx context.Context, in *CreateSAMLOAuthClientRequest, opts ...grpc.CallOption) (*SAMLOAuthClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAMLOAuthClient)
	err := c.cc.Invoke(ctx, SSOReadyService_CreateSAMLOAuthClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) DeleteSAMLOAuthClient(ctx context.Context, in *DeleteSAMLOAuthClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SSOReadyService_DeleteSAMLOAuthClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, SSOReadyService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, SSOReadyService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, SSOReadyService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) ListSAMLConnections(ctx context.Context, in *ListSAMLConnectionsRequest, opts ...grpc.CallOption) (*ListSAMLConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLConnectionsResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_ListSAMLConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) GetSAMLConnection(ctx context.Context, in *GetSAMLConnectionRequest, opts ...grpc.CallOption) (*SAMLConnection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAMLConnection)
	err := c.cc.Invoke(ctx, SSOReadyService_GetSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*SAMLConnection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAMLConnection)
	err := c.cc.Invoke(ctx, SSOReadyService_CreateSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) UpdateSAMLConnection(ctx context.Context, in *UpdateSAMLConnectionRequest, opts ...grpc.CallOption) (*SAMLConnection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAMLConnection)
	err := c.cc.Invoke(ctx, SSOReadyService_UpdateSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) ListSAMLFlows(ctx context.Context, in *ListSAMLFlowsRequest, opts ...grpc.CallOption) (*ListSAMLFlowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLFlowsResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_ListSAMLFlows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) GetSAMLFlow(ctx context.Context, in *GetSAMLFlowRequest, opts ...grpc.CallOption) (*SAMLFlow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAMLFlow)
	err := c.cc.Invoke(ctx, SSOReadyService_GetSAMLFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOReadyServiceClient) ParseSAMLMetadata(ctx context.Context, in *ParseSAMLMetadataRequest, opts ...grpc.CallOption) (*ParseSAMLMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseSAMLMetadataResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_ParseSAMLMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOReadyServiceServer is the server API for SSOReadyService service.
// All implementations must embed UnimplementedSSOReadyServiceServer
// for forward compatibility
type SSOReadyServiceServer interface {
	GetSAMLRedirectURL(context.Context, *GetSAMLRedirectURLRequest) (*GetSAMLRedirectURLResponse, error)
	RedeemSAMLAccessCode(context.Context, *RedeemSAMLAccessCodeRequest) (*RedeemSAMLAccessCodeResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*emptypb.Empty, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error)
	Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error)
	GetOnboardingState(context.Context, *GetOnboardingStateRequest) (*GetOnboardingStateResponse, error)
	UpdateOnboardingState(context.Context, *UpdateOnboardingStateRequest) (*emptypb.Empty, error)
	OnboardingGetSAMLRedirectURL(context.Context, *OnboardingGetSAMLRedirectURLRequest) (*GetSAMLRedirectURLResponse, error)
	OnboardingRedeemSAMLAccessCode(context.Context, *OnboardingRedeemSAMLAccessCodeRequest) (*RedeemSAMLAccessCodeResponse, error)
	ListEnvironments(context.Context, *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error)
	GetEnvironment(context.Context, *GetEnvironmentRequest) (*Environment, error)
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*Environment, error)
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*Environment, error)
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	GetAPIKey(context.Context, *GetAPIKeyRequest) (*APIKey, error)
	CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*APIKey, error)
	DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*emptypb.Empty, error)
	ListSAMLOAuthClients(context.Context, *ListSAMLOAuthClientsRequest) (*ListSAMLOAuthClientsResponse, error)
	GetSAMLOAuthClient(context.Context, *GetSAMLOAuthClientRequest) (*SAMLOAuthClient, error)
	CreateSAMLOAuthClient(context.Context, *CreateSAMLOAuthClientRequest) (*SAMLOAuthClient, error)
	DeleteSAMLOAuthClient(context.Context, *DeleteSAMLOAuthClientRequest) (*emptypb.Empty, error)
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*Organization, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*Organization, error)
	ListSAMLConnections(context.Context, *ListSAMLConnectionsRequest) (*ListSAMLConnectionsResponse, error)
	GetSAMLConnection(context.Context, *GetSAMLConnectionRequest) (*SAMLConnection, error)
	CreateSAMLConnection(context.Context, *CreateSAMLConnectionRequest) (*SAMLConnection, error)
	UpdateSAMLConnection(context.Context, *UpdateSAMLConnectionRequest) (*SAMLConnection, error)
	ListSAMLFlows(context.Context, *ListSAMLFlowsRequest) (*ListSAMLFlowsResponse, error)
	GetSAMLFlow(context.Context, *GetSAMLFlowRequest) (*SAMLFlow, error)
	ParseSAMLMetadata(context.Context, *ParseSAMLMetadataRequest) (*ParseSAMLMetadataResponse, error)
	mustEmbedUnimplementedSSOReadyServiceServer()
}

// UnimplementedSSOReadyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSOReadyServiceServer struct {
}

func (UnimplementedSSOReadyServiceServer) GetSAMLRedirectURL(context.Context, *GetSAMLRedirectURLRequest) (*GetSAMLRedirectURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLRedirectURL not implemented")
}
func (UnimplementedSSOReadyServiceServer) RedeemSAMLAccessCode(context.Context, *RedeemSAMLAccessCodeRequest) (*RedeemSAMLAccessCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemSAMLAccessCode not implemented")
}
func (UnimplementedSSOReadyServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedSSOReadyServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSSOReadyServiceServer) SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedSSOReadyServiceServer) Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedSSOReadyServiceServer) GetOnboardingState(context.Context, *GetOnboardingStateRequest) (*GetOnboardingStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardingState not implemented")
}
func (UnimplementedSSOReadyServiceServer) UpdateOnboardingState(context.Context, *UpdateOnboardingStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnboardingState not implemented")
}
func (UnimplementedSSOReadyServiceServer) OnboardingGetSAMLRedirectURL(context.Context, *OnboardingGetSAMLRedirectURLRequest) (*GetSAMLRedirectURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardingGetSAMLRedirectURL not implemented")
}
func (UnimplementedSSOReadyServiceServer) OnboardingRedeemSAMLAccessCode(context.Context, *OnboardingRedeemSAMLAccessCodeRequest) (*RedeemSAMLAccessCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardingRedeemSAMLAccessCode not implemented")
}
func (UnimplementedSSOReadyServiceServer) ListEnvironments(context.Context, *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironments not implemented")
}
func (UnimplementedSSOReadyServiceServer) GetEnvironment(context.Context, *GetEnvironmentRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (UnimplementedSSOReadyServiceServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedSSOReadyServiceServer) UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedSSOReadyServiceServer) ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedSSOReadyServiceServer) GetAPIKey(context.Context, *GetAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (UnimplementedSSOReadyServiceServer) CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedSSOReadyServiceServer) DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedSSOReadyServiceServer) ListSAMLOAuthClients(context.Context, *ListSAMLOAuthClientsRequest) (*ListSAMLOAuthClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLOAuthClients not implemented")
}
func (UnimplementedSSOReadyServiceServer) GetSAMLOAuthClient(context.Context, *GetSAMLOAuthClientRequest) (*SAMLOAuthClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLOAuthClient not implemented")
}
func (UnimplementedSSOReadyServiceServer) CreateSAMLOAuthClient(context.Context, *CreateSAMLOAuthClientRequest) (*SAMLOAuthClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLOAuthClient not implemented")
}
func (UnimplementedSSOReadyServiceServer) DeleteSAMLOAuthClient(context.Context, *DeleteSAMLOAuthClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSAMLOAuthClient not implemented")
}
func (UnimplementedSSOReadyServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedSSOReadyServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedSSOReadyServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedSSOReadyServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedSSOReadyServiceServer) ListSAMLConnections(context.Context, *ListSAMLConnectionsRequest) (*ListSAMLConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLConnections not implemented")
}
func (UnimplementedSSOReadyServiceServer) GetSAMLConnection(context.Context, *GetSAMLConnectionRequest) (*SAMLConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLConnection not implemented")
}
func (UnimplementedSSOReadyServiceServer) CreateSAMLConnection(context.Context, *CreateSAMLConnectionRequest) (*SAMLConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLConnection not implemented")
}
func (UnimplementedSSOReadyServiceServer) UpdateSAMLConnection(context.Context, *UpdateSAMLConnectionRequest) (*SAMLConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLConnection not implemented")
}
func (UnimplementedSSOReadyServiceServer) ListSAMLFlows(context.Context, *ListSAMLFlowsRequest) (*ListSAMLFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLFlows not implemented")
}
func (UnimplementedSSOReadyServiceServer) GetSAMLFlow(context.Context, *GetSAMLFlowRequest) (*SAMLFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLFlow not implemented")
}
func (UnimplementedSSOReadyServiceServer) ParseSAMLMetadata(context.Context, *ParseSAMLMetadataRequest) (*ParseSAMLMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseSAMLMetadata not implemented")
}
func (UnimplementedSSOReadyServiceServer) mustEmbedUnimplementedSSOReadyServiceServer() {}

// UnsafeSSOReadyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOReadyServiceServer will
// result in compilation errors.
type UnsafeSSOReadyServiceServer interface {
	mustEmbedUnimplementedSSOReadyServiceServer()
}

func RegisterSSOReadyServiceServer(s grpc.ServiceRegistrar, srv SSOReadyServiceServer) {
	s.RegisterService(&SSOReadyService_ServiceDesc, srv)
}

func _SSOReadyService_GetSAMLRedirectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLRedirectURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetSAMLRedirectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetSAMLRedirectURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetSAMLRedirectURL(ctx, req.(*GetSAMLRedirectURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_RedeemSAMLAccessCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemSAMLAccessCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).RedeemSAMLAccessCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_RedeemSAMLAccessCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).RedeemSAMLAccessCode(ctx, req.(*RedeemSAMLAccessCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_SignOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoamiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_Whoami_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).Whoami(ctx, req.(*WhoamiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_GetOnboardingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnboardingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetOnboardingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetOnboardingState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetOnboardingState(ctx, req.(*GetOnboardingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_UpdateOnboardingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnboardingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).UpdateOnboardingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_UpdateOnboardingState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).UpdateOnboardingState(ctx, req.(*UpdateOnboardingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_OnboardingGetSAMLRedirectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingGetSAMLRedirectURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).OnboardingGetSAMLRedirectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_OnboardingGetSAMLRedirectURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).OnboardingGetSAMLRedirectURL(ctx, req.(*OnboardingGetSAMLRedirectURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_OnboardingRedeemSAMLAccessCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingRedeemSAMLAccessCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).OnboardingRedeemSAMLAccessCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_OnboardingRedeemSAMLAccessCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).OnboardingRedeemSAMLAccessCode(ctx, req.(*OnboardingRedeemSAMLAccessCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_ListEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).ListEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_ListEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).ListEnvironments(ctx, req.(*ListEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetEnvironment(ctx, req.(*GetEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_UpdateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).UpdateEnvironment(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_ListAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetAPIKey(ctx, req.(*GetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_CreateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).CreateAPIKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_DeleteAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).DeleteAPIKey(ctx, req.(*DeleteAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_ListSAMLOAuthClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLOAuthClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).ListSAMLOAuthClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_ListSAMLOAuthClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).ListSAMLOAuthClients(ctx, req.(*ListSAMLOAuthClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_GetSAMLOAuthClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLOAuthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetSAMLOAuthClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetSAMLOAuthClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetSAMLOAuthClient(ctx, req.(*GetSAMLOAuthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_CreateSAMLOAuthClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSAMLOAuthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).CreateSAMLOAuthClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_CreateSAMLOAuthClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).CreateSAMLOAuthClient(ctx, req.(*CreateSAMLOAuthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_DeleteSAMLOAuthClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSAMLOAuthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).DeleteSAMLOAuthClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_DeleteSAMLOAuthClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).DeleteSAMLOAuthClient(ctx, req.(*DeleteSAMLOAuthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_ListSAMLConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).ListSAMLConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_ListSAMLConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).ListSAMLConnections(ctx, req.(*ListSAMLConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_GetSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetSAMLConnection(ctx, req.(*GetSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_CreateSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).CreateSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_CreateSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).CreateSAMLConnection(ctx, req.(*CreateSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_UpdateSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).UpdateSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_UpdateSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).UpdateSAMLConnection(ctx, req.(*UpdateSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_ListSAMLFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).ListSAMLFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_ListSAMLFlows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).ListSAMLFlows(ctx, req.(*ListSAMLFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_GetSAMLFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).GetSAMLFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_GetSAMLFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).GetSAMLFlow(ctx, req.(*GetSAMLFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOReadyService_ParseSAMLMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseSAMLMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).ParseSAMLMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_ParseSAMLMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).ParseSAMLMetadata(ctx, req.(*ParseSAMLMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOReadyService_ServiceDesc is the grpc.ServiceDesc for SSOReadyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOReadyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ssoready.v1.SSOReadyService",
	HandlerType: (*SSOReadyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSAMLRedirectURL",
			Handler:    _SSOReadyService_GetSAMLRedirectURL_Handler,
		},
		{
			MethodName: "RedeemSAMLAccessCode",
			Handler:    _SSOReadyService_RedeemSAMLAccessCode_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _SSOReadyService_VerifyEmail_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _SSOReadyService_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _SSOReadyService_SignOut_Handler,
		},
		{
			MethodName: "Whoami",
			Handler:    _SSOReadyService_Whoami_Handler,
		},
		{
			MethodName: "GetOnboardingState",
			Handler:    _SSOReadyService_GetOnboardingState_Handler,
		},
		{
			MethodName: "UpdateOnboardingState",
			Handler:    _SSOReadyService_UpdateOnboardingState_Handler,
		},
		{
			MethodName: "OnboardingGetSAMLRedirectURL",
			Handler:    _SSOReadyService_OnboardingGetSAMLRedirectURL_Handler,
		},
		{
			MethodName: "OnboardingRedeemSAMLAccessCode",
			Handler:    _SSOReadyService_OnboardingRedeemSAMLAccessCode_Handler,
		},
		{
			MethodName: "ListEnvironments",
			Handler:    _SSOReadyService_ListEnvironments_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _SSOReadyService_GetEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _SSOReadyService_CreateEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _SSOReadyService_UpdateEnvironment_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _SSOReadyService_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _SSOReadyService_GetAPIKey_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _SSOReadyService_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _SSOReadyService_DeleteAPIKey_Handler,
		},
		{
			MethodName: "ListSAMLOAuthClients",
			Handler:    _SSOReadyService_ListSAMLOAuthClients_Handler,
		},
		{
			MethodName: "GetSAMLOAuthClient",
			Handler:    _SSOReadyService_GetSAMLOAuthClient_Handler,
		},
		{
			MethodName: "CreateSAMLOAuthClient",
			Handler:    _SSOReadyService_CreateSAMLOAuthClient_Handler,
		},
		{
			MethodName: "DeleteSAMLOAuthClient",
			Handler:    _SSOReadyService_DeleteSAMLOAuthClient_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _SSOReadyService_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _SSOReadyService_GetOrganization_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _SSOReadyService_CreateOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _SSOReadyService_UpdateOrganization_Handler,
		},
		{
			MethodName: "ListSAMLConnections",
			Handler:    _SSOReadyService_ListSAMLConnections_Handler,
		},
		{
			MethodName: "GetSAMLConnection",
			Handler:    _SSOReadyService_GetSAMLConnection_Handler,
		},
		{
			MethodName: "CreateSAMLConnection",
			Handler:    _SSOReadyService_CreateSAMLConnection_Handler,
		},
		{
			MethodName: "UpdateSAMLConnection",
			Handler:    _SSOReadyService_UpdateSAMLConnection_Handler,
		},
		{
			MethodName: "ListSAMLFlows",
			Handler:    _SSOReadyService_ListSAMLFlows_Handler,
		},
		{
			MethodName: "GetSAMLFlow",
			Handler:    _SSOReadyService_GetSAMLFlow_Handler,
		},
		{
			MethodName: "ParseSAMLMetadata",
			Handler:    _SSOReadyService_ParseSAMLMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssoready/v1/ssoready.proto",
}
