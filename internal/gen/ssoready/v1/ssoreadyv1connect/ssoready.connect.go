// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ssoready/v1/ssoready.proto

package ssoreadyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssoready/ssoready/internal/gen/ssoready/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SSOReadyServiceName is the fully-qualified name of the SSOReadyService service.
	SSOReadyServiceName = "ssoready.v1.SSOReadyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SSOReadyServiceGetSAMLRedirectURLProcedure is the fully-qualified name of the SSOReadyService's
	// GetSAMLRedirectURL RPC.
	SSOReadyServiceGetSAMLRedirectURLProcedure = "/ssoready.v1.SSOReadyService/GetSAMLRedirectURL"
	// SSOReadyServiceRedeemSAMLAccessCodeProcedure is the fully-qualified name of the SSOReadyService's
	// RedeemSAMLAccessCode RPC.
	SSOReadyServiceRedeemSAMLAccessCodeProcedure = "/ssoready.v1.SSOReadyService/RedeemSAMLAccessCode"
	// SSOReadyServiceListSCIMUsersProcedure is the fully-qualified name of the SSOReadyService's
	// ListSCIMUsers RPC.
	SSOReadyServiceListSCIMUsersProcedure = "/ssoready.v1.SSOReadyService/ListSCIMUsers"
	// SSOReadyServiceGetSCIMUserProcedure is the fully-qualified name of the SSOReadyService's
	// GetSCIMUser RPC.
	SSOReadyServiceGetSCIMUserProcedure = "/ssoready.v1.SSOReadyService/GetSCIMUser"
	// SSOReadyServiceListSCIMGroupsProcedure is the fully-qualified name of the SSOReadyService's
	// ListSCIMGroups RPC.
	SSOReadyServiceListSCIMGroupsProcedure = "/ssoready.v1.SSOReadyService/ListSCIMGroups"
	// SSOReadyServiceGetSCIMGroupProcedure is the fully-qualified name of the SSOReadyService's
	// GetSCIMGroup RPC.
	SSOReadyServiceGetSCIMGroupProcedure = "/ssoready.v1.SSOReadyService/GetSCIMGroup"
	// SSOReadyServiceListOrganizationsProcedure is the fully-qualified name of the SSOReadyService's
	// ListOrganizations RPC.
	SSOReadyServiceListOrganizationsProcedure = "/ssoready.v1.SSOReadyService/ListOrganizations"
	// SSOReadyServiceGetOrganizationProcedure is the fully-qualified name of the SSOReadyService's
	// GetOrganization RPC.
	SSOReadyServiceGetOrganizationProcedure = "/ssoready.v1.SSOReadyService/GetOrganization"
	// SSOReadyServiceCreateOrganizationProcedure is the fully-qualified name of the SSOReadyService's
	// CreateOrganization RPC.
	SSOReadyServiceCreateOrganizationProcedure = "/ssoready.v1.SSOReadyService/CreateOrganization"
	// SSOReadyServiceUpdateOrganizationProcedure is the fully-qualified name of the SSOReadyService's
	// UpdateOrganization RPC.
	SSOReadyServiceUpdateOrganizationProcedure = "/ssoready.v1.SSOReadyService/UpdateOrganization"
	// SSOReadyServiceCreateSetupURLProcedure is the fully-qualified name of the SSOReadyService's
	// CreateSetupURL RPC.
	SSOReadyServiceCreateSetupURLProcedure = "/ssoready.v1.SSOReadyService/CreateSetupURL"
	// SSOReadyServiceListSAMLConnectionsProcedure is the fully-qualified name of the SSOReadyService's
	// ListSAMLConnections RPC.
	SSOReadyServiceListSAMLConnectionsProcedure = "/ssoready.v1.SSOReadyService/ListSAMLConnections"
	// SSOReadyServiceGetSAMLConnectionProcedure is the fully-qualified name of the SSOReadyService's
	// GetSAMLConnection RPC.
	SSOReadyServiceGetSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/GetSAMLConnection"
	// SSOReadyServiceCreateSAMLConnectionProcedure is the fully-qualified name of the SSOReadyService's
	// CreateSAMLConnection RPC.
	SSOReadyServiceCreateSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/CreateSAMLConnection"
	// SSOReadyServiceUpdateSAMLConnectionProcedure is the fully-qualified name of the SSOReadyService's
	// UpdateSAMLConnection RPC.
	SSOReadyServiceUpdateSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/UpdateSAMLConnection"
	// SSOReadyServiceListSCIMDirectoriesProcedure is the fully-qualified name of the SSOReadyService's
	// ListSCIMDirectories RPC.
	SSOReadyServiceListSCIMDirectoriesProcedure = "/ssoready.v1.SSOReadyService/ListSCIMDirectories"
	// SSOReadyServiceGetSCIMDirectoryProcedure is the fully-qualified name of the SSOReadyService's
	// GetSCIMDirectory RPC.
	SSOReadyServiceGetSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/GetSCIMDirectory"
	// SSOReadyServiceCreateSCIMDirectoryProcedure is the fully-qualified name of the SSOReadyService's
	// CreateSCIMDirectory RPC.
	SSOReadyServiceCreateSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/CreateSCIMDirectory"
	// SSOReadyServiceUpdateSCIMDirectoryProcedure is the fully-qualified name of the SSOReadyService's
	// UpdateSCIMDirectory RPC.
	SSOReadyServiceUpdateSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/UpdateSCIMDirectory"
	// SSOReadyServiceRotateSCIMDirectoryBearerTokenProcedure is the fully-qualified name of the
	// SSOReadyService's RotateSCIMDirectoryBearerToken RPC.
	SSOReadyServiceRotateSCIMDirectoryBearerTokenProcedure = "/ssoready.v1.SSOReadyService/RotateSCIMDirectoryBearerToken"
	// SSOReadyServiceVerifyEmailProcedure is the fully-qualified name of the SSOReadyService's
	// VerifyEmail RPC.
	SSOReadyServiceVerifyEmailProcedure = "/ssoready.v1.SSOReadyService/VerifyEmail"
	// SSOReadyServiceSignInProcedure is the fully-qualified name of the SSOReadyService's SignIn RPC.
	SSOReadyServiceSignInProcedure = "/ssoready.v1.SSOReadyService/SignIn"
	// SSOReadyServiceSignOutProcedure is the fully-qualified name of the SSOReadyService's SignOut RPC.
	SSOReadyServiceSignOutProcedure = "/ssoready.v1.SSOReadyService/SignOut"
	// SSOReadyServiceWhoamiProcedure is the fully-qualified name of the SSOReadyService's Whoami RPC.
	SSOReadyServiceWhoamiProcedure = "/ssoready.v1.SSOReadyService/Whoami"
	// SSOReadyServiceGetOnboardingStateProcedure is the fully-qualified name of the SSOReadyService's
	// GetOnboardingState RPC.
	SSOReadyServiceGetOnboardingStateProcedure = "/ssoready.v1.SSOReadyService/GetOnboardingState"
	// SSOReadyServiceUpdateOnboardingStateProcedure is the fully-qualified name of the
	// SSOReadyService's UpdateOnboardingState RPC.
	SSOReadyServiceUpdateOnboardingStateProcedure = "/ssoready.v1.SSOReadyService/UpdateOnboardingState"
	// SSOReadyServiceOnboardingGetSAMLRedirectURLProcedure is the fully-qualified name of the
	// SSOReadyService's OnboardingGetSAMLRedirectURL RPC.
	SSOReadyServiceOnboardingGetSAMLRedirectURLProcedure = "/ssoready.v1.SSOReadyService/OnboardingGetSAMLRedirectURL"
	// SSOReadyServiceOnboardingRedeemSAMLAccessCodeProcedure is the fully-qualified name of the
	// SSOReadyService's OnboardingRedeemSAMLAccessCode RPC.
	SSOReadyServiceOnboardingRedeemSAMLAccessCodeProcedure = "/ssoready.v1.SSOReadyService/OnboardingRedeemSAMLAccessCode"
	// SSOReadyServiceGetStripeCheckoutURLProcedure is the fully-qualified name of the SSOReadyService's
	// GetStripeCheckoutURL RPC.
	SSOReadyServiceGetStripeCheckoutURLProcedure = "/ssoready.v1.SSOReadyService/GetStripeCheckoutURL"
	// SSOReadyServiceRedeemStripeCheckoutProcedure is the fully-qualified name of the SSOReadyService's
	// RedeemStripeCheckout RPC.
	SSOReadyServiceRedeemStripeCheckoutProcedure = "/ssoready.v1.SSOReadyService/RedeemStripeCheckout"
	// SSOReadyServiceGetStripeBillingPortalURLProcedure is the fully-qualified name of the
	// SSOReadyService's GetStripeBillingPortalURL RPC.
	SSOReadyServiceGetStripeBillingPortalURLProcedure = "/ssoready.v1.SSOReadyService/GetStripeBillingPortalURL"
	// SSOReadyServiceGetAppOrganizationProcedure is the fully-qualified name of the SSOReadyService's
	// GetAppOrganization RPC.
	SSOReadyServiceGetAppOrganizationProcedure = "/ssoready.v1.SSOReadyService/GetAppOrganization"
	// SSOReadyServiceListAppUsersProcedure is the fully-qualified name of the SSOReadyService's
	// ListAppUsers RPC.
	SSOReadyServiceListAppUsersProcedure = "/ssoready.v1.SSOReadyService/ListAppUsers"
	// SSOReadyServiceListEnvironmentsProcedure is the fully-qualified name of the SSOReadyService's
	// ListEnvironments RPC.
	SSOReadyServiceListEnvironmentsProcedure = "/ssoready.v1.SSOReadyService/ListEnvironments"
	// SSOReadyServiceGetEnvironmentProcedure is the fully-qualified name of the SSOReadyService's
	// GetEnvironment RPC.
	SSOReadyServiceGetEnvironmentProcedure = "/ssoready.v1.SSOReadyService/GetEnvironment"
	// SSOReadyServiceCreateEnvironmentProcedure is the fully-qualified name of the SSOReadyService's
	// CreateEnvironment RPC.
	SSOReadyServiceCreateEnvironmentProcedure = "/ssoready.v1.SSOReadyService/CreateEnvironment"
	// SSOReadyServiceUpdateEnvironmentProcedure is the fully-qualified name of the SSOReadyService's
	// UpdateEnvironment RPC.
	SSOReadyServiceUpdateEnvironmentProcedure = "/ssoready.v1.SSOReadyService/UpdateEnvironment"
	// SSOReadyServiceListAPIKeysProcedure is the fully-qualified name of the SSOReadyService's
	// ListAPIKeys RPC.
	SSOReadyServiceListAPIKeysProcedure = "/ssoready.v1.SSOReadyService/ListAPIKeys"
	// SSOReadyServiceGetAPIKeyProcedure is the fully-qualified name of the SSOReadyService's GetAPIKey
	// RPC.
	SSOReadyServiceGetAPIKeyProcedure = "/ssoready.v1.SSOReadyService/GetAPIKey"
	// SSOReadyServiceCreateAPIKeyProcedure is the fully-qualified name of the SSOReadyService's
	// CreateAPIKey RPC.
	SSOReadyServiceCreateAPIKeyProcedure = "/ssoready.v1.SSOReadyService/CreateAPIKey"
	// SSOReadyServiceDeleteAPIKeyProcedure is the fully-qualified name of the SSOReadyService's
	// DeleteAPIKey RPC.
	SSOReadyServiceDeleteAPIKeyProcedure = "/ssoready.v1.SSOReadyService/DeleteAPIKey"
	// SSOReadyServiceListSAMLOAuthClientsProcedure is the fully-qualified name of the SSOReadyService's
	// ListSAMLOAuthClients RPC.
	SSOReadyServiceListSAMLOAuthClientsProcedure = "/ssoready.v1.SSOReadyService/ListSAMLOAuthClients"
	// SSOReadyServiceGetSAMLOAuthClientProcedure is the fully-qualified name of the SSOReadyService's
	// GetSAMLOAuthClient RPC.
	SSOReadyServiceGetSAMLOAuthClientProcedure = "/ssoready.v1.SSOReadyService/GetSAMLOAuthClient"
	// SSOReadyServiceCreateSAMLOAuthClientProcedure is the fully-qualified name of the
	// SSOReadyService's CreateSAMLOAuthClient RPC.
	SSOReadyServiceCreateSAMLOAuthClientProcedure = "/ssoready.v1.SSOReadyService/CreateSAMLOAuthClient"
	// SSOReadyServiceDeleteSAMLOAuthClientProcedure is the fully-qualified name of the
	// SSOReadyService's DeleteSAMLOAuthClient RPC.
	SSOReadyServiceDeleteSAMLOAuthClientProcedure = "/ssoready.v1.SSOReadyService/DeleteSAMLOAuthClient"
	// SSOReadyServiceAppListOrganizationsProcedure is the fully-qualified name of the SSOReadyService's
	// AppListOrganizations RPC.
	SSOReadyServiceAppListOrganizationsProcedure = "/ssoready.v1.SSOReadyService/AppListOrganizations"
	// SSOReadyServiceAppGetOrganizationProcedure is the fully-qualified name of the SSOReadyService's
	// AppGetOrganization RPC.
	SSOReadyServiceAppGetOrganizationProcedure = "/ssoready.v1.SSOReadyService/AppGetOrganization"
	// SSOReadyServiceAppCreateOrganizationProcedure is the fully-qualified name of the
	// SSOReadyService's AppCreateOrganization RPC.
	SSOReadyServiceAppCreateOrganizationProcedure = "/ssoready.v1.SSOReadyService/AppCreateOrganization"
	// SSOReadyServiceAppUpdateOrganizationProcedure is the fully-qualified name of the
	// SSOReadyService's AppUpdateOrganization RPC.
	SSOReadyServiceAppUpdateOrganizationProcedure = "/ssoready.v1.SSOReadyService/AppUpdateOrganization"
	// SSOReadyServiceAppCreateAdminSetupURLProcedure is the fully-qualified name of the
	// SSOReadyService's AppCreateAdminSetupURL RPC.
	SSOReadyServiceAppCreateAdminSetupURLProcedure = "/ssoready.v1.SSOReadyService/AppCreateAdminSetupURL"
	// SSOReadyServiceAppListSAMLConnectionsProcedure is the fully-qualified name of the
	// SSOReadyService's AppListSAMLConnections RPC.
	SSOReadyServiceAppListSAMLConnectionsProcedure = "/ssoready.v1.SSOReadyService/AppListSAMLConnections"
	// SSOReadyServiceAppGetSAMLConnectionProcedure is the fully-qualified name of the SSOReadyService's
	// AppGetSAMLConnection RPC.
	SSOReadyServiceAppGetSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/AppGetSAMLConnection"
	// SSOReadyServiceAppCreateSAMLConnectionProcedure is the fully-qualified name of the
	// SSOReadyService's AppCreateSAMLConnection RPC.
	SSOReadyServiceAppCreateSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/AppCreateSAMLConnection"
	// SSOReadyServiceAppUpdateSAMLConnectionProcedure is the fully-qualified name of the
	// SSOReadyService's AppUpdateSAMLConnection RPC.
	SSOReadyServiceAppUpdateSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/AppUpdateSAMLConnection"
	// SSOReadyServiceAppListSAMLFlowsProcedure is the fully-qualified name of the SSOReadyService's
	// AppListSAMLFlows RPC.
	SSOReadyServiceAppListSAMLFlowsProcedure = "/ssoready.v1.SSOReadyService/AppListSAMLFlows"
	// SSOReadyServiceAppGetSAMLFlowProcedure is the fully-qualified name of the SSOReadyService's
	// AppGetSAMLFlow RPC.
	SSOReadyServiceAppGetSAMLFlowProcedure = "/ssoready.v1.SSOReadyService/AppGetSAMLFlow"
	// SSOReadyServiceParseSAMLMetadataProcedure is the fully-qualified name of the SSOReadyService's
	// ParseSAMLMetadata RPC.
	SSOReadyServiceParseSAMLMetadataProcedure = "/ssoready.v1.SSOReadyService/ParseSAMLMetadata"
	// SSOReadyServiceAppListSCIMDirectoriesProcedure is the fully-qualified name of the
	// SSOReadyService's AppListSCIMDirectories RPC.
	SSOReadyServiceAppListSCIMDirectoriesProcedure = "/ssoready.v1.SSOReadyService/AppListSCIMDirectories"
	// SSOReadyServiceAppGetSCIMDirectoryProcedure is the fully-qualified name of the SSOReadyService's
	// AppGetSCIMDirectory RPC.
	SSOReadyServiceAppGetSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/AppGetSCIMDirectory"
	// SSOReadyServiceAppCreateSCIMDirectoryProcedure is the fully-qualified name of the
	// SSOReadyService's AppCreateSCIMDirectory RPC.
	SSOReadyServiceAppCreateSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/AppCreateSCIMDirectory"
	// SSOReadyServiceAppUpdateSCIMDirectoryProcedure is the fully-qualified name of the
	// SSOReadyService's AppUpdateSCIMDirectory RPC.
	SSOReadyServiceAppUpdateSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/AppUpdateSCIMDirectory"
	// SSOReadyServiceAppRotateSCIMDirectoryBearerTokenProcedure is the fully-qualified name of the
	// SSOReadyService's AppRotateSCIMDirectoryBearerToken RPC.
	SSOReadyServiceAppRotateSCIMDirectoryBearerTokenProcedure = "/ssoready.v1.SSOReadyService/AppRotateSCIMDirectoryBearerToken"
	// SSOReadyServiceAppListSCIMUsersProcedure is the fully-qualified name of the SSOReadyService's
	// AppListSCIMUsers RPC.
	SSOReadyServiceAppListSCIMUsersProcedure = "/ssoready.v1.SSOReadyService/AppListSCIMUsers"
	// SSOReadyServiceAppGetSCIMUserProcedure is the fully-qualified name of the SSOReadyService's
	// AppGetSCIMUser RPC.
	SSOReadyServiceAppGetSCIMUserProcedure = "/ssoready.v1.SSOReadyService/AppGetSCIMUser"
	// SSOReadyServiceAppListSCIMGroupsProcedure is the fully-qualified name of the SSOReadyService's
	// AppListSCIMGroups RPC.
	SSOReadyServiceAppListSCIMGroupsProcedure = "/ssoready.v1.SSOReadyService/AppListSCIMGroups"
	// SSOReadyServiceAppGetSCIMGroupProcedure is the fully-qualified name of the SSOReadyService's
	// AppGetSCIMGroup RPC.
	SSOReadyServiceAppGetSCIMGroupProcedure = "/ssoready.v1.SSOReadyService/AppGetSCIMGroup"
	// SSOReadyServiceAdminRedeemOneTimeTokenProcedure is the fully-qualified name of the
	// SSOReadyService's AdminRedeemOneTimeToken RPC.
	SSOReadyServiceAdminRedeemOneTimeTokenProcedure = "/ssoready.v1.SSOReadyService/AdminRedeemOneTimeToken"
	// SSOReadyServiceAdminWhoamiProcedure is the fully-qualified name of the SSOReadyService's
	// AdminWhoami RPC.
	SSOReadyServiceAdminWhoamiProcedure = "/ssoready.v1.SSOReadyService/AdminWhoami"
	// SSOReadyServiceAdminListSAMLConnectionsProcedure is the fully-qualified name of the
	// SSOReadyService's AdminListSAMLConnections RPC.
	SSOReadyServiceAdminListSAMLConnectionsProcedure = "/ssoready.v1.SSOReadyService/AdminListSAMLConnections"
	// SSOReadyServiceAdminGetSAMLConnectionProcedure is the fully-qualified name of the
	// SSOReadyService's AdminGetSAMLConnection RPC.
	SSOReadyServiceAdminGetSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/AdminGetSAMLConnection"
	// SSOReadyServiceAdminCreateSAMLConnectionProcedure is the fully-qualified name of the
	// SSOReadyService's AdminCreateSAMLConnection RPC.
	SSOReadyServiceAdminCreateSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/AdminCreateSAMLConnection"
	// SSOReadyServiceAdminUpdateSAMLConnectionProcedure is the fully-qualified name of the
	// SSOReadyService's AdminUpdateSAMLConnection RPC.
	SSOReadyServiceAdminUpdateSAMLConnectionProcedure = "/ssoready.v1.SSOReadyService/AdminUpdateSAMLConnection"
	// SSOReadyServiceAdminParseSAMLMetadataProcedure is the fully-qualified name of the
	// SSOReadyService's AdminParseSAMLMetadata RPC.
	SSOReadyServiceAdminParseSAMLMetadataProcedure = "/ssoready.v1.SSOReadyService/AdminParseSAMLMetadata"
	// SSOReadyServiceAdminListSCIMDirectoriesProcedure is the fully-qualified name of the
	// SSOReadyService's AdminListSCIMDirectories RPC.
	SSOReadyServiceAdminListSCIMDirectoriesProcedure = "/ssoready.v1.SSOReadyService/AdminListSCIMDirectories"
	// SSOReadyServiceAdminGetSCIMDirectoryProcedure is the fully-qualified name of the
	// SSOReadyService's AdminGetSCIMDirectory RPC.
	SSOReadyServiceAdminGetSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/AdminGetSCIMDirectory"
	// SSOReadyServiceAdminCreateSCIMDirectoryProcedure is the fully-qualified name of the
	// SSOReadyService's AdminCreateSCIMDirectory RPC.
	SSOReadyServiceAdminCreateSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/AdminCreateSCIMDirectory"
	// SSOReadyServiceAdminUpdateSCIMDirectoryProcedure is the fully-qualified name of the
	// SSOReadyService's AdminUpdateSCIMDirectory RPC.
	SSOReadyServiceAdminUpdateSCIMDirectoryProcedure = "/ssoready.v1.SSOReadyService/AdminUpdateSCIMDirectory"
	// SSOReadyServiceAdminRotateSCIMDirectoryBearerTokenProcedure is the fully-qualified name of the
	// SSOReadyService's AdminRotateSCIMDirectoryBearerToken RPC.
	SSOReadyServiceAdminRotateSCIMDirectoryBearerTokenProcedure = "/ssoready.v1.SSOReadyService/AdminRotateSCIMDirectoryBearerToken"
)

// SSOReadyServiceClient is a client for the ssoready.v1.SSOReadyService service.
type SSOReadyServiceClient interface {
	// Gets a SAML initiation URL to redirect your users to.
	GetSAMLRedirectURL(context.Context, *connect.Request[v1.GetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error)
	// Exchanges a SAML access code for details about your user's SAML login details.
	RedeemSAMLAccessCode(context.Context, *connect.Request[v1.RedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error)
	// Gets a list of SCIM users in a SCIM directory.
	ListSCIMUsers(context.Context, *connect.Request[v1.ListSCIMUsersRequest]) (*connect.Response[v1.ListSCIMUsersResponse], error)
	// Gets a SCIM user.
	GetSCIMUser(context.Context, *connect.Request[v1.GetSCIMUserRequest]) (*connect.Response[v1.GetSCIMUserResponse], error)
	// Gets a list of SCIM groups in a SCIM directory.
	ListSCIMGroups(context.Context, *connect.Request[v1.ListSCIMGroupsRequest]) (*connect.Response[v1.ListSCIMGroupsResponse], error)
	// Gets a SCIM group in a SCIM directory.
	GetSCIMGroup(context.Context, *connect.Request[v1.GetSCIMGroupRequest]) (*connect.Response[v1.GetSCIMGroupResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Gets an organization.
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// Creates an organization.
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// Updates an organization.
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// Creates a short-lived self-serve setup URL that you can send to your customer.
	//
	// Setup URLs let your customer configure their SAML settings, SCIM settings, or both.
	CreateSetupURL(context.Context, *connect.Request[v1.CreateSetupURLRequest]) (*connect.Response[v1.CreateSetupURLResponse], error)
	// Lists SAML connections in an organization.
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	// Gets a SAML connection.
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	// Creates a SAML connection.
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	// Updates a SAML connection.
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	// Gets a list of SCIM directories in an organization.
	ListSCIMDirectories(context.Context, *connect.Request[v1.ListSCIMDirectoriesRequest]) (*connect.Response[v1.ListSCIMDirectoriesResponse], error)
	// Gets a SCIM directory.
	GetSCIMDirectory(context.Context, *connect.Request[v1.GetSCIMDirectoryRequest]) (*connect.Response[v1.GetSCIMDirectoryResponse], error)
	// Creates a SCIM directory.
	CreateSCIMDirectory(context.Context, *connect.Request[v1.CreateSCIMDirectoryRequest]) (*connect.Response[v1.CreateSCIMDirectoryResponse], error)
	// Updates a SCIM directory.
	UpdateSCIMDirectory(context.Context, *connect.Request[v1.UpdateSCIMDirectoryRequest]) (*connect.Response[v1.UpdateSCIMDirectoryResponse], error)
	// Rotates a SCIM directory's bearer token.
	//
	// Every SCIM directory has a bearer token that SSOReady uses to authenticate requests sent from your customer's
	// Identity Provider. These bearer tokens are assigned by SSOReady, and are secret. Newly-created SCIM directories do
	// not have any bearer token at all; you must use this endpoint to get an initial value.
	//
	// Rotating a SCIM directory bearer token immediately invalidates the previous bearer token, if any. Your customer
	// will need to update their SCIM configuration with the new value to make SCIM syncing work again.
	//
	// SSOReady only stores the hash of these bearer tokens. If your customer has lost their copy, you must use this
	// endpoint to generate a new one.
	RotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.RotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.RotateSCIMDirectoryBearerTokenResponse], error)
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[emptypb.Empty], error)
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error)
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	GetOnboardingState(context.Context, *connect.Request[v1.GetOnboardingStateRequest]) (*connect.Response[v1.GetOnboardingStateResponse], error)
	UpdateOnboardingState(context.Context, *connect.Request[v1.UpdateOnboardingStateRequest]) (*connect.Response[emptypb.Empty], error)
	OnboardingGetSAMLRedirectURL(context.Context, *connect.Request[v1.OnboardingGetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error)
	OnboardingRedeemSAMLAccessCode(context.Context, *connect.Request[v1.OnboardingRedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error)
	GetStripeCheckoutURL(context.Context, *connect.Request[v1.GetStripeCheckoutURLRequest]) (*connect.Response[v1.GetStripeCheckoutURLResponse], error)
	RedeemStripeCheckout(context.Context, *connect.Request[v1.RedeemStripeCheckoutRequest]) (*connect.Response[v1.RedeemStripeCheckoutResponse], error)
	GetStripeBillingPortalURL(context.Context, *connect.Request[v1.GetStripeBillingPortalURLRequest]) (*connect.Response[v1.GetStripeBillingPortalURLResponse], error)
	GetAppOrganization(context.Context, *connect.Request[v1.GetAppOrganizationRequest]) (*connect.Response[v1.GetAppOrganizationResponse], error)
	ListAppUsers(context.Context, *connect.Request[v1.ListAppUsersRequest]) (*connect.Response[v1.ListAppUsersResponse], error)
	ListEnvironments(context.Context, *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error)
	GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.Environment], error)
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.Environment], error)
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.Environment], error)
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.APIKey], error)
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.APIKey], error)
	DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[emptypb.Empty], error)
	ListSAMLOAuthClients(context.Context, *connect.Request[v1.ListSAMLOAuthClientsRequest]) (*connect.Response[v1.ListSAMLOAuthClientsResponse], error)
	GetSAMLOAuthClient(context.Context, *connect.Request[v1.GetSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error)
	CreateSAMLOAuthClient(context.Context, *connect.Request[v1.CreateSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error)
	DeleteSAMLOAuthClient(context.Context, *connect.Request[v1.DeleteSAMLOAuthClientRequest]) (*connect.Response[emptypb.Empty], error)
	AppListOrganizations(context.Context, *connect.Request[v1.AppListOrganizationsRequest]) (*connect.Response[v1.AppListOrganizationsResponse], error)
	AppGetOrganization(context.Context, *connect.Request[v1.AppGetOrganizationRequest]) (*connect.Response[v1.Organization], error)
	AppCreateOrganization(context.Context, *connect.Request[v1.AppCreateOrganizationRequest]) (*connect.Response[v1.Organization], error)
	AppUpdateOrganization(context.Context, *connect.Request[v1.AppUpdateOrganizationRequest]) (*connect.Response[v1.Organization], error)
	AppCreateAdminSetupURL(context.Context, *connect.Request[v1.AppCreateAdminSetupURLRequest]) (*connect.Response[v1.AppCreateAdminSetupURLResponse], error)
	AppListSAMLConnections(context.Context, *connect.Request[v1.AppListSAMLConnectionsRequest]) (*connect.Response[v1.AppListSAMLConnectionsResponse], error)
	AppGetSAMLConnection(context.Context, *connect.Request[v1.AppGetSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error)
	AppCreateSAMLConnection(context.Context, *connect.Request[v1.AppCreateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error)
	AppUpdateSAMLConnection(context.Context, *connect.Request[v1.AppUpdateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error)
	AppListSAMLFlows(context.Context, *connect.Request[v1.AppListSAMLFlowsRequest]) (*connect.Response[v1.AppListSAMLFlowsResponse], error)
	AppGetSAMLFlow(context.Context, *connect.Request[v1.AppGetSAMLFlowRequest]) (*connect.Response[v1.SAMLFlow], error)
	ParseSAMLMetadata(context.Context, *connect.Request[v1.ParseSAMLMetadataRequest]) (*connect.Response[v1.ParseSAMLMetadataResponse], error)
	AppListSCIMDirectories(context.Context, *connect.Request[v1.AppListSCIMDirectoriesRequest]) (*connect.Response[v1.AppListSCIMDirectoriesResponse], error)
	AppGetSCIMDirectory(context.Context, *connect.Request[v1.AppGetSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error)
	AppCreateSCIMDirectory(context.Context, *connect.Request[v1.AppCreateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error)
	AppUpdateSCIMDirectory(context.Context, *connect.Request[v1.AppUpdateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error)
	AppRotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.AppRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AppRotateSCIMDirectoryBearerTokenResponse], error)
	AppListSCIMUsers(context.Context, *connect.Request[v1.AppListSCIMUsersRequest]) (*connect.Response[v1.AppListSCIMUsersResponse], error)
	AppGetSCIMUser(context.Context, *connect.Request[v1.AppGetSCIMUserRequest]) (*connect.Response[v1.SCIMUser], error)
	AppListSCIMGroups(context.Context, *connect.Request[v1.AppListSCIMGroupsRequest]) (*connect.Response[v1.AppListSCIMGroupsResponse], error)
	AppGetSCIMGroup(context.Context, *connect.Request[v1.AppGetSCIMGroupRequest]) (*connect.Response[v1.SCIMGroup], error)
	AdminRedeemOneTimeToken(context.Context, *connect.Request[v1.AdminRedeemOneTimeTokenRequest]) (*connect.Response[v1.AdminRedeemOneTimeTokenResponse], error)
	AdminWhoami(context.Context, *connect.Request[v1.AdminWhoamiRequest]) (*connect.Response[v1.AdminWhoamiResponse], error)
	AdminListSAMLConnections(context.Context, *connect.Request[v1.AdminListSAMLConnectionsRequest]) (*connect.Response[v1.AdminListSAMLConnectionsResponse], error)
	AdminGetSAMLConnection(context.Context, *connect.Request[v1.AdminGetSAMLConnectionRequest]) (*connect.Response[v1.AdminGetSAMLConnectionResponse], error)
	AdminCreateSAMLConnection(context.Context, *connect.Request[v1.AdminCreateSAMLConnectionRequest]) (*connect.Response[v1.AdminCreateSAMLConnectionResponse], error)
	AdminUpdateSAMLConnection(context.Context, *connect.Request[v1.AdminUpdateSAMLConnectionRequest]) (*connect.Response[v1.AdminUpdateSAMLConnectionResponse], error)
	AdminParseSAMLMetadata(context.Context, *connect.Request[v1.AdminParseSAMLMetadataRequest]) (*connect.Response[v1.AdminParseSAMLMetadataResponse], error)
	AdminListSCIMDirectories(context.Context, *connect.Request[v1.AdminListSCIMDirectoriesRequest]) (*connect.Response[v1.AdminListSCIMDirectoriesResponse], error)
	AdminGetSCIMDirectory(context.Context, *connect.Request[v1.AdminGetSCIMDirectoryRequest]) (*connect.Response[v1.AdminGetSCIMDirectoryResponse], error)
	AdminCreateSCIMDirectory(context.Context, *connect.Request[v1.AdminCreateSCIMDirectoryRequest]) (*connect.Response[v1.AdminCreateSCIMDirectoryResponse], error)
	AdminUpdateSCIMDirectory(context.Context, *connect.Request[v1.AdminUpdateSCIMDirectoryRequest]) (*connect.Response[v1.AdminUpdateSCIMDirectoryResponse], error)
	AdminRotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.AdminRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AdminRotateSCIMDirectoryBearerTokenResponse], error)
}

// NewSSOReadyServiceClient constructs a client for the ssoready.v1.SSOReadyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSSOReadyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SSOReadyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sSOReadyServiceClient{
		getSAMLRedirectURL: connect.NewClient[v1.GetSAMLRedirectURLRequest, v1.GetSAMLRedirectURLResponse](
			httpClient,
			baseURL+SSOReadyServiceGetSAMLRedirectURLProcedure,
			opts...,
		),
		redeemSAMLAccessCode: connect.NewClient[v1.RedeemSAMLAccessCodeRequest, v1.RedeemSAMLAccessCodeResponse](
			httpClient,
			baseURL+SSOReadyServiceRedeemSAMLAccessCodeProcedure,
			opts...,
		),
		listSCIMUsers: connect.NewClient[v1.ListSCIMUsersRequest, v1.ListSCIMUsersResponse](
			httpClient,
			baseURL+SSOReadyServiceListSCIMUsersProcedure,
			opts...,
		),
		getSCIMUser: connect.NewClient[v1.GetSCIMUserRequest, v1.GetSCIMUserResponse](
			httpClient,
			baseURL+SSOReadyServiceGetSCIMUserProcedure,
			opts...,
		),
		listSCIMGroups: connect.NewClient[v1.ListSCIMGroupsRequest, v1.ListSCIMGroupsResponse](
			httpClient,
			baseURL+SSOReadyServiceListSCIMGroupsProcedure,
			opts...,
		),
		getSCIMGroup: connect.NewClient[v1.GetSCIMGroupRequest, v1.GetSCIMGroupResponse](
			httpClient,
			baseURL+SSOReadyServiceGetSCIMGroupProcedure,
			opts...,
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+SSOReadyServiceListOrganizationsProcedure,
			opts...,
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+SSOReadyServiceGetOrganizationProcedure,
			opts...,
		),
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+SSOReadyServiceCreateOrganizationProcedure,
			opts...,
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+SSOReadyServiceUpdateOrganizationProcedure,
			opts...,
		),
		createSetupURL: connect.NewClient[v1.CreateSetupURLRequest, v1.CreateSetupURLResponse](
			httpClient,
			baseURL+SSOReadyServiceCreateSetupURLProcedure,
			opts...,
		),
		listSAMLConnections: connect.NewClient[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse](
			httpClient,
			baseURL+SSOReadyServiceListSAMLConnectionsProcedure,
			opts...,
		),
		getSAMLConnection: connect.NewClient[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse](
			httpClient,
			baseURL+SSOReadyServiceGetSAMLConnectionProcedure,
			opts...,
		),
		createSAMLConnection: connect.NewClient[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse](
			httpClient,
			baseURL+SSOReadyServiceCreateSAMLConnectionProcedure,
			opts...,
		),
		updateSAMLConnection: connect.NewClient[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse](
			httpClient,
			baseURL+SSOReadyServiceUpdateSAMLConnectionProcedure,
			opts...,
		),
		listSCIMDirectories: connect.NewClient[v1.ListSCIMDirectoriesRequest, v1.ListSCIMDirectoriesResponse](
			httpClient,
			baseURL+SSOReadyServiceListSCIMDirectoriesProcedure,
			opts...,
		),
		getSCIMDirectory: connect.NewClient[v1.GetSCIMDirectoryRequest, v1.GetSCIMDirectoryResponse](
			httpClient,
			baseURL+SSOReadyServiceGetSCIMDirectoryProcedure,
			opts...,
		),
		createSCIMDirectory: connect.NewClient[v1.CreateSCIMDirectoryRequest, v1.CreateSCIMDirectoryResponse](
			httpClient,
			baseURL+SSOReadyServiceCreateSCIMDirectoryProcedure,
			opts...,
		),
		updateSCIMDirectory: connect.NewClient[v1.UpdateSCIMDirectoryRequest, v1.UpdateSCIMDirectoryResponse](
			httpClient,
			baseURL+SSOReadyServiceUpdateSCIMDirectoryProcedure,
			opts...,
		),
		rotateSCIMDirectoryBearerToken: connect.NewClient[v1.RotateSCIMDirectoryBearerTokenRequest, v1.RotateSCIMDirectoryBearerTokenResponse](
			httpClient,
			baseURL+SSOReadyServiceRotateSCIMDirectoryBearerTokenProcedure,
			opts...,
		),
		verifyEmail: connect.NewClient[v1.VerifyEmailRequest, emptypb.Empty](
			httpClient,
			baseURL+SSOReadyServiceVerifyEmailProcedure,
			opts...,
		),
		signIn: connect.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+SSOReadyServiceSignInProcedure,
			opts...,
		),
		signOut: connect.NewClient[v1.SignOutRequest, v1.SignOutResponse](
			httpClient,
			baseURL+SSOReadyServiceSignOutProcedure,
			opts...,
		),
		whoami: connect.NewClient[v1.WhoamiRequest, v1.WhoamiResponse](
			httpClient,
			baseURL+SSOReadyServiceWhoamiProcedure,
			opts...,
		),
		getOnboardingState: connect.NewClient[v1.GetOnboardingStateRequest, v1.GetOnboardingStateResponse](
			httpClient,
			baseURL+SSOReadyServiceGetOnboardingStateProcedure,
			opts...,
		),
		updateOnboardingState: connect.NewClient[v1.UpdateOnboardingStateRequest, emptypb.Empty](
			httpClient,
			baseURL+SSOReadyServiceUpdateOnboardingStateProcedure,
			opts...,
		),
		onboardingGetSAMLRedirectURL: connect.NewClient[v1.OnboardingGetSAMLRedirectURLRequest, v1.GetSAMLRedirectURLResponse](
			httpClient,
			baseURL+SSOReadyServiceOnboardingGetSAMLRedirectURLProcedure,
			opts...,
		),
		onboardingRedeemSAMLAccessCode: connect.NewClient[v1.OnboardingRedeemSAMLAccessCodeRequest, v1.RedeemSAMLAccessCodeResponse](
			httpClient,
			baseURL+SSOReadyServiceOnboardingRedeemSAMLAccessCodeProcedure,
			opts...,
		),
		getStripeCheckoutURL: connect.NewClient[v1.GetStripeCheckoutURLRequest, v1.GetStripeCheckoutURLResponse](
			httpClient,
			baseURL+SSOReadyServiceGetStripeCheckoutURLProcedure,
			opts...,
		),
		redeemStripeCheckout: connect.NewClient[v1.RedeemStripeCheckoutRequest, v1.RedeemStripeCheckoutResponse](
			httpClient,
			baseURL+SSOReadyServiceRedeemStripeCheckoutProcedure,
			opts...,
		),
		getStripeBillingPortalURL: connect.NewClient[v1.GetStripeBillingPortalURLRequest, v1.GetStripeBillingPortalURLResponse](
			httpClient,
			baseURL+SSOReadyServiceGetStripeBillingPortalURLProcedure,
			opts...,
		),
		getAppOrganization: connect.NewClient[v1.GetAppOrganizationRequest, v1.GetAppOrganizationResponse](
			httpClient,
			baseURL+SSOReadyServiceGetAppOrganizationProcedure,
			opts...,
		),
		listAppUsers: connect.NewClient[v1.ListAppUsersRequest, v1.ListAppUsersResponse](
			httpClient,
			baseURL+SSOReadyServiceListAppUsersProcedure,
			opts...,
		),
		listEnvironments: connect.NewClient[v1.ListEnvironmentsRequest, v1.ListEnvironmentsResponse](
			httpClient,
			baseURL+SSOReadyServiceListEnvironmentsProcedure,
			opts...,
		),
		getEnvironment: connect.NewClient[v1.GetEnvironmentRequest, v1.Environment](
			httpClient,
			baseURL+SSOReadyServiceGetEnvironmentProcedure,
			opts...,
		),
		createEnvironment: connect.NewClient[v1.CreateEnvironmentRequest, v1.Environment](
			httpClient,
			baseURL+SSOReadyServiceCreateEnvironmentProcedure,
			opts...,
		),
		updateEnvironment: connect.NewClient[v1.UpdateEnvironmentRequest, v1.Environment](
			httpClient,
			baseURL+SSOReadyServiceUpdateEnvironmentProcedure,
			opts...,
		),
		listAPIKeys: connect.NewClient[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse](
			httpClient,
			baseURL+SSOReadyServiceListAPIKeysProcedure,
			opts...,
		),
		getAPIKey: connect.NewClient[v1.GetAPIKeyRequest, v1.APIKey](
			httpClient,
			baseURL+SSOReadyServiceGetAPIKeyProcedure,
			opts...,
		),
		createAPIKey: connect.NewClient[v1.CreateAPIKeyRequest, v1.APIKey](
			httpClient,
			baseURL+SSOReadyServiceCreateAPIKeyProcedure,
			opts...,
		),
		deleteAPIKey: connect.NewClient[v1.DeleteAPIKeyRequest, emptypb.Empty](
			httpClient,
			baseURL+SSOReadyServiceDeleteAPIKeyProcedure,
			opts...,
		),
		listSAMLOAuthClients: connect.NewClient[v1.ListSAMLOAuthClientsRequest, v1.ListSAMLOAuthClientsResponse](
			httpClient,
			baseURL+SSOReadyServiceListSAMLOAuthClientsProcedure,
			opts...,
		),
		getSAMLOAuthClient: connect.NewClient[v1.GetSAMLOAuthClientRequest, v1.SAMLOAuthClient](
			httpClient,
			baseURL+SSOReadyServiceGetSAMLOAuthClientProcedure,
			opts...,
		),
		createSAMLOAuthClient: connect.NewClient[v1.CreateSAMLOAuthClientRequest, v1.SAMLOAuthClient](
			httpClient,
			baseURL+SSOReadyServiceCreateSAMLOAuthClientProcedure,
			opts...,
		),
		deleteSAMLOAuthClient: connect.NewClient[v1.DeleteSAMLOAuthClientRequest, emptypb.Empty](
			httpClient,
			baseURL+SSOReadyServiceDeleteSAMLOAuthClientProcedure,
			opts...,
		),
		appListOrganizations: connect.NewClient[v1.AppListOrganizationsRequest, v1.AppListOrganizationsResponse](
			httpClient,
			baseURL+SSOReadyServiceAppListOrganizationsProcedure,
			opts...,
		),
		appGetOrganization: connect.NewClient[v1.AppGetOrganizationRequest, v1.Organization](
			httpClient,
			baseURL+SSOReadyServiceAppGetOrganizationProcedure,
			opts...,
		),
		appCreateOrganization: connect.NewClient[v1.AppCreateOrganizationRequest, v1.Organization](
			httpClient,
			baseURL+SSOReadyServiceAppCreateOrganizationProcedure,
			opts...,
		),
		appUpdateOrganization: connect.NewClient[v1.AppUpdateOrganizationRequest, v1.Organization](
			httpClient,
			baseURL+SSOReadyServiceAppUpdateOrganizationProcedure,
			opts...,
		),
		appCreateAdminSetupURL: connect.NewClient[v1.AppCreateAdminSetupURLRequest, v1.AppCreateAdminSetupURLResponse](
			httpClient,
			baseURL+SSOReadyServiceAppCreateAdminSetupURLProcedure,
			opts...,
		),
		appListSAMLConnections: connect.NewClient[v1.AppListSAMLConnectionsRequest, v1.AppListSAMLConnectionsResponse](
			httpClient,
			baseURL+SSOReadyServiceAppListSAMLConnectionsProcedure,
			opts...,
		),
		appGetSAMLConnection: connect.NewClient[v1.AppGetSAMLConnectionRequest, v1.SAMLConnection](
			httpClient,
			baseURL+SSOReadyServiceAppGetSAMLConnectionProcedure,
			opts...,
		),
		appCreateSAMLConnection: connect.NewClient[v1.AppCreateSAMLConnectionRequest, v1.SAMLConnection](
			httpClient,
			baseURL+SSOReadyServiceAppCreateSAMLConnectionProcedure,
			opts...,
		),
		appUpdateSAMLConnection: connect.NewClient[v1.AppUpdateSAMLConnectionRequest, v1.SAMLConnection](
			httpClient,
			baseURL+SSOReadyServiceAppUpdateSAMLConnectionProcedure,
			opts...,
		),
		appListSAMLFlows: connect.NewClient[v1.AppListSAMLFlowsRequest, v1.AppListSAMLFlowsResponse](
			httpClient,
			baseURL+SSOReadyServiceAppListSAMLFlowsProcedure,
			opts...,
		),
		appGetSAMLFlow: connect.NewClient[v1.AppGetSAMLFlowRequest, v1.SAMLFlow](
			httpClient,
			baseURL+SSOReadyServiceAppGetSAMLFlowProcedure,
			opts...,
		),
		parseSAMLMetadata: connect.NewClient[v1.ParseSAMLMetadataRequest, v1.ParseSAMLMetadataResponse](
			httpClient,
			baseURL+SSOReadyServiceParseSAMLMetadataProcedure,
			opts...,
		),
		appListSCIMDirectories: connect.NewClient[v1.AppListSCIMDirectoriesRequest, v1.AppListSCIMDirectoriesResponse](
			httpClient,
			baseURL+SSOReadyServiceAppListSCIMDirectoriesProcedure,
			opts...,
		),
		appGetSCIMDirectory: connect.NewClient[v1.AppGetSCIMDirectoryRequest, v1.SCIMDirectory](
			httpClient,
			baseURL+SSOReadyServiceAppGetSCIMDirectoryProcedure,
			opts...,
		),
		appCreateSCIMDirectory: connect.NewClient[v1.AppCreateSCIMDirectoryRequest, v1.SCIMDirectory](
			httpClient,
			baseURL+SSOReadyServiceAppCreateSCIMDirectoryProcedure,
			opts...,
		),
		appUpdateSCIMDirectory: connect.NewClient[v1.AppUpdateSCIMDirectoryRequest, v1.SCIMDirectory](
			httpClient,
			baseURL+SSOReadyServiceAppUpdateSCIMDirectoryProcedure,
			opts...,
		),
		appRotateSCIMDirectoryBearerToken: connect.NewClient[v1.AppRotateSCIMDirectoryBearerTokenRequest, v1.AppRotateSCIMDirectoryBearerTokenResponse](
			httpClient,
			baseURL+SSOReadyServiceAppRotateSCIMDirectoryBearerTokenProcedure,
			opts...,
		),
		appListSCIMUsers: connect.NewClient[v1.AppListSCIMUsersRequest, v1.AppListSCIMUsersResponse](
			httpClient,
			baseURL+SSOReadyServiceAppListSCIMUsersProcedure,
			opts...,
		),
		appGetSCIMUser: connect.NewClient[v1.AppGetSCIMUserRequest, v1.SCIMUser](
			httpClient,
			baseURL+SSOReadyServiceAppGetSCIMUserProcedure,
			opts...,
		),
		appListSCIMGroups: connect.NewClient[v1.AppListSCIMGroupsRequest, v1.AppListSCIMGroupsResponse](
			httpClient,
			baseURL+SSOReadyServiceAppListSCIMGroupsProcedure,
			opts...,
		),
		appGetSCIMGroup: connect.NewClient[v1.AppGetSCIMGroupRequest, v1.SCIMGroup](
			httpClient,
			baseURL+SSOReadyServiceAppGetSCIMGroupProcedure,
			opts...,
		),
		adminRedeemOneTimeToken: connect.NewClient[v1.AdminRedeemOneTimeTokenRequest, v1.AdminRedeemOneTimeTokenResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminRedeemOneTimeTokenProcedure,
			opts...,
		),
		adminWhoami: connect.NewClient[v1.AdminWhoamiRequest, v1.AdminWhoamiResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminWhoamiProcedure,
			opts...,
		),
		adminListSAMLConnections: connect.NewClient[v1.AdminListSAMLConnectionsRequest, v1.AdminListSAMLConnectionsResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminListSAMLConnectionsProcedure,
			opts...,
		),
		adminGetSAMLConnection: connect.NewClient[v1.AdminGetSAMLConnectionRequest, v1.AdminGetSAMLConnectionResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminGetSAMLConnectionProcedure,
			opts...,
		),
		adminCreateSAMLConnection: connect.NewClient[v1.AdminCreateSAMLConnectionRequest, v1.AdminCreateSAMLConnectionResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminCreateSAMLConnectionProcedure,
			opts...,
		),
		adminUpdateSAMLConnection: connect.NewClient[v1.AdminUpdateSAMLConnectionRequest, v1.AdminUpdateSAMLConnectionResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminUpdateSAMLConnectionProcedure,
			opts...,
		),
		adminParseSAMLMetadata: connect.NewClient[v1.AdminParseSAMLMetadataRequest, v1.AdminParseSAMLMetadataResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminParseSAMLMetadataProcedure,
			opts...,
		),
		adminListSCIMDirectories: connect.NewClient[v1.AdminListSCIMDirectoriesRequest, v1.AdminListSCIMDirectoriesResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminListSCIMDirectoriesProcedure,
			opts...,
		),
		adminGetSCIMDirectory: connect.NewClient[v1.AdminGetSCIMDirectoryRequest, v1.AdminGetSCIMDirectoryResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminGetSCIMDirectoryProcedure,
			opts...,
		),
		adminCreateSCIMDirectory: connect.NewClient[v1.AdminCreateSCIMDirectoryRequest, v1.AdminCreateSCIMDirectoryResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminCreateSCIMDirectoryProcedure,
			opts...,
		),
		adminUpdateSCIMDirectory: connect.NewClient[v1.AdminUpdateSCIMDirectoryRequest, v1.AdminUpdateSCIMDirectoryResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminUpdateSCIMDirectoryProcedure,
			opts...,
		),
		adminRotateSCIMDirectoryBearerToken: connect.NewClient[v1.AdminRotateSCIMDirectoryBearerTokenRequest, v1.AdminRotateSCIMDirectoryBearerTokenResponse](
			httpClient,
			baseURL+SSOReadyServiceAdminRotateSCIMDirectoryBearerTokenProcedure,
			opts...,
		),
	}
}

// sSOReadyServiceClient implements SSOReadyServiceClient.
type sSOReadyServiceClient struct {
	getSAMLRedirectURL                  *connect.Client[v1.GetSAMLRedirectURLRequest, v1.GetSAMLRedirectURLResponse]
	redeemSAMLAccessCode                *connect.Client[v1.RedeemSAMLAccessCodeRequest, v1.RedeemSAMLAccessCodeResponse]
	listSCIMUsers                       *connect.Client[v1.ListSCIMUsersRequest, v1.ListSCIMUsersResponse]
	getSCIMUser                         *connect.Client[v1.GetSCIMUserRequest, v1.GetSCIMUserResponse]
	listSCIMGroups                      *connect.Client[v1.ListSCIMGroupsRequest, v1.ListSCIMGroupsResponse]
	getSCIMGroup                        *connect.Client[v1.GetSCIMGroupRequest, v1.GetSCIMGroupResponse]
	listOrganizations                   *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	getOrganization                     *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	createOrganization                  *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	updateOrganization                  *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	createSetupURL                      *connect.Client[v1.CreateSetupURLRequest, v1.CreateSetupURLResponse]
	listSAMLConnections                 *connect.Client[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse]
	getSAMLConnection                   *connect.Client[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse]
	createSAMLConnection                *connect.Client[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse]
	updateSAMLConnection                *connect.Client[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse]
	listSCIMDirectories                 *connect.Client[v1.ListSCIMDirectoriesRequest, v1.ListSCIMDirectoriesResponse]
	getSCIMDirectory                    *connect.Client[v1.GetSCIMDirectoryRequest, v1.GetSCIMDirectoryResponse]
	createSCIMDirectory                 *connect.Client[v1.CreateSCIMDirectoryRequest, v1.CreateSCIMDirectoryResponse]
	updateSCIMDirectory                 *connect.Client[v1.UpdateSCIMDirectoryRequest, v1.UpdateSCIMDirectoryResponse]
	rotateSCIMDirectoryBearerToken      *connect.Client[v1.RotateSCIMDirectoryBearerTokenRequest, v1.RotateSCIMDirectoryBearerTokenResponse]
	verifyEmail                         *connect.Client[v1.VerifyEmailRequest, emptypb.Empty]
	signIn                              *connect.Client[v1.SignInRequest, v1.SignInResponse]
	signOut                             *connect.Client[v1.SignOutRequest, v1.SignOutResponse]
	whoami                              *connect.Client[v1.WhoamiRequest, v1.WhoamiResponse]
	getOnboardingState                  *connect.Client[v1.GetOnboardingStateRequest, v1.GetOnboardingStateResponse]
	updateOnboardingState               *connect.Client[v1.UpdateOnboardingStateRequest, emptypb.Empty]
	onboardingGetSAMLRedirectURL        *connect.Client[v1.OnboardingGetSAMLRedirectURLRequest, v1.GetSAMLRedirectURLResponse]
	onboardingRedeemSAMLAccessCode      *connect.Client[v1.OnboardingRedeemSAMLAccessCodeRequest, v1.RedeemSAMLAccessCodeResponse]
	getStripeCheckoutURL                *connect.Client[v1.GetStripeCheckoutURLRequest, v1.GetStripeCheckoutURLResponse]
	redeemStripeCheckout                *connect.Client[v1.RedeemStripeCheckoutRequest, v1.RedeemStripeCheckoutResponse]
	getStripeBillingPortalURL           *connect.Client[v1.GetStripeBillingPortalURLRequest, v1.GetStripeBillingPortalURLResponse]
	getAppOrganization                  *connect.Client[v1.GetAppOrganizationRequest, v1.GetAppOrganizationResponse]
	listAppUsers                        *connect.Client[v1.ListAppUsersRequest, v1.ListAppUsersResponse]
	listEnvironments                    *connect.Client[v1.ListEnvironmentsRequest, v1.ListEnvironmentsResponse]
	getEnvironment                      *connect.Client[v1.GetEnvironmentRequest, v1.Environment]
	createEnvironment                   *connect.Client[v1.CreateEnvironmentRequest, v1.Environment]
	updateEnvironment                   *connect.Client[v1.UpdateEnvironmentRequest, v1.Environment]
	listAPIKeys                         *connect.Client[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse]
	getAPIKey                           *connect.Client[v1.GetAPIKeyRequest, v1.APIKey]
	createAPIKey                        *connect.Client[v1.CreateAPIKeyRequest, v1.APIKey]
	deleteAPIKey                        *connect.Client[v1.DeleteAPIKeyRequest, emptypb.Empty]
	listSAMLOAuthClients                *connect.Client[v1.ListSAMLOAuthClientsRequest, v1.ListSAMLOAuthClientsResponse]
	getSAMLOAuthClient                  *connect.Client[v1.GetSAMLOAuthClientRequest, v1.SAMLOAuthClient]
	createSAMLOAuthClient               *connect.Client[v1.CreateSAMLOAuthClientRequest, v1.SAMLOAuthClient]
	deleteSAMLOAuthClient               *connect.Client[v1.DeleteSAMLOAuthClientRequest, emptypb.Empty]
	appListOrganizations                *connect.Client[v1.AppListOrganizationsRequest, v1.AppListOrganizationsResponse]
	appGetOrganization                  *connect.Client[v1.AppGetOrganizationRequest, v1.Organization]
	appCreateOrganization               *connect.Client[v1.AppCreateOrganizationRequest, v1.Organization]
	appUpdateOrganization               *connect.Client[v1.AppUpdateOrganizationRequest, v1.Organization]
	appCreateAdminSetupURL              *connect.Client[v1.AppCreateAdminSetupURLRequest, v1.AppCreateAdminSetupURLResponse]
	appListSAMLConnections              *connect.Client[v1.AppListSAMLConnectionsRequest, v1.AppListSAMLConnectionsResponse]
	appGetSAMLConnection                *connect.Client[v1.AppGetSAMLConnectionRequest, v1.SAMLConnection]
	appCreateSAMLConnection             *connect.Client[v1.AppCreateSAMLConnectionRequest, v1.SAMLConnection]
	appUpdateSAMLConnection             *connect.Client[v1.AppUpdateSAMLConnectionRequest, v1.SAMLConnection]
	appListSAMLFlows                    *connect.Client[v1.AppListSAMLFlowsRequest, v1.AppListSAMLFlowsResponse]
	appGetSAMLFlow                      *connect.Client[v1.AppGetSAMLFlowRequest, v1.SAMLFlow]
	parseSAMLMetadata                   *connect.Client[v1.ParseSAMLMetadataRequest, v1.ParseSAMLMetadataResponse]
	appListSCIMDirectories              *connect.Client[v1.AppListSCIMDirectoriesRequest, v1.AppListSCIMDirectoriesResponse]
	appGetSCIMDirectory                 *connect.Client[v1.AppGetSCIMDirectoryRequest, v1.SCIMDirectory]
	appCreateSCIMDirectory              *connect.Client[v1.AppCreateSCIMDirectoryRequest, v1.SCIMDirectory]
	appUpdateSCIMDirectory              *connect.Client[v1.AppUpdateSCIMDirectoryRequest, v1.SCIMDirectory]
	appRotateSCIMDirectoryBearerToken   *connect.Client[v1.AppRotateSCIMDirectoryBearerTokenRequest, v1.AppRotateSCIMDirectoryBearerTokenResponse]
	appListSCIMUsers                    *connect.Client[v1.AppListSCIMUsersRequest, v1.AppListSCIMUsersResponse]
	appGetSCIMUser                      *connect.Client[v1.AppGetSCIMUserRequest, v1.SCIMUser]
	appListSCIMGroups                   *connect.Client[v1.AppListSCIMGroupsRequest, v1.AppListSCIMGroupsResponse]
	appGetSCIMGroup                     *connect.Client[v1.AppGetSCIMGroupRequest, v1.SCIMGroup]
	adminRedeemOneTimeToken             *connect.Client[v1.AdminRedeemOneTimeTokenRequest, v1.AdminRedeemOneTimeTokenResponse]
	adminWhoami                         *connect.Client[v1.AdminWhoamiRequest, v1.AdminWhoamiResponse]
	adminListSAMLConnections            *connect.Client[v1.AdminListSAMLConnectionsRequest, v1.AdminListSAMLConnectionsResponse]
	adminGetSAMLConnection              *connect.Client[v1.AdminGetSAMLConnectionRequest, v1.AdminGetSAMLConnectionResponse]
	adminCreateSAMLConnection           *connect.Client[v1.AdminCreateSAMLConnectionRequest, v1.AdminCreateSAMLConnectionResponse]
	adminUpdateSAMLConnection           *connect.Client[v1.AdminUpdateSAMLConnectionRequest, v1.AdminUpdateSAMLConnectionResponse]
	adminParseSAMLMetadata              *connect.Client[v1.AdminParseSAMLMetadataRequest, v1.AdminParseSAMLMetadataResponse]
	adminListSCIMDirectories            *connect.Client[v1.AdminListSCIMDirectoriesRequest, v1.AdminListSCIMDirectoriesResponse]
	adminGetSCIMDirectory               *connect.Client[v1.AdminGetSCIMDirectoryRequest, v1.AdminGetSCIMDirectoryResponse]
	adminCreateSCIMDirectory            *connect.Client[v1.AdminCreateSCIMDirectoryRequest, v1.AdminCreateSCIMDirectoryResponse]
	adminUpdateSCIMDirectory            *connect.Client[v1.AdminUpdateSCIMDirectoryRequest, v1.AdminUpdateSCIMDirectoryResponse]
	adminRotateSCIMDirectoryBearerToken *connect.Client[v1.AdminRotateSCIMDirectoryBearerTokenRequest, v1.AdminRotateSCIMDirectoryBearerTokenResponse]
}

// GetSAMLRedirectURL calls ssoready.v1.SSOReadyService.GetSAMLRedirectURL.
func (c *sSOReadyServiceClient) GetSAMLRedirectURL(ctx context.Context, req *connect.Request[v1.GetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error) {
	return c.getSAMLRedirectURL.CallUnary(ctx, req)
}

// RedeemSAMLAccessCode calls ssoready.v1.SSOReadyService.RedeemSAMLAccessCode.
func (c *sSOReadyServiceClient) RedeemSAMLAccessCode(ctx context.Context, req *connect.Request[v1.RedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error) {
	return c.redeemSAMLAccessCode.CallUnary(ctx, req)
}

// ListSCIMUsers calls ssoready.v1.SSOReadyService.ListSCIMUsers.
func (c *sSOReadyServiceClient) ListSCIMUsers(ctx context.Context, req *connect.Request[v1.ListSCIMUsersRequest]) (*connect.Response[v1.ListSCIMUsersResponse], error) {
	return c.listSCIMUsers.CallUnary(ctx, req)
}

// GetSCIMUser calls ssoready.v1.SSOReadyService.GetSCIMUser.
func (c *sSOReadyServiceClient) GetSCIMUser(ctx context.Context, req *connect.Request[v1.GetSCIMUserRequest]) (*connect.Response[v1.GetSCIMUserResponse], error) {
	return c.getSCIMUser.CallUnary(ctx, req)
}

// ListSCIMGroups calls ssoready.v1.SSOReadyService.ListSCIMGroups.
func (c *sSOReadyServiceClient) ListSCIMGroups(ctx context.Context, req *connect.Request[v1.ListSCIMGroupsRequest]) (*connect.Response[v1.ListSCIMGroupsResponse], error) {
	return c.listSCIMGroups.CallUnary(ctx, req)
}

// GetSCIMGroup calls ssoready.v1.SSOReadyService.GetSCIMGroup.
func (c *sSOReadyServiceClient) GetSCIMGroup(ctx context.Context, req *connect.Request[v1.GetSCIMGroupRequest]) (*connect.Response[v1.GetSCIMGroupResponse], error) {
	return c.getSCIMGroup.CallUnary(ctx, req)
}

// ListOrganizations calls ssoready.v1.SSOReadyService.ListOrganizations.
func (c *sSOReadyServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// GetOrganization calls ssoready.v1.SSOReadyService.GetOrganization.
func (c *sSOReadyServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// CreateOrganization calls ssoready.v1.SSOReadyService.CreateOrganization.
func (c *sSOReadyServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls ssoready.v1.SSOReadyService.UpdateOrganization.
func (c *sSOReadyServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// CreateSetupURL calls ssoready.v1.SSOReadyService.CreateSetupURL.
func (c *sSOReadyServiceClient) CreateSetupURL(ctx context.Context, req *connect.Request[v1.CreateSetupURLRequest]) (*connect.Response[v1.CreateSetupURLResponse], error) {
	return c.createSetupURL.CallUnary(ctx, req)
}

// ListSAMLConnections calls ssoready.v1.SSOReadyService.ListSAMLConnections.
func (c *sSOReadyServiceClient) ListSAMLConnections(ctx context.Context, req *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return c.listSAMLConnections.CallUnary(ctx, req)
}

// GetSAMLConnection calls ssoready.v1.SSOReadyService.GetSAMLConnection.
func (c *sSOReadyServiceClient) GetSAMLConnection(ctx context.Context, req *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return c.getSAMLConnection.CallUnary(ctx, req)
}

// CreateSAMLConnection calls ssoready.v1.SSOReadyService.CreateSAMLConnection.
func (c *sSOReadyServiceClient) CreateSAMLConnection(ctx context.Context, req *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return c.createSAMLConnection.CallUnary(ctx, req)
}

// UpdateSAMLConnection calls ssoready.v1.SSOReadyService.UpdateSAMLConnection.
func (c *sSOReadyServiceClient) UpdateSAMLConnection(ctx context.Context, req *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return c.updateSAMLConnection.CallUnary(ctx, req)
}

// ListSCIMDirectories calls ssoready.v1.SSOReadyService.ListSCIMDirectories.
func (c *sSOReadyServiceClient) ListSCIMDirectories(ctx context.Context, req *connect.Request[v1.ListSCIMDirectoriesRequest]) (*connect.Response[v1.ListSCIMDirectoriesResponse], error) {
	return c.listSCIMDirectories.CallUnary(ctx, req)
}

// GetSCIMDirectory calls ssoready.v1.SSOReadyService.GetSCIMDirectory.
func (c *sSOReadyServiceClient) GetSCIMDirectory(ctx context.Context, req *connect.Request[v1.GetSCIMDirectoryRequest]) (*connect.Response[v1.GetSCIMDirectoryResponse], error) {
	return c.getSCIMDirectory.CallUnary(ctx, req)
}

// CreateSCIMDirectory calls ssoready.v1.SSOReadyService.CreateSCIMDirectory.
func (c *sSOReadyServiceClient) CreateSCIMDirectory(ctx context.Context, req *connect.Request[v1.CreateSCIMDirectoryRequest]) (*connect.Response[v1.CreateSCIMDirectoryResponse], error) {
	return c.createSCIMDirectory.CallUnary(ctx, req)
}

// UpdateSCIMDirectory calls ssoready.v1.SSOReadyService.UpdateSCIMDirectory.
func (c *sSOReadyServiceClient) UpdateSCIMDirectory(ctx context.Context, req *connect.Request[v1.UpdateSCIMDirectoryRequest]) (*connect.Response[v1.UpdateSCIMDirectoryResponse], error) {
	return c.updateSCIMDirectory.CallUnary(ctx, req)
}

// RotateSCIMDirectoryBearerToken calls ssoready.v1.SSOReadyService.RotateSCIMDirectoryBearerToken.
func (c *sSOReadyServiceClient) RotateSCIMDirectoryBearerToken(ctx context.Context, req *connect.Request[v1.RotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.RotateSCIMDirectoryBearerTokenResponse], error) {
	return c.rotateSCIMDirectoryBearerToken.CallUnary(ctx, req)
}

// VerifyEmail calls ssoready.v1.SSOReadyService.VerifyEmail.
func (c *sSOReadyServiceClient) VerifyEmail(ctx context.Context, req *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// SignIn calls ssoready.v1.SSOReadyService.SignIn.
func (c *sSOReadyServiceClient) SignIn(ctx context.Context, req *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignOut calls ssoready.v1.SSOReadyService.SignOut.
func (c *sSOReadyServiceClient) SignOut(ctx context.Context, req *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error) {
	return c.signOut.CallUnary(ctx, req)
}

// Whoami calls ssoready.v1.SSOReadyService.Whoami.
func (c *sSOReadyServiceClient) Whoami(ctx context.Context, req *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return c.whoami.CallUnary(ctx, req)
}

// GetOnboardingState calls ssoready.v1.SSOReadyService.GetOnboardingState.
func (c *sSOReadyServiceClient) GetOnboardingState(ctx context.Context, req *connect.Request[v1.GetOnboardingStateRequest]) (*connect.Response[v1.GetOnboardingStateResponse], error) {
	return c.getOnboardingState.CallUnary(ctx, req)
}

// UpdateOnboardingState calls ssoready.v1.SSOReadyService.UpdateOnboardingState.
func (c *sSOReadyServiceClient) UpdateOnboardingState(ctx context.Context, req *connect.Request[v1.UpdateOnboardingStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateOnboardingState.CallUnary(ctx, req)
}

// OnboardingGetSAMLRedirectURL calls ssoready.v1.SSOReadyService.OnboardingGetSAMLRedirectURL.
func (c *sSOReadyServiceClient) OnboardingGetSAMLRedirectURL(ctx context.Context, req *connect.Request[v1.OnboardingGetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error) {
	return c.onboardingGetSAMLRedirectURL.CallUnary(ctx, req)
}

// OnboardingRedeemSAMLAccessCode calls ssoready.v1.SSOReadyService.OnboardingRedeemSAMLAccessCode.
func (c *sSOReadyServiceClient) OnboardingRedeemSAMLAccessCode(ctx context.Context, req *connect.Request[v1.OnboardingRedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error) {
	return c.onboardingRedeemSAMLAccessCode.CallUnary(ctx, req)
}

// GetStripeCheckoutURL calls ssoready.v1.SSOReadyService.GetStripeCheckoutURL.
func (c *sSOReadyServiceClient) GetStripeCheckoutURL(ctx context.Context, req *connect.Request[v1.GetStripeCheckoutURLRequest]) (*connect.Response[v1.GetStripeCheckoutURLResponse], error) {
	return c.getStripeCheckoutURL.CallUnary(ctx, req)
}

// RedeemStripeCheckout calls ssoready.v1.SSOReadyService.RedeemStripeCheckout.
func (c *sSOReadyServiceClient) RedeemStripeCheckout(ctx context.Context, req *connect.Request[v1.RedeemStripeCheckoutRequest]) (*connect.Response[v1.RedeemStripeCheckoutResponse], error) {
	return c.redeemStripeCheckout.CallUnary(ctx, req)
}

// GetStripeBillingPortalURL calls ssoready.v1.SSOReadyService.GetStripeBillingPortalURL.
func (c *sSOReadyServiceClient) GetStripeBillingPortalURL(ctx context.Context, req *connect.Request[v1.GetStripeBillingPortalURLRequest]) (*connect.Response[v1.GetStripeBillingPortalURLResponse], error) {
	return c.getStripeBillingPortalURL.CallUnary(ctx, req)
}

// GetAppOrganization calls ssoready.v1.SSOReadyService.GetAppOrganization.
func (c *sSOReadyServiceClient) GetAppOrganization(ctx context.Context, req *connect.Request[v1.GetAppOrganizationRequest]) (*connect.Response[v1.GetAppOrganizationResponse], error) {
	return c.getAppOrganization.CallUnary(ctx, req)
}

// ListAppUsers calls ssoready.v1.SSOReadyService.ListAppUsers.
func (c *sSOReadyServiceClient) ListAppUsers(ctx context.Context, req *connect.Request[v1.ListAppUsersRequest]) (*connect.Response[v1.ListAppUsersResponse], error) {
	return c.listAppUsers.CallUnary(ctx, req)
}

// ListEnvironments calls ssoready.v1.SSOReadyService.ListEnvironments.
func (c *sSOReadyServiceClient) ListEnvironments(ctx context.Context, req *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error) {
	return c.listEnvironments.CallUnary(ctx, req)
}

// GetEnvironment calls ssoready.v1.SSOReadyService.GetEnvironment.
func (c *sSOReadyServiceClient) GetEnvironment(ctx context.Context, req *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.Environment], error) {
	return c.getEnvironment.CallUnary(ctx, req)
}

// CreateEnvironment calls ssoready.v1.SSOReadyService.CreateEnvironment.
func (c *sSOReadyServiceClient) CreateEnvironment(ctx context.Context, req *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.Environment], error) {
	return c.createEnvironment.CallUnary(ctx, req)
}

// UpdateEnvironment calls ssoready.v1.SSOReadyService.UpdateEnvironment.
func (c *sSOReadyServiceClient) UpdateEnvironment(ctx context.Context, req *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.Environment], error) {
	return c.updateEnvironment.CallUnary(ctx, req)
}

// ListAPIKeys calls ssoready.v1.SSOReadyService.ListAPIKeys.
func (c *sSOReadyServiceClient) ListAPIKeys(ctx context.Context, req *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return c.listAPIKeys.CallUnary(ctx, req)
}

// GetAPIKey calls ssoready.v1.SSOReadyService.GetAPIKey.
func (c *sSOReadyServiceClient) GetAPIKey(ctx context.Context, req *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.APIKey], error) {
	return c.getAPIKey.CallUnary(ctx, req)
}

// CreateAPIKey calls ssoready.v1.SSOReadyService.CreateAPIKey.
func (c *sSOReadyServiceClient) CreateAPIKey(ctx context.Context, req *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.APIKey], error) {
	return c.createAPIKey.CallUnary(ctx, req)
}

// DeleteAPIKey calls ssoready.v1.SSOReadyService.DeleteAPIKey.
func (c *sSOReadyServiceClient) DeleteAPIKey(ctx context.Context, req *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteAPIKey.CallUnary(ctx, req)
}

// ListSAMLOAuthClients calls ssoready.v1.SSOReadyService.ListSAMLOAuthClients.
func (c *sSOReadyServiceClient) ListSAMLOAuthClients(ctx context.Context, req *connect.Request[v1.ListSAMLOAuthClientsRequest]) (*connect.Response[v1.ListSAMLOAuthClientsResponse], error) {
	return c.listSAMLOAuthClients.CallUnary(ctx, req)
}

// GetSAMLOAuthClient calls ssoready.v1.SSOReadyService.GetSAMLOAuthClient.
func (c *sSOReadyServiceClient) GetSAMLOAuthClient(ctx context.Context, req *connect.Request[v1.GetSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error) {
	return c.getSAMLOAuthClient.CallUnary(ctx, req)
}

// CreateSAMLOAuthClient calls ssoready.v1.SSOReadyService.CreateSAMLOAuthClient.
func (c *sSOReadyServiceClient) CreateSAMLOAuthClient(ctx context.Context, req *connect.Request[v1.CreateSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error) {
	return c.createSAMLOAuthClient.CallUnary(ctx, req)
}

// DeleteSAMLOAuthClient calls ssoready.v1.SSOReadyService.DeleteSAMLOAuthClient.
func (c *sSOReadyServiceClient) DeleteSAMLOAuthClient(ctx context.Context, req *connect.Request[v1.DeleteSAMLOAuthClientRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteSAMLOAuthClient.CallUnary(ctx, req)
}

// AppListOrganizations calls ssoready.v1.SSOReadyService.AppListOrganizations.
func (c *sSOReadyServiceClient) AppListOrganizations(ctx context.Context, req *connect.Request[v1.AppListOrganizationsRequest]) (*connect.Response[v1.AppListOrganizationsResponse], error) {
	return c.appListOrganizations.CallUnary(ctx, req)
}

// AppGetOrganization calls ssoready.v1.SSOReadyService.AppGetOrganization.
func (c *sSOReadyServiceClient) AppGetOrganization(ctx context.Context, req *connect.Request[v1.AppGetOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return c.appGetOrganization.CallUnary(ctx, req)
}

// AppCreateOrganization calls ssoready.v1.SSOReadyService.AppCreateOrganization.
func (c *sSOReadyServiceClient) AppCreateOrganization(ctx context.Context, req *connect.Request[v1.AppCreateOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return c.appCreateOrganization.CallUnary(ctx, req)
}

// AppUpdateOrganization calls ssoready.v1.SSOReadyService.AppUpdateOrganization.
func (c *sSOReadyServiceClient) AppUpdateOrganization(ctx context.Context, req *connect.Request[v1.AppUpdateOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return c.appUpdateOrganization.CallUnary(ctx, req)
}

// AppCreateAdminSetupURL calls ssoready.v1.SSOReadyService.AppCreateAdminSetupURL.
func (c *sSOReadyServiceClient) AppCreateAdminSetupURL(ctx context.Context, req *connect.Request[v1.AppCreateAdminSetupURLRequest]) (*connect.Response[v1.AppCreateAdminSetupURLResponse], error) {
	return c.appCreateAdminSetupURL.CallUnary(ctx, req)
}

// AppListSAMLConnections calls ssoready.v1.SSOReadyService.AppListSAMLConnections.
func (c *sSOReadyServiceClient) AppListSAMLConnections(ctx context.Context, req *connect.Request[v1.AppListSAMLConnectionsRequest]) (*connect.Response[v1.AppListSAMLConnectionsResponse], error) {
	return c.appListSAMLConnections.CallUnary(ctx, req)
}

// AppGetSAMLConnection calls ssoready.v1.SSOReadyService.AppGetSAMLConnection.
func (c *sSOReadyServiceClient) AppGetSAMLConnection(ctx context.Context, req *connect.Request[v1.AppGetSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error) {
	return c.appGetSAMLConnection.CallUnary(ctx, req)
}

// AppCreateSAMLConnection calls ssoready.v1.SSOReadyService.AppCreateSAMLConnection.
func (c *sSOReadyServiceClient) AppCreateSAMLConnection(ctx context.Context, req *connect.Request[v1.AppCreateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error) {
	return c.appCreateSAMLConnection.CallUnary(ctx, req)
}

// AppUpdateSAMLConnection calls ssoready.v1.SSOReadyService.AppUpdateSAMLConnection.
func (c *sSOReadyServiceClient) AppUpdateSAMLConnection(ctx context.Context, req *connect.Request[v1.AppUpdateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error) {
	return c.appUpdateSAMLConnection.CallUnary(ctx, req)
}

// AppListSAMLFlows calls ssoready.v1.SSOReadyService.AppListSAMLFlows.
func (c *sSOReadyServiceClient) AppListSAMLFlows(ctx context.Context, req *connect.Request[v1.AppListSAMLFlowsRequest]) (*connect.Response[v1.AppListSAMLFlowsResponse], error) {
	return c.appListSAMLFlows.CallUnary(ctx, req)
}

// AppGetSAMLFlow calls ssoready.v1.SSOReadyService.AppGetSAMLFlow.
func (c *sSOReadyServiceClient) AppGetSAMLFlow(ctx context.Context, req *connect.Request[v1.AppGetSAMLFlowRequest]) (*connect.Response[v1.SAMLFlow], error) {
	return c.appGetSAMLFlow.CallUnary(ctx, req)
}

// ParseSAMLMetadata calls ssoready.v1.SSOReadyService.ParseSAMLMetadata.
func (c *sSOReadyServiceClient) ParseSAMLMetadata(ctx context.Context, req *connect.Request[v1.ParseSAMLMetadataRequest]) (*connect.Response[v1.ParseSAMLMetadataResponse], error) {
	return c.parseSAMLMetadata.CallUnary(ctx, req)
}

// AppListSCIMDirectories calls ssoready.v1.SSOReadyService.AppListSCIMDirectories.
func (c *sSOReadyServiceClient) AppListSCIMDirectories(ctx context.Context, req *connect.Request[v1.AppListSCIMDirectoriesRequest]) (*connect.Response[v1.AppListSCIMDirectoriesResponse], error) {
	return c.appListSCIMDirectories.CallUnary(ctx, req)
}

// AppGetSCIMDirectory calls ssoready.v1.SSOReadyService.AppGetSCIMDirectory.
func (c *sSOReadyServiceClient) AppGetSCIMDirectory(ctx context.Context, req *connect.Request[v1.AppGetSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error) {
	return c.appGetSCIMDirectory.CallUnary(ctx, req)
}

// AppCreateSCIMDirectory calls ssoready.v1.SSOReadyService.AppCreateSCIMDirectory.
func (c *sSOReadyServiceClient) AppCreateSCIMDirectory(ctx context.Context, req *connect.Request[v1.AppCreateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error) {
	return c.appCreateSCIMDirectory.CallUnary(ctx, req)
}

// AppUpdateSCIMDirectory calls ssoready.v1.SSOReadyService.AppUpdateSCIMDirectory.
func (c *sSOReadyServiceClient) AppUpdateSCIMDirectory(ctx context.Context, req *connect.Request[v1.AppUpdateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error) {
	return c.appUpdateSCIMDirectory.CallUnary(ctx, req)
}

// AppRotateSCIMDirectoryBearerToken calls
// ssoready.v1.SSOReadyService.AppRotateSCIMDirectoryBearerToken.
func (c *sSOReadyServiceClient) AppRotateSCIMDirectoryBearerToken(ctx context.Context, req *connect.Request[v1.AppRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AppRotateSCIMDirectoryBearerTokenResponse], error) {
	return c.appRotateSCIMDirectoryBearerToken.CallUnary(ctx, req)
}

// AppListSCIMUsers calls ssoready.v1.SSOReadyService.AppListSCIMUsers.
func (c *sSOReadyServiceClient) AppListSCIMUsers(ctx context.Context, req *connect.Request[v1.AppListSCIMUsersRequest]) (*connect.Response[v1.AppListSCIMUsersResponse], error) {
	return c.appListSCIMUsers.CallUnary(ctx, req)
}

// AppGetSCIMUser calls ssoready.v1.SSOReadyService.AppGetSCIMUser.
func (c *sSOReadyServiceClient) AppGetSCIMUser(ctx context.Context, req *connect.Request[v1.AppGetSCIMUserRequest]) (*connect.Response[v1.SCIMUser], error) {
	return c.appGetSCIMUser.CallUnary(ctx, req)
}

// AppListSCIMGroups calls ssoready.v1.SSOReadyService.AppListSCIMGroups.
func (c *sSOReadyServiceClient) AppListSCIMGroups(ctx context.Context, req *connect.Request[v1.AppListSCIMGroupsRequest]) (*connect.Response[v1.AppListSCIMGroupsResponse], error) {
	return c.appListSCIMGroups.CallUnary(ctx, req)
}

// AppGetSCIMGroup calls ssoready.v1.SSOReadyService.AppGetSCIMGroup.
func (c *sSOReadyServiceClient) AppGetSCIMGroup(ctx context.Context, req *connect.Request[v1.AppGetSCIMGroupRequest]) (*connect.Response[v1.SCIMGroup], error) {
	return c.appGetSCIMGroup.CallUnary(ctx, req)
}

// AdminRedeemOneTimeToken calls ssoready.v1.SSOReadyService.AdminRedeemOneTimeToken.
func (c *sSOReadyServiceClient) AdminRedeemOneTimeToken(ctx context.Context, req *connect.Request[v1.AdminRedeemOneTimeTokenRequest]) (*connect.Response[v1.AdminRedeemOneTimeTokenResponse], error) {
	return c.adminRedeemOneTimeToken.CallUnary(ctx, req)
}

// AdminWhoami calls ssoready.v1.SSOReadyService.AdminWhoami.
func (c *sSOReadyServiceClient) AdminWhoami(ctx context.Context, req *connect.Request[v1.AdminWhoamiRequest]) (*connect.Response[v1.AdminWhoamiResponse], error) {
	return c.adminWhoami.CallUnary(ctx, req)
}

// AdminListSAMLConnections calls ssoready.v1.SSOReadyService.AdminListSAMLConnections.
func (c *sSOReadyServiceClient) AdminListSAMLConnections(ctx context.Context, req *connect.Request[v1.AdminListSAMLConnectionsRequest]) (*connect.Response[v1.AdminListSAMLConnectionsResponse], error) {
	return c.adminListSAMLConnections.CallUnary(ctx, req)
}

// AdminGetSAMLConnection calls ssoready.v1.SSOReadyService.AdminGetSAMLConnection.
func (c *sSOReadyServiceClient) AdminGetSAMLConnection(ctx context.Context, req *connect.Request[v1.AdminGetSAMLConnectionRequest]) (*connect.Response[v1.AdminGetSAMLConnectionResponse], error) {
	return c.adminGetSAMLConnection.CallUnary(ctx, req)
}

// AdminCreateSAMLConnection calls ssoready.v1.SSOReadyService.AdminCreateSAMLConnection.
func (c *sSOReadyServiceClient) AdminCreateSAMLConnection(ctx context.Context, req *connect.Request[v1.AdminCreateSAMLConnectionRequest]) (*connect.Response[v1.AdminCreateSAMLConnectionResponse], error) {
	return c.adminCreateSAMLConnection.CallUnary(ctx, req)
}

// AdminUpdateSAMLConnection calls ssoready.v1.SSOReadyService.AdminUpdateSAMLConnection.
func (c *sSOReadyServiceClient) AdminUpdateSAMLConnection(ctx context.Context, req *connect.Request[v1.AdminUpdateSAMLConnectionRequest]) (*connect.Response[v1.AdminUpdateSAMLConnectionResponse], error) {
	return c.adminUpdateSAMLConnection.CallUnary(ctx, req)
}

// AdminParseSAMLMetadata calls ssoready.v1.SSOReadyService.AdminParseSAMLMetadata.
func (c *sSOReadyServiceClient) AdminParseSAMLMetadata(ctx context.Context, req *connect.Request[v1.AdminParseSAMLMetadataRequest]) (*connect.Response[v1.AdminParseSAMLMetadataResponse], error) {
	return c.adminParseSAMLMetadata.CallUnary(ctx, req)
}

// AdminListSCIMDirectories calls ssoready.v1.SSOReadyService.AdminListSCIMDirectories.
func (c *sSOReadyServiceClient) AdminListSCIMDirectories(ctx context.Context, req *connect.Request[v1.AdminListSCIMDirectoriesRequest]) (*connect.Response[v1.AdminListSCIMDirectoriesResponse], error) {
	return c.adminListSCIMDirectories.CallUnary(ctx, req)
}

// AdminGetSCIMDirectory calls ssoready.v1.SSOReadyService.AdminGetSCIMDirectory.
func (c *sSOReadyServiceClient) AdminGetSCIMDirectory(ctx context.Context, req *connect.Request[v1.AdminGetSCIMDirectoryRequest]) (*connect.Response[v1.AdminGetSCIMDirectoryResponse], error) {
	return c.adminGetSCIMDirectory.CallUnary(ctx, req)
}

// AdminCreateSCIMDirectory calls ssoready.v1.SSOReadyService.AdminCreateSCIMDirectory.
func (c *sSOReadyServiceClient) AdminCreateSCIMDirectory(ctx context.Context, req *connect.Request[v1.AdminCreateSCIMDirectoryRequest]) (*connect.Response[v1.AdminCreateSCIMDirectoryResponse], error) {
	return c.adminCreateSCIMDirectory.CallUnary(ctx, req)
}

// AdminUpdateSCIMDirectory calls ssoready.v1.SSOReadyService.AdminUpdateSCIMDirectory.
func (c *sSOReadyServiceClient) AdminUpdateSCIMDirectory(ctx context.Context, req *connect.Request[v1.AdminUpdateSCIMDirectoryRequest]) (*connect.Response[v1.AdminUpdateSCIMDirectoryResponse], error) {
	return c.adminUpdateSCIMDirectory.CallUnary(ctx, req)
}

// AdminRotateSCIMDirectoryBearerToken calls
// ssoready.v1.SSOReadyService.AdminRotateSCIMDirectoryBearerToken.
func (c *sSOReadyServiceClient) AdminRotateSCIMDirectoryBearerToken(ctx context.Context, req *connect.Request[v1.AdminRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AdminRotateSCIMDirectoryBearerTokenResponse], error) {
	return c.adminRotateSCIMDirectoryBearerToken.CallUnary(ctx, req)
}

// SSOReadyServiceHandler is an implementation of the ssoready.v1.SSOReadyService service.
type SSOReadyServiceHandler interface {
	// Gets a SAML initiation URL to redirect your users to.
	GetSAMLRedirectURL(context.Context, *connect.Request[v1.GetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error)
	// Exchanges a SAML access code for details about your user's SAML login details.
	RedeemSAMLAccessCode(context.Context, *connect.Request[v1.RedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error)
	// Gets a list of SCIM users in a SCIM directory.
	ListSCIMUsers(context.Context, *connect.Request[v1.ListSCIMUsersRequest]) (*connect.Response[v1.ListSCIMUsersResponse], error)
	// Gets a SCIM user.
	GetSCIMUser(context.Context, *connect.Request[v1.GetSCIMUserRequest]) (*connect.Response[v1.GetSCIMUserResponse], error)
	// Gets a list of SCIM groups in a SCIM directory.
	ListSCIMGroups(context.Context, *connect.Request[v1.ListSCIMGroupsRequest]) (*connect.Response[v1.ListSCIMGroupsResponse], error)
	// Gets a SCIM group in a SCIM directory.
	GetSCIMGroup(context.Context, *connect.Request[v1.GetSCIMGroupRequest]) (*connect.Response[v1.GetSCIMGroupResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Gets an organization.
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// Creates an organization.
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// Updates an organization.
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// Creates a short-lived self-serve setup URL that you can send to your customer.
	//
	// Setup URLs let your customer configure their SAML settings, SCIM settings, or both.
	CreateSetupURL(context.Context, *connect.Request[v1.CreateSetupURLRequest]) (*connect.Response[v1.CreateSetupURLResponse], error)
	// Lists SAML connections in an organization.
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	// Gets a SAML connection.
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	// Creates a SAML connection.
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	// Updates a SAML connection.
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	// Gets a list of SCIM directories in an organization.
	ListSCIMDirectories(context.Context, *connect.Request[v1.ListSCIMDirectoriesRequest]) (*connect.Response[v1.ListSCIMDirectoriesResponse], error)
	// Gets a SCIM directory.
	GetSCIMDirectory(context.Context, *connect.Request[v1.GetSCIMDirectoryRequest]) (*connect.Response[v1.GetSCIMDirectoryResponse], error)
	// Creates a SCIM directory.
	CreateSCIMDirectory(context.Context, *connect.Request[v1.CreateSCIMDirectoryRequest]) (*connect.Response[v1.CreateSCIMDirectoryResponse], error)
	// Updates a SCIM directory.
	UpdateSCIMDirectory(context.Context, *connect.Request[v1.UpdateSCIMDirectoryRequest]) (*connect.Response[v1.UpdateSCIMDirectoryResponse], error)
	// Rotates a SCIM directory's bearer token.
	//
	// Every SCIM directory has a bearer token that SSOReady uses to authenticate requests sent from your customer's
	// Identity Provider. These bearer tokens are assigned by SSOReady, and are secret. Newly-created SCIM directories do
	// not have any bearer token at all; you must use this endpoint to get an initial value.
	//
	// Rotating a SCIM directory bearer token immediately invalidates the previous bearer token, if any. Your customer
	// will need to update their SCIM configuration with the new value to make SCIM syncing work again.
	//
	// SSOReady only stores the hash of these bearer tokens. If your customer has lost their copy, you must use this
	// endpoint to generate a new one.
	RotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.RotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.RotateSCIMDirectoryBearerTokenResponse], error)
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[emptypb.Empty], error)
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error)
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	GetOnboardingState(context.Context, *connect.Request[v1.GetOnboardingStateRequest]) (*connect.Response[v1.GetOnboardingStateResponse], error)
	UpdateOnboardingState(context.Context, *connect.Request[v1.UpdateOnboardingStateRequest]) (*connect.Response[emptypb.Empty], error)
	OnboardingGetSAMLRedirectURL(context.Context, *connect.Request[v1.OnboardingGetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error)
	OnboardingRedeemSAMLAccessCode(context.Context, *connect.Request[v1.OnboardingRedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error)
	GetStripeCheckoutURL(context.Context, *connect.Request[v1.GetStripeCheckoutURLRequest]) (*connect.Response[v1.GetStripeCheckoutURLResponse], error)
	RedeemStripeCheckout(context.Context, *connect.Request[v1.RedeemStripeCheckoutRequest]) (*connect.Response[v1.RedeemStripeCheckoutResponse], error)
	GetStripeBillingPortalURL(context.Context, *connect.Request[v1.GetStripeBillingPortalURLRequest]) (*connect.Response[v1.GetStripeBillingPortalURLResponse], error)
	GetAppOrganization(context.Context, *connect.Request[v1.GetAppOrganizationRequest]) (*connect.Response[v1.GetAppOrganizationResponse], error)
	ListAppUsers(context.Context, *connect.Request[v1.ListAppUsersRequest]) (*connect.Response[v1.ListAppUsersResponse], error)
	ListEnvironments(context.Context, *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error)
	GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.Environment], error)
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.Environment], error)
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.Environment], error)
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.APIKey], error)
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.APIKey], error)
	DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[emptypb.Empty], error)
	ListSAMLOAuthClients(context.Context, *connect.Request[v1.ListSAMLOAuthClientsRequest]) (*connect.Response[v1.ListSAMLOAuthClientsResponse], error)
	GetSAMLOAuthClient(context.Context, *connect.Request[v1.GetSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error)
	CreateSAMLOAuthClient(context.Context, *connect.Request[v1.CreateSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error)
	DeleteSAMLOAuthClient(context.Context, *connect.Request[v1.DeleteSAMLOAuthClientRequest]) (*connect.Response[emptypb.Empty], error)
	AppListOrganizations(context.Context, *connect.Request[v1.AppListOrganizationsRequest]) (*connect.Response[v1.AppListOrganizationsResponse], error)
	AppGetOrganization(context.Context, *connect.Request[v1.AppGetOrganizationRequest]) (*connect.Response[v1.Organization], error)
	AppCreateOrganization(context.Context, *connect.Request[v1.AppCreateOrganizationRequest]) (*connect.Response[v1.Organization], error)
	AppUpdateOrganization(context.Context, *connect.Request[v1.AppUpdateOrganizationRequest]) (*connect.Response[v1.Organization], error)
	AppCreateAdminSetupURL(context.Context, *connect.Request[v1.AppCreateAdminSetupURLRequest]) (*connect.Response[v1.AppCreateAdminSetupURLResponse], error)
	AppListSAMLConnections(context.Context, *connect.Request[v1.AppListSAMLConnectionsRequest]) (*connect.Response[v1.AppListSAMLConnectionsResponse], error)
	AppGetSAMLConnection(context.Context, *connect.Request[v1.AppGetSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error)
	AppCreateSAMLConnection(context.Context, *connect.Request[v1.AppCreateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error)
	AppUpdateSAMLConnection(context.Context, *connect.Request[v1.AppUpdateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error)
	AppListSAMLFlows(context.Context, *connect.Request[v1.AppListSAMLFlowsRequest]) (*connect.Response[v1.AppListSAMLFlowsResponse], error)
	AppGetSAMLFlow(context.Context, *connect.Request[v1.AppGetSAMLFlowRequest]) (*connect.Response[v1.SAMLFlow], error)
	ParseSAMLMetadata(context.Context, *connect.Request[v1.ParseSAMLMetadataRequest]) (*connect.Response[v1.ParseSAMLMetadataResponse], error)
	AppListSCIMDirectories(context.Context, *connect.Request[v1.AppListSCIMDirectoriesRequest]) (*connect.Response[v1.AppListSCIMDirectoriesResponse], error)
	AppGetSCIMDirectory(context.Context, *connect.Request[v1.AppGetSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error)
	AppCreateSCIMDirectory(context.Context, *connect.Request[v1.AppCreateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error)
	AppUpdateSCIMDirectory(context.Context, *connect.Request[v1.AppUpdateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error)
	AppRotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.AppRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AppRotateSCIMDirectoryBearerTokenResponse], error)
	AppListSCIMUsers(context.Context, *connect.Request[v1.AppListSCIMUsersRequest]) (*connect.Response[v1.AppListSCIMUsersResponse], error)
	AppGetSCIMUser(context.Context, *connect.Request[v1.AppGetSCIMUserRequest]) (*connect.Response[v1.SCIMUser], error)
	AppListSCIMGroups(context.Context, *connect.Request[v1.AppListSCIMGroupsRequest]) (*connect.Response[v1.AppListSCIMGroupsResponse], error)
	AppGetSCIMGroup(context.Context, *connect.Request[v1.AppGetSCIMGroupRequest]) (*connect.Response[v1.SCIMGroup], error)
	AdminRedeemOneTimeToken(context.Context, *connect.Request[v1.AdminRedeemOneTimeTokenRequest]) (*connect.Response[v1.AdminRedeemOneTimeTokenResponse], error)
	AdminWhoami(context.Context, *connect.Request[v1.AdminWhoamiRequest]) (*connect.Response[v1.AdminWhoamiResponse], error)
	AdminListSAMLConnections(context.Context, *connect.Request[v1.AdminListSAMLConnectionsRequest]) (*connect.Response[v1.AdminListSAMLConnectionsResponse], error)
	AdminGetSAMLConnection(context.Context, *connect.Request[v1.AdminGetSAMLConnectionRequest]) (*connect.Response[v1.AdminGetSAMLConnectionResponse], error)
	AdminCreateSAMLConnection(context.Context, *connect.Request[v1.AdminCreateSAMLConnectionRequest]) (*connect.Response[v1.AdminCreateSAMLConnectionResponse], error)
	AdminUpdateSAMLConnection(context.Context, *connect.Request[v1.AdminUpdateSAMLConnectionRequest]) (*connect.Response[v1.AdminUpdateSAMLConnectionResponse], error)
	AdminParseSAMLMetadata(context.Context, *connect.Request[v1.AdminParseSAMLMetadataRequest]) (*connect.Response[v1.AdminParseSAMLMetadataResponse], error)
	AdminListSCIMDirectories(context.Context, *connect.Request[v1.AdminListSCIMDirectoriesRequest]) (*connect.Response[v1.AdminListSCIMDirectoriesResponse], error)
	AdminGetSCIMDirectory(context.Context, *connect.Request[v1.AdminGetSCIMDirectoryRequest]) (*connect.Response[v1.AdminGetSCIMDirectoryResponse], error)
	AdminCreateSCIMDirectory(context.Context, *connect.Request[v1.AdminCreateSCIMDirectoryRequest]) (*connect.Response[v1.AdminCreateSCIMDirectoryResponse], error)
	AdminUpdateSCIMDirectory(context.Context, *connect.Request[v1.AdminUpdateSCIMDirectoryRequest]) (*connect.Response[v1.AdminUpdateSCIMDirectoryResponse], error)
	AdminRotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.AdminRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AdminRotateSCIMDirectoryBearerTokenResponse], error)
}

// NewSSOReadyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSSOReadyServiceHandler(svc SSOReadyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sSOReadyServiceGetSAMLRedirectURLHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetSAMLRedirectURLProcedure,
		svc.GetSAMLRedirectURL,
		opts...,
	)
	sSOReadyServiceRedeemSAMLAccessCodeHandler := connect.NewUnaryHandler(
		SSOReadyServiceRedeemSAMLAccessCodeProcedure,
		svc.RedeemSAMLAccessCode,
		opts...,
	)
	sSOReadyServiceListSCIMUsersHandler := connect.NewUnaryHandler(
		SSOReadyServiceListSCIMUsersProcedure,
		svc.ListSCIMUsers,
		opts...,
	)
	sSOReadyServiceGetSCIMUserHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetSCIMUserProcedure,
		svc.GetSCIMUser,
		opts...,
	)
	sSOReadyServiceListSCIMGroupsHandler := connect.NewUnaryHandler(
		SSOReadyServiceListSCIMGroupsProcedure,
		svc.ListSCIMGroups,
		opts...,
	)
	sSOReadyServiceGetSCIMGroupHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetSCIMGroupProcedure,
		svc.GetSCIMGroup,
		opts...,
	)
	sSOReadyServiceListOrganizationsHandler := connect.NewUnaryHandler(
		SSOReadyServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		opts...,
	)
	sSOReadyServiceGetOrganizationHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetOrganizationProcedure,
		svc.GetOrganization,
		opts...,
	)
	sSOReadyServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		SSOReadyServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		opts...,
	)
	sSOReadyServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		SSOReadyServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		opts...,
	)
	sSOReadyServiceCreateSetupURLHandler := connect.NewUnaryHandler(
		SSOReadyServiceCreateSetupURLProcedure,
		svc.CreateSetupURL,
		opts...,
	)
	sSOReadyServiceListSAMLConnectionsHandler := connect.NewUnaryHandler(
		SSOReadyServiceListSAMLConnectionsProcedure,
		svc.ListSAMLConnections,
		opts...,
	)
	sSOReadyServiceGetSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetSAMLConnectionProcedure,
		svc.GetSAMLConnection,
		opts...,
	)
	sSOReadyServiceCreateSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceCreateSAMLConnectionProcedure,
		svc.CreateSAMLConnection,
		opts...,
	)
	sSOReadyServiceUpdateSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceUpdateSAMLConnectionProcedure,
		svc.UpdateSAMLConnection,
		opts...,
	)
	sSOReadyServiceListSCIMDirectoriesHandler := connect.NewUnaryHandler(
		SSOReadyServiceListSCIMDirectoriesProcedure,
		svc.ListSCIMDirectories,
		opts...,
	)
	sSOReadyServiceGetSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetSCIMDirectoryProcedure,
		svc.GetSCIMDirectory,
		opts...,
	)
	sSOReadyServiceCreateSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceCreateSCIMDirectoryProcedure,
		svc.CreateSCIMDirectory,
		opts...,
	)
	sSOReadyServiceUpdateSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceUpdateSCIMDirectoryProcedure,
		svc.UpdateSCIMDirectory,
		opts...,
	)
	sSOReadyServiceRotateSCIMDirectoryBearerTokenHandler := connect.NewUnaryHandler(
		SSOReadyServiceRotateSCIMDirectoryBearerTokenProcedure,
		svc.RotateSCIMDirectoryBearerToken,
		opts...,
	)
	sSOReadyServiceVerifyEmailHandler := connect.NewUnaryHandler(
		SSOReadyServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		opts...,
	)
	sSOReadyServiceSignInHandler := connect.NewUnaryHandler(
		SSOReadyServiceSignInProcedure,
		svc.SignIn,
		opts...,
	)
	sSOReadyServiceSignOutHandler := connect.NewUnaryHandler(
		SSOReadyServiceSignOutProcedure,
		svc.SignOut,
		opts...,
	)
	sSOReadyServiceWhoamiHandler := connect.NewUnaryHandler(
		SSOReadyServiceWhoamiProcedure,
		svc.Whoami,
		opts...,
	)
	sSOReadyServiceGetOnboardingStateHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetOnboardingStateProcedure,
		svc.GetOnboardingState,
		opts...,
	)
	sSOReadyServiceUpdateOnboardingStateHandler := connect.NewUnaryHandler(
		SSOReadyServiceUpdateOnboardingStateProcedure,
		svc.UpdateOnboardingState,
		opts...,
	)
	sSOReadyServiceOnboardingGetSAMLRedirectURLHandler := connect.NewUnaryHandler(
		SSOReadyServiceOnboardingGetSAMLRedirectURLProcedure,
		svc.OnboardingGetSAMLRedirectURL,
		opts...,
	)
	sSOReadyServiceOnboardingRedeemSAMLAccessCodeHandler := connect.NewUnaryHandler(
		SSOReadyServiceOnboardingRedeemSAMLAccessCodeProcedure,
		svc.OnboardingRedeemSAMLAccessCode,
		opts...,
	)
	sSOReadyServiceGetStripeCheckoutURLHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetStripeCheckoutURLProcedure,
		svc.GetStripeCheckoutURL,
		opts...,
	)
	sSOReadyServiceRedeemStripeCheckoutHandler := connect.NewUnaryHandler(
		SSOReadyServiceRedeemStripeCheckoutProcedure,
		svc.RedeemStripeCheckout,
		opts...,
	)
	sSOReadyServiceGetStripeBillingPortalURLHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetStripeBillingPortalURLProcedure,
		svc.GetStripeBillingPortalURL,
		opts...,
	)
	sSOReadyServiceGetAppOrganizationHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetAppOrganizationProcedure,
		svc.GetAppOrganization,
		opts...,
	)
	sSOReadyServiceListAppUsersHandler := connect.NewUnaryHandler(
		SSOReadyServiceListAppUsersProcedure,
		svc.ListAppUsers,
		opts...,
	)
	sSOReadyServiceListEnvironmentsHandler := connect.NewUnaryHandler(
		SSOReadyServiceListEnvironmentsProcedure,
		svc.ListEnvironments,
		opts...,
	)
	sSOReadyServiceGetEnvironmentHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetEnvironmentProcedure,
		svc.GetEnvironment,
		opts...,
	)
	sSOReadyServiceCreateEnvironmentHandler := connect.NewUnaryHandler(
		SSOReadyServiceCreateEnvironmentProcedure,
		svc.CreateEnvironment,
		opts...,
	)
	sSOReadyServiceUpdateEnvironmentHandler := connect.NewUnaryHandler(
		SSOReadyServiceUpdateEnvironmentProcedure,
		svc.UpdateEnvironment,
		opts...,
	)
	sSOReadyServiceListAPIKeysHandler := connect.NewUnaryHandler(
		SSOReadyServiceListAPIKeysProcedure,
		svc.ListAPIKeys,
		opts...,
	)
	sSOReadyServiceGetAPIKeyHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetAPIKeyProcedure,
		svc.GetAPIKey,
		opts...,
	)
	sSOReadyServiceCreateAPIKeyHandler := connect.NewUnaryHandler(
		SSOReadyServiceCreateAPIKeyProcedure,
		svc.CreateAPIKey,
		opts...,
	)
	sSOReadyServiceDeleteAPIKeyHandler := connect.NewUnaryHandler(
		SSOReadyServiceDeleteAPIKeyProcedure,
		svc.DeleteAPIKey,
		opts...,
	)
	sSOReadyServiceListSAMLOAuthClientsHandler := connect.NewUnaryHandler(
		SSOReadyServiceListSAMLOAuthClientsProcedure,
		svc.ListSAMLOAuthClients,
		opts...,
	)
	sSOReadyServiceGetSAMLOAuthClientHandler := connect.NewUnaryHandler(
		SSOReadyServiceGetSAMLOAuthClientProcedure,
		svc.GetSAMLOAuthClient,
		opts...,
	)
	sSOReadyServiceCreateSAMLOAuthClientHandler := connect.NewUnaryHandler(
		SSOReadyServiceCreateSAMLOAuthClientProcedure,
		svc.CreateSAMLOAuthClient,
		opts...,
	)
	sSOReadyServiceDeleteSAMLOAuthClientHandler := connect.NewUnaryHandler(
		SSOReadyServiceDeleteSAMLOAuthClientProcedure,
		svc.DeleteSAMLOAuthClient,
		opts...,
	)
	sSOReadyServiceAppListOrganizationsHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppListOrganizationsProcedure,
		svc.AppListOrganizations,
		opts...,
	)
	sSOReadyServiceAppGetOrganizationHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppGetOrganizationProcedure,
		svc.AppGetOrganization,
		opts...,
	)
	sSOReadyServiceAppCreateOrganizationHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppCreateOrganizationProcedure,
		svc.AppCreateOrganization,
		opts...,
	)
	sSOReadyServiceAppUpdateOrganizationHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppUpdateOrganizationProcedure,
		svc.AppUpdateOrganization,
		opts...,
	)
	sSOReadyServiceAppCreateAdminSetupURLHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppCreateAdminSetupURLProcedure,
		svc.AppCreateAdminSetupURL,
		opts...,
	)
	sSOReadyServiceAppListSAMLConnectionsHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppListSAMLConnectionsProcedure,
		svc.AppListSAMLConnections,
		opts...,
	)
	sSOReadyServiceAppGetSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppGetSAMLConnectionProcedure,
		svc.AppGetSAMLConnection,
		opts...,
	)
	sSOReadyServiceAppCreateSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppCreateSAMLConnectionProcedure,
		svc.AppCreateSAMLConnection,
		opts...,
	)
	sSOReadyServiceAppUpdateSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppUpdateSAMLConnectionProcedure,
		svc.AppUpdateSAMLConnection,
		opts...,
	)
	sSOReadyServiceAppListSAMLFlowsHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppListSAMLFlowsProcedure,
		svc.AppListSAMLFlows,
		opts...,
	)
	sSOReadyServiceAppGetSAMLFlowHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppGetSAMLFlowProcedure,
		svc.AppGetSAMLFlow,
		opts...,
	)
	sSOReadyServiceParseSAMLMetadataHandler := connect.NewUnaryHandler(
		SSOReadyServiceParseSAMLMetadataProcedure,
		svc.ParseSAMLMetadata,
		opts...,
	)
	sSOReadyServiceAppListSCIMDirectoriesHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppListSCIMDirectoriesProcedure,
		svc.AppListSCIMDirectories,
		opts...,
	)
	sSOReadyServiceAppGetSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppGetSCIMDirectoryProcedure,
		svc.AppGetSCIMDirectory,
		opts...,
	)
	sSOReadyServiceAppCreateSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppCreateSCIMDirectoryProcedure,
		svc.AppCreateSCIMDirectory,
		opts...,
	)
	sSOReadyServiceAppUpdateSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppUpdateSCIMDirectoryProcedure,
		svc.AppUpdateSCIMDirectory,
		opts...,
	)
	sSOReadyServiceAppRotateSCIMDirectoryBearerTokenHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppRotateSCIMDirectoryBearerTokenProcedure,
		svc.AppRotateSCIMDirectoryBearerToken,
		opts...,
	)
	sSOReadyServiceAppListSCIMUsersHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppListSCIMUsersProcedure,
		svc.AppListSCIMUsers,
		opts...,
	)
	sSOReadyServiceAppGetSCIMUserHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppGetSCIMUserProcedure,
		svc.AppGetSCIMUser,
		opts...,
	)
	sSOReadyServiceAppListSCIMGroupsHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppListSCIMGroupsProcedure,
		svc.AppListSCIMGroups,
		opts...,
	)
	sSOReadyServiceAppGetSCIMGroupHandler := connect.NewUnaryHandler(
		SSOReadyServiceAppGetSCIMGroupProcedure,
		svc.AppGetSCIMGroup,
		opts...,
	)
	sSOReadyServiceAdminRedeemOneTimeTokenHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminRedeemOneTimeTokenProcedure,
		svc.AdminRedeemOneTimeToken,
		opts...,
	)
	sSOReadyServiceAdminWhoamiHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminWhoamiProcedure,
		svc.AdminWhoami,
		opts...,
	)
	sSOReadyServiceAdminListSAMLConnectionsHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminListSAMLConnectionsProcedure,
		svc.AdminListSAMLConnections,
		opts...,
	)
	sSOReadyServiceAdminGetSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminGetSAMLConnectionProcedure,
		svc.AdminGetSAMLConnection,
		opts...,
	)
	sSOReadyServiceAdminCreateSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminCreateSAMLConnectionProcedure,
		svc.AdminCreateSAMLConnection,
		opts...,
	)
	sSOReadyServiceAdminUpdateSAMLConnectionHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminUpdateSAMLConnectionProcedure,
		svc.AdminUpdateSAMLConnection,
		opts...,
	)
	sSOReadyServiceAdminParseSAMLMetadataHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminParseSAMLMetadataProcedure,
		svc.AdminParseSAMLMetadata,
		opts...,
	)
	sSOReadyServiceAdminListSCIMDirectoriesHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminListSCIMDirectoriesProcedure,
		svc.AdminListSCIMDirectories,
		opts...,
	)
	sSOReadyServiceAdminGetSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminGetSCIMDirectoryProcedure,
		svc.AdminGetSCIMDirectory,
		opts...,
	)
	sSOReadyServiceAdminCreateSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminCreateSCIMDirectoryProcedure,
		svc.AdminCreateSCIMDirectory,
		opts...,
	)
	sSOReadyServiceAdminUpdateSCIMDirectoryHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminUpdateSCIMDirectoryProcedure,
		svc.AdminUpdateSCIMDirectory,
		opts...,
	)
	sSOReadyServiceAdminRotateSCIMDirectoryBearerTokenHandler := connect.NewUnaryHandler(
		SSOReadyServiceAdminRotateSCIMDirectoryBearerTokenProcedure,
		svc.AdminRotateSCIMDirectoryBearerToken,
		opts...,
	)
	return "/ssoready.v1.SSOReadyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SSOReadyServiceGetSAMLRedirectURLProcedure:
			sSOReadyServiceGetSAMLRedirectURLHandler.ServeHTTP(w, r)
		case SSOReadyServiceRedeemSAMLAccessCodeProcedure:
			sSOReadyServiceRedeemSAMLAccessCodeHandler.ServeHTTP(w, r)
		case SSOReadyServiceListSCIMUsersProcedure:
			sSOReadyServiceListSCIMUsersHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetSCIMUserProcedure:
			sSOReadyServiceGetSCIMUserHandler.ServeHTTP(w, r)
		case SSOReadyServiceListSCIMGroupsProcedure:
			sSOReadyServiceListSCIMGroupsHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetSCIMGroupProcedure:
			sSOReadyServiceGetSCIMGroupHandler.ServeHTTP(w, r)
		case SSOReadyServiceListOrganizationsProcedure:
			sSOReadyServiceListOrganizationsHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetOrganizationProcedure:
			sSOReadyServiceGetOrganizationHandler.ServeHTTP(w, r)
		case SSOReadyServiceCreateOrganizationProcedure:
			sSOReadyServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case SSOReadyServiceUpdateOrganizationProcedure:
			sSOReadyServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case SSOReadyServiceCreateSetupURLProcedure:
			sSOReadyServiceCreateSetupURLHandler.ServeHTTP(w, r)
		case SSOReadyServiceListSAMLConnectionsProcedure:
			sSOReadyServiceListSAMLConnectionsHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetSAMLConnectionProcedure:
			sSOReadyServiceGetSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceCreateSAMLConnectionProcedure:
			sSOReadyServiceCreateSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceUpdateSAMLConnectionProcedure:
			sSOReadyServiceUpdateSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceListSCIMDirectoriesProcedure:
			sSOReadyServiceListSCIMDirectoriesHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetSCIMDirectoryProcedure:
			sSOReadyServiceGetSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceCreateSCIMDirectoryProcedure:
			sSOReadyServiceCreateSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceUpdateSCIMDirectoryProcedure:
			sSOReadyServiceUpdateSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceRotateSCIMDirectoryBearerTokenProcedure:
			sSOReadyServiceRotateSCIMDirectoryBearerTokenHandler.ServeHTTP(w, r)
		case SSOReadyServiceVerifyEmailProcedure:
			sSOReadyServiceVerifyEmailHandler.ServeHTTP(w, r)
		case SSOReadyServiceSignInProcedure:
			sSOReadyServiceSignInHandler.ServeHTTP(w, r)
		case SSOReadyServiceSignOutProcedure:
			sSOReadyServiceSignOutHandler.ServeHTTP(w, r)
		case SSOReadyServiceWhoamiProcedure:
			sSOReadyServiceWhoamiHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetOnboardingStateProcedure:
			sSOReadyServiceGetOnboardingStateHandler.ServeHTTP(w, r)
		case SSOReadyServiceUpdateOnboardingStateProcedure:
			sSOReadyServiceUpdateOnboardingStateHandler.ServeHTTP(w, r)
		case SSOReadyServiceOnboardingGetSAMLRedirectURLProcedure:
			sSOReadyServiceOnboardingGetSAMLRedirectURLHandler.ServeHTTP(w, r)
		case SSOReadyServiceOnboardingRedeemSAMLAccessCodeProcedure:
			sSOReadyServiceOnboardingRedeemSAMLAccessCodeHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetStripeCheckoutURLProcedure:
			sSOReadyServiceGetStripeCheckoutURLHandler.ServeHTTP(w, r)
		case SSOReadyServiceRedeemStripeCheckoutProcedure:
			sSOReadyServiceRedeemStripeCheckoutHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetStripeBillingPortalURLProcedure:
			sSOReadyServiceGetStripeBillingPortalURLHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetAppOrganizationProcedure:
			sSOReadyServiceGetAppOrganizationHandler.ServeHTTP(w, r)
		case SSOReadyServiceListAppUsersProcedure:
			sSOReadyServiceListAppUsersHandler.ServeHTTP(w, r)
		case SSOReadyServiceListEnvironmentsProcedure:
			sSOReadyServiceListEnvironmentsHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetEnvironmentProcedure:
			sSOReadyServiceGetEnvironmentHandler.ServeHTTP(w, r)
		case SSOReadyServiceCreateEnvironmentProcedure:
			sSOReadyServiceCreateEnvironmentHandler.ServeHTTP(w, r)
		case SSOReadyServiceUpdateEnvironmentProcedure:
			sSOReadyServiceUpdateEnvironmentHandler.ServeHTTP(w, r)
		case SSOReadyServiceListAPIKeysProcedure:
			sSOReadyServiceListAPIKeysHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetAPIKeyProcedure:
			sSOReadyServiceGetAPIKeyHandler.ServeHTTP(w, r)
		case SSOReadyServiceCreateAPIKeyProcedure:
			sSOReadyServiceCreateAPIKeyHandler.ServeHTTP(w, r)
		case SSOReadyServiceDeleteAPIKeyProcedure:
			sSOReadyServiceDeleteAPIKeyHandler.ServeHTTP(w, r)
		case SSOReadyServiceListSAMLOAuthClientsProcedure:
			sSOReadyServiceListSAMLOAuthClientsHandler.ServeHTTP(w, r)
		case SSOReadyServiceGetSAMLOAuthClientProcedure:
			sSOReadyServiceGetSAMLOAuthClientHandler.ServeHTTP(w, r)
		case SSOReadyServiceCreateSAMLOAuthClientProcedure:
			sSOReadyServiceCreateSAMLOAuthClientHandler.ServeHTTP(w, r)
		case SSOReadyServiceDeleteSAMLOAuthClientProcedure:
			sSOReadyServiceDeleteSAMLOAuthClientHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppListOrganizationsProcedure:
			sSOReadyServiceAppListOrganizationsHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppGetOrganizationProcedure:
			sSOReadyServiceAppGetOrganizationHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppCreateOrganizationProcedure:
			sSOReadyServiceAppCreateOrganizationHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppUpdateOrganizationProcedure:
			sSOReadyServiceAppUpdateOrganizationHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppCreateAdminSetupURLProcedure:
			sSOReadyServiceAppCreateAdminSetupURLHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppListSAMLConnectionsProcedure:
			sSOReadyServiceAppListSAMLConnectionsHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppGetSAMLConnectionProcedure:
			sSOReadyServiceAppGetSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppCreateSAMLConnectionProcedure:
			sSOReadyServiceAppCreateSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppUpdateSAMLConnectionProcedure:
			sSOReadyServiceAppUpdateSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppListSAMLFlowsProcedure:
			sSOReadyServiceAppListSAMLFlowsHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppGetSAMLFlowProcedure:
			sSOReadyServiceAppGetSAMLFlowHandler.ServeHTTP(w, r)
		case SSOReadyServiceParseSAMLMetadataProcedure:
			sSOReadyServiceParseSAMLMetadataHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppListSCIMDirectoriesProcedure:
			sSOReadyServiceAppListSCIMDirectoriesHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppGetSCIMDirectoryProcedure:
			sSOReadyServiceAppGetSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppCreateSCIMDirectoryProcedure:
			sSOReadyServiceAppCreateSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppUpdateSCIMDirectoryProcedure:
			sSOReadyServiceAppUpdateSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppRotateSCIMDirectoryBearerTokenProcedure:
			sSOReadyServiceAppRotateSCIMDirectoryBearerTokenHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppListSCIMUsersProcedure:
			sSOReadyServiceAppListSCIMUsersHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppGetSCIMUserProcedure:
			sSOReadyServiceAppGetSCIMUserHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppListSCIMGroupsProcedure:
			sSOReadyServiceAppListSCIMGroupsHandler.ServeHTTP(w, r)
		case SSOReadyServiceAppGetSCIMGroupProcedure:
			sSOReadyServiceAppGetSCIMGroupHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminRedeemOneTimeTokenProcedure:
			sSOReadyServiceAdminRedeemOneTimeTokenHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminWhoamiProcedure:
			sSOReadyServiceAdminWhoamiHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminListSAMLConnectionsProcedure:
			sSOReadyServiceAdminListSAMLConnectionsHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminGetSAMLConnectionProcedure:
			sSOReadyServiceAdminGetSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminCreateSAMLConnectionProcedure:
			sSOReadyServiceAdminCreateSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminUpdateSAMLConnectionProcedure:
			sSOReadyServiceAdminUpdateSAMLConnectionHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminParseSAMLMetadataProcedure:
			sSOReadyServiceAdminParseSAMLMetadataHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminListSCIMDirectoriesProcedure:
			sSOReadyServiceAdminListSCIMDirectoriesHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminGetSCIMDirectoryProcedure:
			sSOReadyServiceAdminGetSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminCreateSCIMDirectoryProcedure:
			sSOReadyServiceAdminCreateSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminUpdateSCIMDirectoryProcedure:
			sSOReadyServiceAdminUpdateSCIMDirectoryHandler.ServeHTTP(w, r)
		case SSOReadyServiceAdminRotateSCIMDirectoryBearerTokenProcedure:
			sSOReadyServiceAdminRotateSCIMDirectoryBearerTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSSOReadyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSSOReadyServiceHandler struct{}

func (UnimplementedSSOReadyServiceHandler) GetSAMLRedirectURL(context.Context, *connect.Request[v1.GetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetSAMLRedirectURL is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) RedeemSAMLAccessCode(context.Context, *connect.Request[v1.RedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.RedeemSAMLAccessCode is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListSCIMUsers(context.Context, *connect.Request[v1.ListSCIMUsersRequest]) (*connect.Response[v1.ListSCIMUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListSCIMUsers is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetSCIMUser(context.Context, *connect.Request[v1.GetSCIMUserRequest]) (*connect.Response[v1.GetSCIMUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetSCIMUser is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListSCIMGroups(context.Context, *connect.Request[v1.ListSCIMGroupsRequest]) (*connect.Response[v1.ListSCIMGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListSCIMGroups is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetSCIMGroup(context.Context, *connect.Request[v1.GetSCIMGroupRequest]) (*connect.Response[v1.GetSCIMGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetSCIMGroup is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListOrganizations is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetOrganization is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.CreateOrganization is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.UpdateOrganization is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) CreateSetupURL(context.Context, *connect.Request[v1.CreateSetupURLRequest]) (*connect.Response[v1.CreateSetupURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.CreateSetupURL is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListSAMLConnections is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.CreateSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.UpdateSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListSCIMDirectories(context.Context, *connect.Request[v1.ListSCIMDirectoriesRequest]) (*connect.Response[v1.ListSCIMDirectoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListSCIMDirectories is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetSCIMDirectory(context.Context, *connect.Request[v1.GetSCIMDirectoryRequest]) (*connect.Response[v1.GetSCIMDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) CreateSCIMDirectory(context.Context, *connect.Request[v1.CreateSCIMDirectoryRequest]) (*connect.Response[v1.CreateSCIMDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.CreateSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) UpdateSCIMDirectory(context.Context, *connect.Request[v1.UpdateSCIMDirectoryRequest]) (*connect.Response[v1.UpdateSCIMDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.UpdateSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) RotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.RotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.RotateSCIMDirectoryBearerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.RotateSCIMDirectoryBearerToken is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.VerifyEmail is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.SignIn is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.SignOut is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.Whoami is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetOnboardingState(context.Context, *connect.Request[v1.GetOnboardingStateRequest]) (*connect.Response[v1.GetOnboardingStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetOnboardingState is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) UpdateOnboardingState(context.Context, *connect.Request[v1.UpdateOnboardingStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.UpdateOnboardingState is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) OnboardingGetSAMLRedirectURL(context.Context, *connect.Request[v1.OnboardingGetSAMLRedirectURLRequest]) (*connect.Response[v1.GetSAMLRedirectURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.OnboardingGetSAMLRedirectURL is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) OnboardingRedeemSAMLAccessCode(context.Context, *connect.Request[v1.OnboardingRedeemSAMLAccessCodeRequest]) (*connect.Response[v1.RedeemSAMLAccessCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.OnboardingRedeemSAMLAccessCode is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetStripeCheckoutURL(context.Context, *connect.Request[v1.GetStripeCheckoutURLRequest]) (*connect.Response[v1.GetStripeCheckoutURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetStripeCheckoutURL is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) RedeemStripeCheckout(context.Context, *connect.Request[v1.RedeemStripeCheckoutRequest]) (*connect.Response[v1.RedeemStripeCheckoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.RedeemStripeCheckout is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetStripeBillingPortalURL(context.Context, *connect.Request[v1.GetStripeBillingPortalURLRequest]) (*connect.Response[v1.GetStripeBillingPortalURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetStripeBillingPortalURL is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetAppOrganization(context.Context, *connect.Request[v1.GetAppOrganizationRequest]) (*connect.Response[v1.GetAppOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetAppOrganization is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListAppUsers(context.Context, *connect.Request[v1.ListAppUsersRequest]) (*connect.Response[v1.ListAppUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListAppUsers is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListEnvironments(context.Context, *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListEnvironments is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.Environment], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetEnvironment is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.Environment], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.CreateEnvironment is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.Environment], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.UpdateEnvironment is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListAPIKeys is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.APIKey], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetAPIKey is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.APIKey], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.CreateAPIKey is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.DeleteAPIKey is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ListSAMLOAuthClients(context.Context, *connect.Request[v1.ListSAMLOAuthClientsRequest]) (*connect.Response[v1.ListSAMLOAuthClientsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ListSAMLOAuthClients is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) GetSAMLOAuthClient(context.Context, *connect.Request[v1.GetSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.GetSAMLOAuthClient is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) CreateSAMLOAuthClient(context.Context, *connect.Request[v1.CreateSAMLOAuthClientRequest]) (*connect.Response[v1.SAMLOAuthClient], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.CreateSAMLOAuthClient is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) DeleteSAMLOAuthClient(context.Context, *connect.Request[v1.DeleteSAMLOAuthClientRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.DeleteSAMLOAuthClient is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppListOrganizations(context.Context, *connect.Request[v1.AppListOrganizationsRequest]) (*connect.Response[v1.AppListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppListOrganizations is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppGetOrganization(context.Context, *connect.Request[v1.AppGetOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppGetOrganization is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppCreateOrganization(context.Context, *connect.Request[v1.AppCreateOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppCreateOrganization is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppUpdateOrganization(context.Context, *connect.Request[v1.AppUpdateOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppUpdateOrganization is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppCreateAdminSetupURL(context.Context, *connect.Request[v1.AppCreateAdminSetupURLRequest]) (*connect.Response[v1.AppCreateAdminSetupURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppCreateAdminSetupURL is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppListSAMLConnections(context.Context, *connect.Request[v1.AppListSAMLConnectionsRequest]) (*connect.Response[v1.AppListSAMLConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppListSAMLConnections is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppGetSAMLConnection(context.Context, *connect.Request[v1.AppGetSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppGetSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppCreateSAMLConnection(context.Context, *connect.Request[v1.AppCreateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppCreateSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppUpdateSAMLConnection(context.Context, *connect.Request[v1.AppUpdateSAMLConnectionRequest]) (*connect.Response[v1.SAMLConnection], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppUpdateSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppListSAMLFlows(context.Context, *connect.Request[v1.AppListSAMLFlowsRequest]) (*connect.Response[v1.AppListSAMLFlowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppListSAMLFlows is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppGetSAMLFlow(context.Context, *connect.Request[v1.AppGetSAMLFlowRequest]) (*connect.Response[v1.SAMLFlow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppGetSAMLFlow is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) ParseSAMLMetadata(context.Context, *connect.Request[v1.ParseSAMLMetadataRequest]) (*connect.Response[v1.ParseSAMLMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.ParseSAMLMetadata is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppListSCIMDirectories(context.Context, *connect.Request[v1.AppListSCIMDirectoriesRequest]) (*connect.Response[v1.AppListSCIMDirectoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppListSCIMDirectories is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppGetSCIMDirectory(context.Context, *connect.Request[v1.AppGetSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppGetSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppCreateSCIMDirectory(context.Context, *connect.Request[v1.AppCreateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppCreateSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppUpdateSCIMDirectory(context.Context, *connect.Request[v1.AppUpdateSCIMDirectoryRequest]) (*connect.Response[v1.SCIMDirectory], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppUpdateSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppRotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.AppRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AppRotateSCIMDirectoryBearerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppRotateSCIMDirectoryBearerToken is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppListSCIMUsers(context.Context, *connect.Request[v1.AppListSCIMUsersRequest]) (*connect.Response[v1.AppListSCIMUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppListSCIMUsers is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppGetSCIMUser(context.Context, *connect.Request[v1.AppGetSCIMUserRequest]) (*connect.Response[v1.SCIMUser], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppGetSCIMUser is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppListSCIMGroups(context.Context, *connect.Request[v1.AppListSCIMGroupsRequest]) (*connect.Response[v1.AppListSCIMGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppListSCIMGroups is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AppGetSCIMGroup(context.Context, *connect.Request[v1.AppGetSCIMGroupRequest]) (*connect.Response[v1.SCIMGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AppGetSCIMGroup is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminRedeemOneTimeToken(context.Context, *connect.Request[v1.AdminRedeemOneTimeTokenRequest]) (*connect.Response[v1.AdminRedeemOneTimeTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminRedeemOneTimeToken is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminWhoami(context.Context, *connect.Request[v1.AdminWhoamiRequest]) (*connect.Response[v1.AdminWhoamiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminWhoami is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminListSAMLConnections(context.Context, *connect.Request[v1.AdminListSAMLConnectionsRequest]) (*connect.Response[v1.AdminListSAMLConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminListSAMLConnections is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminGetSAMLConnection(context.Context, *connect.Request[v1.AdminGetSAMLConnectionRequest]) (*connect.Response[v1.AdminGetSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminGetSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminCreateSAMLConnection(context.Context, *connect.Request[v1.AdminCreateSAMLConnectionRequest]) (*connect.Response[v1.AdminCreateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminCreateSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminUpdateSAMLConnection(context.Context, *connect.Request[v1.AdminUpdateSAMLConnectionRequest]) (*connect.Response[v1.AdminUpdateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminUpdateSAMLConnection is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminParseSAMLMetadata(context.Context, *connect.Request[v1.AdminParseSAMLMetadataRequest]) (*connect.Response[v1.AdminParseSAMLMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminParseSAMLMetadata is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminListSCIMDirectories(context.Context, *connect.Request[v1.AdminListSCIMDirectoriesRequest]) (*connect.Response[v1.AdminListSCIMDirectoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminListSCIMDirectories is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminGetSCIMDirectory(context.Context, *connect.Request[v1.AdminGetSCIMDirectoryRequest]) (*connect.Response[v1.AdminGetSCIMDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminGetSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminCreateSCIMDirectory(context.Context, *connect.Request[v1.AdminCreateSCIMDirectoryRequest]) (*connect.Response[v1.AdminCreateSCIMDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminCreateSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminUpdateSCIMDirectory(context.Context, *connect.Request[v1.AdminUpdateSCIMDirectoryRequest]) (*connect.Response[v1.AdminUpdateSCIMDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminUpdateSCIMDirectory is not implemented"))
}

func (UnimplementedSSOReadyServiceHandler) AdminRotateSCIMDirectoryBearerToken(context.Context, *connect.Request[v1.AdminRotateSCIMDirectoryBearerTokenRequest]) (*connect.Response[v1.AdminRotateSCIMDirectoryBearerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssoready.v1.SSOReadyService.AdminRotateSCIMDirectoryBearerToken is not implemented"))
}
